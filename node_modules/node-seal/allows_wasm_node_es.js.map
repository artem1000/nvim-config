{"version":3,"file":"allows_wasm_node_es.js","sources":["../src/bin/seal_allows_wasm_node.js","../src/implementation/seal.ts","../src/implementation/constants.ts","../src/implementation/batch-encoder.ts","../src/implementation/cipher-text.ts","../src/implementation/ckks-encoder.ts","../src/implementation/coeff-modulus.ts","../src/implementation/compr-mode-type.ts","../src/implementation/context-data.ts","../src/implementation/context.ts","../src/implementation/decryptor.ts","../src/implementation/encryption-parameters.ts","../src/implementation/encryptor.ts","../src/implementation/evaluator.ts","../src/implementation/exception.ts","../src/implementation/galois-keys.ts","../src/implementation/key-generator.ts","../src/implementation/memory-pool-handle.ts","../src/implementation/modulus.ts","../src/implementation/parms-id-type.ts","../src/implementation/plain-text.ts","../src/implementation/plain-modulus.ts","../src/implementation/public-key.ts","../src/implementation/relin-keys.ts","../src/implementation/scheme-type.ts","../src/implementation/secret-key.ts","../src/implementation/security-level.ts","../src/implementation/vector.ts","../src/allows_wasm_node_es.ts","../src/main/loader.ts","../src/main/seal.ts","../src/implementation/encryption-parameter-qualifiers.ts","../src/implementation/serializable.ts"],"sourcesContent":["\nvar Module = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return (\nfunction(moduleArg = {}) {\n\nvar h=moduleArg,aa,ba;h.ready=new Promise((a,b)=>{aa=a;ba=b});var ca=Object.assign({},h),da=\"./this.program\",ea=(a,b)=>{throw b;},fa=\"\",ha,ia,fs=require(\"fs\"),ja=require(\"path\");fa=__dirname+\"/\";ha=a=>{a=ka(a)?new URL(a):ja.normalize(a);return fs.readFileSync(a,void 0)};ia=a=>{a=ha(a);a.buffer||(a=new Uint8Array(a));return a};!h.thisProgram&&1<process.argv.length&&(da=process.argv[1].replace(/\\\\/g,\"/\"));process.argv.slice(2);ea=(a,b)=>{process.exitCode=a;throw b;};h.inspect=()=>\"[Emscripten Module object]\";\nh.print||console.log.bind(console);var la=h.printErr||console.error.bind(console);Object.assign(h,ca);ca=null;h.thisProgram&&(da=h.thisProgram);h.quit&&(ea=h.quit);var ma;h.wasmBinary&&(ma=h.wasmBinary);\"object\"!=typeof WebAssembly&&na(\"no native wasm support detected\");var oa,pa=!1,r,w,x,y,z,A,qa,ra;\nfunction sa(){var a=oa.buffer;h.HEAP8=r=new Int8Array(a);h.HEAP16=x=new Int16Array(a);h.HEAPU8=w=new Uint8Array(a);h.HEAPU16=y=new Uint16Array(a);h.HEAP32=z=new Int32Array(a);h.HEAPU32=A=new Uint32Array(a);h.HEAPF32=qa=new Float32Array(a);h.HEAPF64=ra=new Float64Array(a)}var ta=[],ua=[],va=[],wa=[];function xa(){var a=h.preRun.shift();ta.unshift(a)}var C=0,ya=null,D=null;\nfunction na(a){h.onAbort?.(a);a=\"Aborted(\"+a+\")\";la(a);pa=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");ba(a);throw a;}var za=a=>a.startsWith(\"data:application/octet-stream;base64,\"),ka=a=>a.startsWith(\"file://\"),E;E=\"data:application/octet-stream;base64,\";if(!za(E)){var Aa=E;E=h.locateFile?h.locateFile(Aa,fa):fa+Aa}\nfunction Ba(){var a=E;return Promise.resolve().then(()=>{if(a==E&&ma)var b=new Uint8Array(ma);else if(za(a)?(b=a.slice(37),b=Buffer.from(b,\"base64\"),b=new Uint8Array(b.buffer,b.byteOffset,b.length)):b=void 0,!b)if(ia)b=ia(a);else throw\"both async and sync fetching of the wasm failed\";return b})}function Ca(a,b){return Ba().then(c=>WebAssembly.instantiate(c,a)).then(c=>c).then(b,c=>{la(`failed to asynchronously prepare wasm: ${c}`);na(c)})}function Da(a,b){return Ca(a,b)}\nfunction Ea(a){this.name=\"ExitStatus\";this.message=`Program terminated with exit(${a})`;this.status=a}var Fa=a=>{for(;0<a.length;)a.shift()(h)},Ga=h.noExitRuntime||!0;function Ha(a){this.ba=a-24;this.Ja=function(b){A[this.ba+4>>>2>>>0]=b};this.Ba=function(b){A[this.ba+8>>>2>>>0]=b};this.ua=function(b,c){this.Aa();this.Ja(b);this.Ba(c)};this.Aa=function(){A[this.ba+16>>>2>>>0]=0}}\nvar Ia=0,Ja=0,Ka,G=a=>{for(var b=\"\";w[a>>>0];)b+=Ka[w[a++>>>0]];return b},I={},J={},La={},L,Ma=a=>{throw new L(a);},M,O=(a,b,c)=>{function d(l){l=c(l);if(l.length!==a.length)throw new M(\"Mismatched type converter count\");for(var n=0;n<a.length;++n)N(a[n],l[n])}a.forEach(function(l){La[l]=b});var e=Array(b.length),g=[],k=0;b.forEach((l,n)=>{J.hasOwnProperty(l)?e[n]=J[l]:(g.push(l),I.hasOwnProperty(l)||(I[l]=[]),I[l].push(()=>{e[n]=J[l];++k;k===g.length&&d(e)}))});0===g.length&&d(e)};\nfunction Na(a,b,c={}){var d=b.name;if(!a)throw new L(`type \"${d}\" must have a positive integer typeid pointer`);if(J.hasOwnProperty(a)){if(c.Na)return;throw new L(`Cannot register type '${d}' twice`);}J[a]=b;delete La[a];I.hasOwnProperty(a)&&(b=I[a],delete I[a],b.forEach(e=>e()))}function N(a,b,c={}){if(!(\"argPackAdvance\"in b))throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");Na(a,b,c)}\nvar Oa=a=>{throw new L(a.R.da.aa.name+\" instance already deleted\");},Pa=!1,Qa=()=>{},Ra=(a,b,c)=>{if(b===c)return a;if(void 0===c.ga)return null;a=Ra(a,b,c.ga);return null===a?null:c.Ka(a)},Sa={},P=[],Ta=()=>{for(;P.length;){var a=P.pop();a.R.ra=!1;a[\"delete\"]()}},Q,R={},Ua=(a,b)=>{if(void 0===b)throw new L(\"ptr should not be undefined\");for(;a.ga;)b=a.ta(b),a=a.ga;return R[b]},Wa=(a,b)=>{if(!b.da||!b.ba)throw new M(\"makeClassHandle requires ptr and ptrType\");if(!!b.ha!==!!b.fa)throw new M(\"Both smartPtrType and smartPtr must be specified\");\nb.count={value:1};return Va(Object.create(a,{R:{value:b,writable:!0}}))},Va=a=>{if(\"undefined\"===typeof FinalizationRegistry)return Va=b=>b,a;Pa=new FinalizationRegistry(b=>{b=b.R;--b.count.value;0===b.count.value&&(b.fa?b.ha.ma(b.fa):b.da.aa.ma(b.ba))});Va=b=>{var c=b.R;c.fa&&Pa.register(b,{R:c},b);return b};Qa=b=>{Pa.unregister(b)};return Va(a)};function Xa(){}\nvar S=(a,b)=>Object.defineProperty(b,\"name\",{value:a}),Ya=(a,b,c)=>{if(void 0===a[b].ea){var d=a[b];a[b]=function(){if(!a[b].ea.hasOwnProperty(arguments.length))throw new L(`Function '${c}' called with an invalid number of arguments (${arguments.length}) - expects one of (${a[b].ea})!`);return a[b].ea[arguments.length].apply(this,arguments)};a[b].ea=[];a[b].ea[d.qa]=d}},Za=(a,b,c)=>{if(h.hasOwnProperty(a)){if(void 0===c||void 0!==h[a].ea&&void 0!==h[a].ea[c])throw new L(`Cannot register public name '${a}' twice`);\nYa(h,a,a);if(h.hasOwnProperty(c))throw new L(`Cannot register multiple overloads of a function with the same number of arguments (${c})!`);h[a].ea[c]=b}else h[a]=b,void 0!==c&&(h[a].Ya=c)},$a=a=>{if(void 0===a)return\"_unknown\";a=a.replace(/[^a-zA-Z0-9_]/g,\"$\");var b=a.charCodeAt(0);return 48<=b&&57>=b?`_${a}`:a};function ab(a,b,c,d,e,g,k,l){this.name=a;this.constructor=b;this.la=c;this.ma=d;this.ga=e;this.La=g;this.ta=k;this.Ka=l;this.Qa=[]}\nvar bb=(a,b,c)=>{for(;b!==c;){if(!b.ta)throw new L(`Expected null or instance of ${c.name}, got an instance of ${b.name}`);a=b.ta(a);b=b.ga}return a};function cb(a,b){if(null===b){if(this.Ca)throw new L(`null is not a valid ${this.name}`);return 0}if(!b.R)throw new L(`Cannot pass \"${db(b)}\" as a ${this.name}`);if(!b.R.ba)throw new L(`Cannot pass deleted object as a pointer of type ${this.name}`);return bb(b.R.ba,b.R.da.aa,this.aa)}\nfunction eb(a,b){if(null===b){if(this.Ca)throw new L(`null is not a valid ${this.name}`);if(this.xa){var c=this.Ra();null!==a&&a.push(this.ma,c);return c}return 0}if(!b||!b.R)throw new L(`Cannot pass \"${db(b)}\" as a ${this.name}`);if(!b.R.ba)throw new L(`Cannot pass deleted object as a pointer of type ${this.name}`);if(!this.wa&&b.R.da.wa)throw new L(`Cannot convert argument of type ${b.R.ha?b.R.ha.name:b.R.da.name} to parameter type ${this.name}`);c=bb(b.R.ba,b.R.da.aa,this.aa);if(this.xa){if(void 0===\nb.R.fa)throw new L(\"Passing raw pointer to smart pointer is illegal\");switch(this.Ta){case 0:if(b.R.ha===this)c=b.R.fa;else throw new L(`Cannot convert argument of type ${b.R.ha?b.R.ha.name:b.R.da.name} to parameter type ${this.name}`);break;case 1:c=b.R.fa;break;case 2:if(b.R.ha===this)c=b.R.fa;else{var d=b.clone();c=this.Sa(c,T(()=>d[\"delete\"]()));null!==a&&a.push(this.ma,c)}break;default:throw new L(\"Unsupporting sharing policy\");}}return c}\nfunction fb(a,b){if(null===b){if(this.Ca)throw new L(`null is not a valid ${this.name}`);return 0}if(!b.R)throw new L(`Cannot pass \"${db(b)}\" as a ${this.name}`);if(!b.R.ba)throw new L(`Cannot pass deleted object as a pointer of type ${this.name}`);if(b.R.da.wa)throw new L(`Cannot convert argument of type ${b.R.da.name} to parameter type ${this.name}`);return bb(b.R.ba,b.R.da.aa,this.aa)}function gb(a){return this.fromWireType(A[a>>>2>>>0])}\nfunction hb(a,b,c,d,e,g,k,l,n,m,p){this.name=a;this.aa=b;this.Ca=c;this.wa=d;this.xa=e;this.Pa=g;this.Ta=k;this.Ga=l;this.Ra=n;this.Sa=m;this.ma=p;e||void 0!==b.ga?this.toWireType=eb:(this.toWireType=d?cb:fb,this.ia=null)}\nvar ib=(a,b,c)=>{if(!h.hasOwnProperty(a))throw new M(\"Replacing nonexistant public symbol\");void 0!==h[a].ea&&void 0!==c?h[a].ea[c]=b:(h[a]=b,h[a].qa=c)},jb=[],kb,lb=a=>{var b=jb[a];b||(a>=jb.length&&(jb.length=a+1),jb[a]=b=kb.get(a));return b},mb=(a,b)=>{var c=[];return function(){c.length=0;Object.assign(c,arguments);if(a.includes(\"j\")){var d=h[\"dynCall_\"+a];d=c&&c.length?d.apply(null,[b].concat(c)):d.call(null,b)}else d=lb(b).apply(null,c);return d}},U=(a,b)=>{a=G(a);var c=a.includes(\"j\")?mb(a,\nb):lb(b);if(\"function\"!=typeof c)throw new L(`unknown function pointer with signature ${a}: ${b}`);return c},nb,pb=a=>{a=ob(a);var b=G(a);V(a);return b},W=(a,b)=>{function c(g){e[g]||J[g]||(La[g]?La[g].forEach(c):(d.push(g),e[g]=!0))}var d=[],e={};b.forEach(c);throw new nb(`${a}: `+d.map(pb).join([\", \"]));},qb=a=>{for(;a.length;){var b=a.pop();a.pop()(b)}};function rb(a){for(var b=1;b<a.length;++b)if(null!==a[b]&&void 0===a[b].ia)return!0;return!1}\nfunction sb(a){var b=Function;if(!(b instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof b} which is not a function`);var c=S(b.name||\"unknownFunctionName\",function(){});c.prototype=b.prototype;c=new c;a=b.apply(c,a);return a instanceof Object?a:c}\nfunction tb(a,b,c,d,e,g){var k=b.length;if(2>k)throw new L(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");var l=null!==b[1]&&null!==c,n=rb(b);c=\"void\"!==b[0].name;d=[Ma,d,e,qb,b[0],b[1]];for(e=0;e<k-2;++e)d.push(b[e+2]);if(!n)for(e=l?1:2;e<b.length;++e)null!==b[e].ia&&d.push(b[e].ia);n=rb(b);e=b.length;var m=\"\",p=\"\";for(k=0;k<e-2;++k)m+=(0!==k?\", \":\"\")+\"arg\"+k,p+=(0!==k?\", \":\"\")+\"arg\"+k+\"Wired\";m=`\\n        return function (${m}) {\\n        if (arguments.length !== ${e-\n2}) {\\n          throwBindingError('function ${a} called with ' + arguments.length + ' arguments, expected ${e-2}');\\n        }`;n&&(m+=\"var destructors = [];\\n\");var t=n?\"destructors\":\"null\",u=\"throwBindingError invoker fn runDestructors retType classParam\".split(\" \");l&&(m+=\"var thisWired = classParam['toWireType'](\"+t+\", this);\\n\");for(k=0;k<e-2;++k)m+=\"var arg\"+k+\"Wired = argType\"+k+\"['toWireType'](\"+t+\", arg\"+k+\"); // \"+b[k+2].name+\"\\n\",u.push(\"argType\"+k);l&&(p=\"thisWired\"+(0<p.length?\", \":\n\"\")+p);m+=(c||g?\"var rv = \":\"\")+\"invoker(fn\"+(0<p.length?\", \":\"\")+p+\");\\n\";if(n)m+=\"runDestructors(destructors);\\n\";else for(k=l?1:2;k<b.length;++k)g=1===k?\"thisWired\":\"arg\"+(k-2)+\"Wired\",null!==b[k].ia&&(m+=g+\"_dtor(\"+g+\"); // \"+b[k].name+\"\\n\",u.push(g+\"_dtor\"));c&&(m+=\"var ret = retType['fromWireType'](rv);\\nreturn ret;\\n\");let [f,q]=[u,m+\"}\\n\"];f.push(q);b=sb(f).apply(null,d);return S(a,b)}\nvar ub=(a,b)=>{for(var c=[],d=0;d<a;d++)c.push(A[b+4*d>>>2>>>0]);return c},vb=a=>{a=a.trim();const b=a.indexOf(\"(\");return-1!==b?a.substr(0,b):a},wb=(a,b,c)=>{if(!(a instanceof Object))throw new L(`${c} with invalid \"this\": ${a}`);if(!(a instanceof b.aa.constructor))throw new L(`${c} incompatible with \"this\" of type ${a.constructor.name}`);if(!a.R.ba)throw new L(`cannot call emscripten binding method ${c} on deleted object`);return bb(a.R.ba,a.R.da.aa,b.aa)};\nfunction xb(){this.ka=[void 0];this.Fa=[]}var X=new xb;function yb(a){a>>>=0;a>=X.ua&&0===--X.get(a).Ha&&X.Ba(a)}var Y=a=>{if(!a)throw new L(\"Cannot use deleted val. handle = \"+a);return X.get(a).value},T=a=>{switch(a){case void 0:return 1;case null:return 2;case !0:return 3;case !1:return 4;default:return X.Aa({Ha:1,value:a})}};function zb(a){return this.fromWireType(z[a>>>2>>>0])}\nvar Ab=(a,b,c)=>{switch(b){case 1:return c?function(d){return this.fromWireType(r[d>>>0>>>0])}:function(d){return this.fromWireType(w[d>>>0>>>0])};case 2:return c?function(d){return this.fromWireType(x[d>>>1>>>0])}:function(d){return this.fromWireType(y[d>>>1>>>0])};case 4:return c?function(d){return this.fromWireType(z[d>>>2>>>0])}:function(d){return this.fromWireType(A[d>>>2>>>0])};default:throw new TypeError(`invalid integer width (${b}): ${a}`);}},Cb=(a,b)=>{var c=J[a];if(void 0===c)throw a=b+\n\" has unknown type \"+pb(a),new L(a);return c},db=a=>{if(null===a)return\"null\";var b=typeof a;return\"object\"===b||\"array\"===b||\"function\"===b?a.toString():\"\"+a},Db=(a,b)=>{switch(b){case 4:return function(c){return this.fromWireType(qa[c>>>2>>>0])};case 8:return function(c){return this.fromWireType(ra[c>>>3>>>0])};default:throw new TypeError(`invalid float width (${b}): ${a}`);}},Eb=(a,b,c)=>{switch(b){case 1:return c?d=>r[d>>>0>>>0]:d=>w[d>>>0>>>0];case 2:return c?d=>x[d>>>1>>>0]:d=>y[d>>>1>>>0];\ncase 4:return c?d=>z[d>>>2>>>0]:d=>A[d>>>2>>>0];default:throw new TypeError(`invalid integer width (${b}): ${a}`);}},Fb=(a,b,c,d)=>{c>>>=0;if(0<d){d=c+d-1;for(var e=0;e<a.length;++e){var g=a.charCodeAt(e);if(55296<=g&&57343>=g){var k=a.charCodeAt(++e);g=65536+((g&1023)<<10)|k&1023}if(127>=g){if(c>=d)break;b[c++>>>0]=g}else{if(2047>=g){if(c+1>=d)break;b[c++>>>0]=192|g>>6}else{if(65535>=g){if(c+2>=d)break;b[c++>>>0]=224|g>>12}else{if(c+3>=d)break;b[c++>>>0]=240|g>>18;b[c++>>>0]=128|g>>12&63}b[c++>>>\n0]=128|g>>6&63}b[c++>>>0]=128|g&63}}b[c>>>0]=0}},Gb=a=>{for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);127>=d?b++:2047>=d?b+=2:55296<=d&&57343>=d?(b+=4,++c):b+=3}return b},Hb=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0,Ib=(a,b)=>{a>>>=0;if(a){var c=w;a>>>=0;var d=a+b;for(b=a;c[b]&&!(b>=d);)++b;if(16<b-a&&c.buffer&&Hb)c=Hb.decode(c.subarray(a,b));else{for(d=\"\";a<b;){var e=c[a++];if(e&128){var g=c[a++]&63;if(192==(e&224))d+=String.fromCharCode((e&31)<<6|g);else{var k=c[a++]&\n63;e=224==(e&240)?(e&15)<<12|g<<6|k:(e&7)<<18|g<<12|k<<6|c[a++]&63;65536>e?d+=String.fromCharCode(e):(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023))}}else d+=String.fromCharCode(e)}c=d}}else c=\"\";return c},Jb=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0,Kb=(a,b)=>{var c=a>>1;for(var d=c+b/2;!(c>=d)&&y[c>>>0];)++c;c<<=1;if(32<c-a&&Jb)return Jb.decode(w.subarray(a>>>0,c>>>0));c=\"\";for(d=0;!(d>=b/2);++d){var e=x[a+2*d>>>1>>>0];if(0==e)break;c+=String.fromCharCode(e)}return c},\nLb=(a,b,c)=>{c??=2147483647;if(2>c)return 0;c-=2;var d=b;c=c<2*a.length?c/2:a.length;for(var e=0;e<c;++e)x[b>>>1>>>0]=a.charCodeAt(e),b+=2;x[b>>>1>>>0]=0;return b-d},Mb=a=>2*a.length,Nb=(a,b)=>{for(var c=0,d=\"\";!(c>=b/4);){var e=z[a+4*c>>>2>>>0];if(0==e)break;++c;65536<=e?(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023)):d+=String.fromCharCode(e)}return d},Ob=(a,b,c)=>{b>>>=0;c??=2147483647;if(4>c)return 0;var d=b;c=d+c-4;for(var e=0;e<a.length;++e){var g=a.charCodeAt(e);if(55296<=g&&57343>=\ng){var k=a.charCodeAt(++e);g=65536+((g&1023)<<10)|k&1023}z[b>>>2>>>0]=g;b+=4;if(b+4>c)break}z[b>>>2>>>0]=0;return b-d},Pb=a=>{for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&++c;b+=4}return b},Qb=(a,b,c)=>{var d=[];a=a.toWireType(d,c);d.length&&(A[b>>>2>>>0]=T(d));return a},Rb={},Sb=a=>{var b=Rb[a];return void 0===b?G(a):b},Tb=[],Ub=a=>{var b=Tb.length;Tb.push(a);return b},Vb=(a,b)=>{for(var c=Array(a),d=0;d<a;++d)c[d]=Cb(A[b+4*d>>>2>>>0],\"parameter \"+d);return c},Wb={},\nYb=()=>{if(!Xb){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:da||\"./this.program\"},b;for(b in Wb)void 0===Wb[b]?delete a[b]:a[b]=Wb[b];var c=[];for(b in a)c.push(`${b}=${a[b]}`);Xb=c}return Xb},Xb,Zb=()=>{if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues)return c=>crypto.getRandomValues(c);try{var a=require(\"crypto\");if(a.randomFillSync)return c=>\na.randomFillSync(c);var b=a.randomBytes;return c=>(c.set(b(c.byteLength)),c)}catch(c){}na(\"initRandomDevice\")},$b=a=>($b=Zb())(a),ac=a=>0===a%4&&(0!==a%100||0===a%400),bc=[31,29,31,30,31,30,31,31,30,31,30,31],cc=[31,28,31,30,31,30,31,31,30,31,30,31];function dc(a){var b=Array(Gb(a)+1);Fb(a,b,0,b.length);return b}\nfunction ec(a,b,c,d){function e(f,q,v){for(f=\"number\"==typeof f?f.toString():f||\"\";f.length<q;)f=v[0]+f;return f}function g(f,q){return e(f,q,\"0\")}function k(f,q){function v(H){return 0>H?-1:0<H?1:0}var B;0===(B=v(f.getFullYear()-q.getFullYear()))&&0===(B=v(f.getMonth()-q.getMonth()))&&(B=v(f.getDate()-q.getDate()));return B}function l(f){switch(f.getDay()){case 0:return new Date(f.getFullYear()-1,11,29);case 1:return f;case 2:return new Date(f.getFullYear(),0,3);case 3:return new Date(f.getFullYear(),\n0,2);case 4:return new Date(f.getFullYear(),0,1);case 5:return new Date(f.getFullYear()-1,11,31);case 6:return new Date(f.getFullYear()-1,11,30)}}function n(f){var q=f.oa;for(f=new Date((new Date(f.pa+1900,0,1)).getTime());0<q;){var v=f.getMonth(),B=(ac(f.getFullYear())?bc:cc)[v];if(q>B-f.getDate())q-=B-f.getDate()+1,f.setDate(1),11>v?f.setMonth(v+1):(f.setMonth(0),f.setFullYear(f.getFullYear()+1));else{f.setDate(f.getDate()+q);break}}v=new Date(f.getFullYear()+1,0,4);q=l(new Date(f.getFullYear(),\n0,4));v=l(v);return 0>=k(q,f)?0>=k(v,f)?f.getFullYear()+1:f.getFullYear():f.getFullYear()-1}a>>>=0;b>>>=0;c>>>=0;d>>>=0;var m=A[d+40>>>2>>>0];d={Wa:z[d>>>2>>>0],Va:z[d+4>>>2>>>0],ya:z[d+8>>>2>>>0],Da:z[d+12>>>2>>>0],za:z[d+16>>>2>>>0],pa:z[d+20>>>2>>>0],ja:z[d+24>>>2>>>0],oa:z[d+28>>>2>>>0],Za:z[d+32>>>2>>>0],Ua:z[d+36>>>2>>>0],Xa:m?Ib(m):\"\"};c=Ib(c);m={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\n\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var p in m)c=c.replace(new RegExp(p,\"g\"),m[p]);var t=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),u=\"January February March April May June July August September October November December\".split(\" \");m={\"%a\":f=>t[f.ja].substring(0,3),\"%A\":f=>t[f.ja],\"%b\":f=>\nu[f.za].substring(0,3),\"%B\":f=>u[f.za],\"%C\":f=>g((f.pa+1900)/100|0,2),\"%d\":f=>g(f.Da,2),\"%e\":f=>e(f.Da,2,\" \"),\"%g\":f=>n(f).toString().substring(2),\"%G\":f=>n(f),\"%H\":f=>g(f.ya,2),\"%I\":f=>{f=f.ya;0==f?f=12:12<f&&(f-=12);return g(f,2)},\"%j\":f=>{for(var q=0,v=0;v<=f.za-1;q+=(ac(f.pa+1900)?bc:cc)[v++]);return g(f.Da+q,3)},\"%m\":f=>g(f.za+1,2),\"%M\":f=>g(f.Va,2),\"%n\":()=>\"\\n\",\"%p\":f=>0<=f.ya&&12>f.ya?\"AM\":\"PM\",\"%S\":f=>g(f.Wa,2),\"%t\":()=>\"\\t\",\"%u\":f=>f.ja||7,\"%U\":f=>g(Math.floor((f.oa+7-f.ja)/7),2),\"%V\":f=>\n{var q=Math.floor((f.oa+7-(f.ja+6)%7)/7);2>=(f.ja+371-f.oa-2)%7&&q++;if(q)53==q&&(v=(f.ja+371-f.oa)%7,4==v||3==v&&ac(f.pa)||(q=1));else{q=52;var v=(f.ja+7-f.oa-1)%7;(4==v||5==v&&ac(f.pa%400-1))&&q++}return g(q,2)},\"%w\":f=>f.ja,\"%W\":f=>g(Math.floor((f.oa+7-(f.ja+6)%7)/7),2),\"%y\":f=>(f.pa+1900).toString().substring(2),\"%Y\":f=>f.pa+1900,\"%z\":f=>{f=f.Ua;var q=0<=f;f=Math.abs(f)/60;return(q?\"+\":\"-\")+String(\"0000\"+(f/60*100+f%60)).slice(-4)},\"%Z\":f=>f.Xa,\"%%\":()=>\"%\"};c=c.replace(/%%/g,\"\\x00\\x00\");for(p in m)c.includes(p)&&\n(c=c.replace(new RegExp(p,\"g\"),m[p](d)));c=c.replace(/\\0\\0/g,\"%\");p=dc(c);if(p.length>b)return 0;r.set(p,a>>>0);return p.length-1}for(var fc=Array(256),gc=0;256>gc;++gc)fc[gc]=String.fromCharCode(gc);Ka=fc;L=h.BindingError=class extends Error{constructor(a){super(a);this.name=\"BindingError\"}};M=h.InternalError=class extends Error{constructor(a){super(a);this.name=\"InternalError\"}};\nObject.assign(Xa.prototype,{isAliasOf:function(a){if(!(this instanceof Xa&&a instanceof Xa))return!1;var b=this.R.da.aa,c=this.R.ba;a.R=a.R;var d=a.R.da.aa;for(a=a.R.ba;b.ga;)c=b.ta(c),b=b.ga;for(;d.ga;)a=d.ta(a),d=d.ga;return b===d&&c===a},clone:function(){this.R.ba||Oa(this);if(this.R.sa)return this.R.count.value+=1,this;var a=Va,b=Object,c=b.create,d=Object.getPrototypeOf(this),e=this.R;a=a(c.call(b,d,{R:{value:{count:e.count,ra:e.ra,sa:e.sa,ba:e.ba,da:e.da,fa:e.fa,ha:e.ha}}}));a.R.count.value+=\n1;a.R.ra=!1;return a},[\"delete\"](){this.R.ba||Oa(this);if(this.R.ra&&!this.R.sa)throw new L(\"Object already scheduled for deletion\");Qa(this);var a=this.R;--a.count.value;0===a.count.value&&(a.fa?a.ha.ma(a.fa):a.da.aa.ma(a.ba));this.R.sa||(this.R.fa=void 0,this.R.ba=void 0)},isDeleted:function(){return!this.R.ba},deleteLater:function(){this.R.ba||Oa(this);if(this.R.ra&&!this.R.sa)throw new L(\"Object already scheduled for deletion\");P.push(this);1===P.length&&Q&&Q(Ta);this.R.ra=!0;return this}});\nh.getInheritedInstanceCount=()=>Object.keys(R).length;h.getLiveInheritedInstances=()=>{var a=[],b;for(b in R)R.hasOwnProperty(b)&&a.push(R[b]);return a};h.flushPendingDeletes=Ta;h.setDelayFunction=a=>{Q=a;P.length&&Q&&Q(Ta)};\nObject.assign(hb.prototype,{Ma(a){this.Ga&&(a=this.Ga(a));return a},Ea(a){this.ma?.(a)},argPackAdvance:8,readValueFromPointer:gb,deleteObject:function(a){if(null!==a)a[\"delete\"]()},fromWireType:function(a){function b(){return this.xa?Wa(this.aa.la,{da:this.Pa,ba:c,ha:this,fa:a}):Wa(this.aa.la,{da:this,ba:a})}var c=this.Ma(a);if(!c)return this.Ea(a),null;var d=Ua(this.aa,c);if(void 0!==d){if(0===d.R.count.value)return d.R.ba=c,d.R.fa=a,d.clone();d=d.clone();this.Ea(a);return d}d=this.aa.La(c);d=Sa[d];\nif(!d)return b.call(this);d=this.wa?d.Ia:d.pointerType;var e=Ra(c,this.aa,d.aa);return null===e?b.call(this):this.xa?Wa(d.aa.la,{da:d,ba:e,ha:this,fa:a}):Wa(d.aa.la,{da:d,ba:e})}});\nnb=h.UnboundTypeError=((a,b)=>{var c=S(b,function(d){this.name=b;this.message=d;d=Error(d).stack;void 0!==d&&(this.stack=this.toString()+\"\\n\"+d.replace(/^Error(:[^\\n]*)?\\n/,\"\"))});c.prototype=Object.create(a.prototype);c.prototype.constructor=c;c.prototype.toString=function(){return void 0===this.message?this.name:`${this.name}: ${this.message}`};return c})(Error,\"UnboundTypeError\");\nObject.assign(xb.prototype,{get(a){return this.ka[a]},has(a){return void 0!==this.ka[a]},Aa(a){var b=this.Fa.pop()||this.ka.length;this.ka[b]=a;return b},Ba(a){this.ka[a]=void 0;this.Fa.push(a)}});X.ka.push({value:void 0},{value:null},{value:!0},{value:!1});X.ua=X.ka.length;h.count_emval_handles=()=>{for(var a=0,b=X.ua;b<X.ka.length;++b)void 0!==X.ka[b]&&++a;return a};\nvar ic={a:function(a,b,c){a>>>=0;(new Ha(a)).ua(b>>>0,c>>>0);Ia=a;Ja++;throw Ia;},B:function(){},D:function(a,b,c,d){b=G(b>>>0);N(a>>>0,{name:b,fromWireType:function(e){return!!e},toWireType:function(e,g){return g?c:d},argPackAdvance:8,readValueFromPointer:function(e){return this.fromWireType(w[e>>>0])},ia:null})},e:function(a,b,c,d,e,g,k,l,n,m,p,t,u){a>>>=0;b>>>=0;c>>>=0;d>>>=0;g>>>=0;k>>>=0;l>>>=0;n>>>=0;m>>>=0;p>>>=0;t>>>=0;u>>>=0;p=G(p);g=U(e>>>0,g);l&&=U(k,l);m&&=U(n,m);u=U(t,u);var f=$a(p);\nZa(f,function(){W(`Cannot construct ${p} due to unbound types`,[d])});O([a,b,c],d?[d]:[],function(q){q=q[0];if(d){var v=q.aa;var B=v.la}else B=Xa.prototype;q=S(p,function(){if(Object.getPrototypeOf(this)!==H)throw new L(\"Use 'new' to construct \"+p);if(void 0===F.na)throw new L(p+\" has no accessible constructor\");var Bb=F.na[arguments.length];if(void 0===Bb)throw new L(`Tried to invoke ctor of ${p} with invalid number of parameters (${arguments.length}) - expected (${Object.keys(F.na).toString()}) parameters instead!`);\nreturn Bb.apply(this,arguments)});var H=Object.create(B,{constructor:{value:q}});q.prototype=H;var F=new ab(p,q,H,u,v,g,l,m);if(F.ga){var K;(K=F.ga).va??(K.va=[]);F.ga.va.push(F)}v=new hb(p,F,!0,!1,!1);K=new hb(p+\"*\",F,!1,!1,!1);B=new hb(p+\" const*\",F,!1,!0,!1);Sa[a]={pointerType:K,Ia:B};ib(f,q);return[v,K,B]})},r:function(a,b,c,d,e,g,k,l){a>>>=0;b>>>=0;e>>>=0;g>>>=0;k>>>=0;var n=ub(c,d>>>0);b=G(b);b=vb(b);g=U(e,g);O([],[a],function(m){function p(){W(`Cannot call ${t} due to unbound types`,n)}m=m[0];\nvar t=`${m.name}.${b}`;b.startsWith(\"@@\")&&(b=Symbol[b.substring(2)]);var u=m.aa.constructor;void 0===u[b]?(p.qa=c-1,u[b]=p):(Ya(u,b,t),u[b].ea[c-1]=p);O([],n,function(f){f=[f[0],null].concat(f.slice(1));f=tb(t,f,null,g,k,l);void 0===u[b].ea?(f.qa=c-1,u[b]=f):u[b].ea[c-1]=f;if(m.aa.va)for(const q of m.aa.va)q.constructor.hasOwnProperty(b)||(q.constructor[b]=f);return[]});return[]})},x:function(a,b,c,d,e,g,k,l){a>>>=0;b>>>=0;c>>>=0;d>>>=0;g>>>=0;k>>>=0;l>>>=0;b=G(b);g=U(e>>>0,g);O([],[a],function(n){n=\nn[0];var m=`${n.name}.${b}`,p={get(){W(`Cannot access ${m} due to unbound types`,[c])},enumerable:!0,configurable:!0};p.set=l?()=>{W(`Cannot access ${m} due to unbound types`,[c])}:()=>{throw new L(`${m} is a read-only property`);};Object.defineProperty(n.aa.constructor,b,p);O([],[c],function(t){t=t[0];var u={get(){return t.fromWireType(g(d))},enumerable:!0};l&&(l=U(k,l),u.set=f=>{var q=[];l(d,t.toWireType(q,f));qb(q)});Object.defineProperty(n.aa.constructor,b,u);return[]});return[]})},f:function(a,\nb,c,d,e,g){a>>>=0;d>>>=0;e>>>=0;g>>>=0;var k=ub(b,c>>>0);e=U(d,e);O([],[a],function(l){l=l[0];var n=`constructor ${l.name}`;void 0===l.aa.na&&(l.aa.na=[]);if(void 0!==l.aa.na[b-1])throw new L(`Cannot register multiple constructors with identical number of parameters (${b-1}) for class '${l.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);l.aa.na[b-1]=()=>{W(`Cannot construct ${l.name} due to unbound types`,k)};O([],k,m=>{m.splice(1,0,null);\nl.aa.na[b-1]=tb(n,m,null,e,g);return[]});return[]})},b:function(a,b,c,d,e,g,k,l,n){a>>>=0;b>>>=0;e>>>=0;g>>>=0;k>>>=0;var m=ub(c,d>>>0);b=G(b);b=vb(b);g=U(e,g);O([],[a],function(p){function t(){W(`Cannot call ${u} due to unbound types`,m)}p=p[0];var u=`${p.name}.${b}`;b.startsWith(\"@@\")&&(b=Symbol[b.substring(2)]);l&&p.aa.Qa.push(b);var f=p.aa.la,q=f[b];void 0===q||void 0===q.ea&&q.className!==p.name&&q.qa===c-2?(t.qa=c-2,t.className=p.name,f[b]=t):(Ya(f,b,u),f[b].ea[c-2]=t);O([],m,function(v){v=\ntb(u,v,p,g,k,n);void 0===f[b].ea?(v.qa=c-2,f[b]=v):f[b].ea[c-2]=v;return[]});return[]})},s:function(a,b,c,d,e,g,k,l,n,m){a>>>=0;b>>>=0;c>>>=0;e>>>=0;g>>>=0;k>>>=0;l>>>=0;n>>>=0;m>>>=0;b=G(b);e=U(d>>>0,e);O([],[a],function(p){p=p[0];var t=`${p.name}.${b}`,u={get(){W(`Cannot access ${t} due to unbound types`,[c,k])},enumerable:!0,configurable:!0};u.set=n?()=>W(`Cannot access ${t} due to unbound types`,[c,k]):()=>{throw new L(t+\" is a read-only property\");};Object.defineProperty(p.aa.la,b,u);O([],n?\n[c,k]:[c],function(f){var q=f[0],v={get(){var H=wb(this,p,t+\" getter\");return q.fromWireType(e(g,H))},enumerable:!0};if(n){n=U(l,n);var B=f[1];v.set=function(H){var F=wb(this,p,t+\" setter\"),K=[];n(m,F,B.toWireType(K,H));qb(K)}}Object.defineProperty(p.aa.la,b,v);return[]});return[]})},A:function(a,b){b=G(b>>>0);N(a>>>0,{name:b,fromWireType:c=>{var d=Y(c);yb(c);return d},toWireType:(c,d)=>T(d),argPackAdvance:8,readValueFromPointer:zb,ia:null})},u:function(a,b,c,d){function e(){}b=G(b>>>0);e.values=\n{};N(a>>>0,{name:b,constructor:e,fromWireType:function(g){return this.constructor.values[g]},toWireType:(g,k)=>k.value,argPackAdvance:8,readValueFromPointer:Ab(b,c>>>0,d),ia:null});Za(b,e)},p:function(a,b,c){b>>>=0;var d=Cb(a>>>0,\"enum\");b=G(b);a=d.constructor;d=Object.create(d.constructor.prototype,{value:{value:c},constructor:{value:S(`${d.name}_${b}`,function(){})}});a.values[c]=d;a[b]=d},v:function(a,b,c){b=G(b>>>0);N(a>>>0,{name:b,fromWireType:d=>d,toWireType:(d,e)=>e,argPackAdvance:8,readValueFromPointer:Db(b,\nc>>>0),ia:null})},o:function(a,b,c,d,e,g,k){a>>>=0;d>>>=0;e>>>=0;g>>>=0;var l=ub(b,c>>>0);a=G(a);a=vb(a);e=U(d,e);Za(a,function(){W(`Cannot call ${a} due to unbound types`,l)},b-1);O([],l,function(n){n=[n[0],null].concat(n.slice(1));ib(a,tb(a,n,null,e,g,k),b-1);return[]})},q:function(a,b,c,d,e){a>>>=0;c>>>=0;b=G(b>>>0);-1===e&&(e=4294967295);e=l=>l;if(0===d){var g=32-8*c;e=l=>l<<g>>>g}var k=b.includes(\"unsigned\")?function(l,n){return n>>>0}:function(l,n){return n};N(a,{name:b,fromWireType:e,toWireType:k,\nargPackAdvance:8,readValueFromPointer:Eb(b,c,0!==d),ia:null})},k:function(a,b,c){function d(g){return new e(r.buffer,A[g+4>>>2>>>0],A[g>>>2>>>0])}var e=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][b];c=G(c>>>0);N(a>>>0,{name:c,fromWireType:d,argPackAdvance:8,readValueFromPointer:d},{Na:!0})},w:function(a,b){b=G(b>>>0);var c=\"std::string\"===b;N(a>>>0,{name:b,fromWireType:function(d){var e=A[d>>>2>>>0],g=d+4;if(c)for(var k=g,l=0;l<=e;++l){var n=g+l;\nif(l==e||0==w[n>>>0]){k=Ib(k,n-k);if(void 0===m)var m=k;else m+=String.fromCharCode(0),m+=k;k=n+1}}else{m=Array(e);for(l=0;l<e;++l)m[l]=String.fromCharCode(w[g+l>>>0]);m=m.join(\"\")}V(d);return m},toWireType:function(d,e){e instanceof ArrayBuffer&&(e=new Uint8Array(e));var g=\"string\"==typeof e;if(!(g||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Int8Array))throw new L(\"Cannot pass non-string to std::string\");var k=c&&g?Gb(e):e.length;var l=hc(4+k+1),n=l+4;A[l>>>2>>>0]=k;if(c&&\ng)Fb(e,w,n,k+1);else if(g)for(g=0;g<k;++g){var m=e.charCodeAt(g);if(255<m)throw V(n),new L(\"String has UTF-16 code units that do not fit in 8 bits\");w[n+g>>>0]=m}else for(g=0;g<k;++g)w[n+g>>>0]=e[g];null!==d&&d.push(V,l);return l},argPackAdvance:8,readValueFromPointer:gb,ia(d){V(d)}})},t:function(a,b,c){b>>>=0;c>>>=0;c=G(c);if(2===b){var d=Kb;var e=Lb;var g=Mb;var k=()=>y;var l=1}else 4===b&&(d=Nb,e=Ob,g=Pb,k=()=>A,l=2);N(a>>>0,{name:c,fromWireType:n=>{for(var m=A[n>>>2>>>0],p=k(),t,u=n+4,f=0;f<=\nm;++f){var q=n+4+f*b;if(f==m||0==p[q>>>l])u=d(u,q-u),void 0===t?t=u:(t+=String.fromCharCode(0),t+=u),u=q+b}V(n);return t},toWireType:(n,m)=>{if(\"string\"!=typeof m)throw new L(`Cannot pass non-string to C++ string type ${c}`);var p=g(m),t=hc(4+p+b);A[t>>>2]=p>>l;e(m,t+4,p+b);null!==n&&n.push(V,t);return t},argPackAdvance:8,readValueFromPointer:zb,ia(n){V(n)}})},J:function(a,b){b=G(b>>>0);N(a>>>0,{Oa:!0,name:b,argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}})},h:function(a,b,c){b>>>=0;c>>>=0;\na=Y(a>>>0);b=Cb(b,\"emval::as\");return Qb(b,c,a)},n:function(a,b,c,d,e){c>>>=0;d>>>=0;e>>>=0;a=Tb[a>>>0];b=Y(b>>>0);c=Sb(c);return a(b,b[c],d,e)},c:yb,m:function(a,b,c){b=Vb(a,b>>>0);var d=b.shift();a--;var e=\"return function (obj, func, destructorsRef, args) {\\n\",g=0,k=[];0===c&&k.push(\"obj\");for(var l=[\"retType\"],n=[d],m=0;m<a;++m)k.push(\"arg\"+m),l.push(\"argType\"+m),n.push(b[m]),e+=`  var arg${m} = argType${m}.readValueFromPointer(args${g?\"+\"+g:\"\"});\\n`,g+=b[m].argPackAdvance;e+=`  var rv = ${1===\nc?\"new func\":\"func.call\"}(${k.join(\", \")});\\n`;for(m=0;m<a;++m)b[m].deleteObject&&(e+=`  argType${m}.deleteObject(arg${m});\\n`);d.Oa||(l.push(\"emval_returnValue\"),n.push(Qb),e+=\"  return emval_returnValue(retType, destructorsRef, rv);\\n\");l.push(e+\"};\\n\");a=sb(l).apply(null,n);c=`methodCaller<(${b.map(p=>p.name).join(\", \")}) => ${d.name}>`;return Ub(S(c,a))},i:function(a,b){b>>>=0;a=Y(a>>>0);b=Y(b);return T(a[b])},j:function(a){a>>>=0;4<a&&(X.get(a).Ha+=1)},C:function(){return T([])},l:function(a){return T(Sb(a>>>\n0))},d:function(a){a>>>=0;var b=Y(a);qb(b);yb(a)},g:function(a,b){b>>>=0;a=Cb(a>>>0,\"_emval_take_value\");a=a.readValueFromPointer(b);return T(a)},y:()=>{na(\"\")},z:function(a,b,c){b>>>=0;return w.copyWithin(a>>>0>>>0,b>>>0,b+(c>>>0)>>>0)},I:function(a){a>>>=0;var b=w.length;if(4294901760<a)return!1;for(var c=1;4>=c;c*=2){var d=b*(1+.2/c);d=Math.min(d,a+100663296);var e=Math;d=Math.max(a,d);a:{e=(e.min.call(e,4294901760,d+(65536-d%65536)%65536)-oa.buffer.byteLength+65535)/65536;try{oa.grow(e);sa();\nvar g=1;break a}catch(k){}g=void 0}if(g)return!0}return!1},G:function(a,b){a>>>=0;b>>>=0;var c=0;Yb().forEach((d,e)=>{var g=b+c;e=A[a+4*e>>>2>>>0]=g;for(g=0;g<d.length;++g)r[e++>>>0>>>0]=d.charCodeAt(g);r[e>>>0>>>0]=0;c+=d.length+1});return 0},H:function(a,b){a>>>=0;b>>>=0;var c=Yb();A[a>>>2>>>0]=c.length;var d=0;c.forEach(e=>d+=e.length+1);A[b>>>2>>>0]=d;return 0},E:function(a,b){a>>>=0;$b(w.subarray(a>>>0,a+(b>>>0)>>>0));return 0},F:function(a,b,c,d){return ec(a>>>0,b>>>0,c>>>0,d>>>0)}},Z=function(){function a(c){Z=\nc.exports;Z=jc();oa=Z.K;sa();kb=Z.P;ua.unshift(Z.L);C--;h.monitorRunDependencies?.(C);0==C&&(null!==ya&&(clearInterval(ya),ya=null),D&&(c=D,D=null,c()));return Z}var b={a:ic};C++;h.monitorRunDependencies?.(C);if(h.instantiateWasm)try{return h.instantiateWasm(b,a)}catch(c){la(`Module.instantiateWasm callback failed with error: ${c}`),ba(c)}Da(b,function(c){a(c.instance)}).catch(ba);return{}}(),kc=h._main=(a,b)=>(kc=h._main=Z.M)(a,b),ob=a=>(ob=Z.N)(a),hc=a=>(hc=Z.O)(a),V=a=>(V=Z.Q)(a);\nh.dynCall_viij=(a,b,c,d,e)=>(h.dynCall_viij=Z.S)(a,b,c,d,e);h.dynCall_viiij=(a,b,c,d,e,g)=>(h.dynCall_viiij=Z.T)(a,b,c,d,e,g);h.dynCall_iiiij=(a,b,c,d,e,g)=>(h.dynCall_iiiij=Z.U)(a,b,c,d,e,g);h.dynCall_vij=(a,b,c,d)=>(h.dynCall_vij=Z.V)(a,b,c,d);h.dynCall_iij=(a,b,c,d)=>(h.dynCall_iij=Z.W)(a,b,c,d);h.dynCall_iiij=(a,b,c,d,e)=>(h.dynCall_iiij=Z.X)(a,b,c,d,e);h.dynCall_viijii=(a,b,c,d,e,g,k)=>(h.dynCall_viijii=Z.Y)(a,b,c,d,e,g,k);\nh.dynCall_iiiiij=(a,b,c,d,e,g,k)=>(h.dynCall_iiiiij=Z.Z)(a,b,c,d,e,g,k);h.dynCall_iiiiijj=(a,b,c,d,e,g,k,l,n)=>(h.dynCall_iiiiijj=Z._)(a,b,c,d,e,g,k,l,n);h.dynCall_iiiiiijj=(a,b,c,d,e,g,k,l,n,m)=>(h.dynCall_iiiiiijj=Z.$)(a,b,c,d,e,g,k,l,n,m);function jc(){var a=Z;a=Object.assign({},a);var b=d=>e=>d(e)>>>0,c=d=>()=>d()>>>0;a.N=b(a.N);a.__errno_location=c(a.__errno_location);a.O=b(a.O);a.stackSave=c(a.stackSave);a.stackAlloc=b(a.stackAlloc);return a}var lc;D=function mc(){lc||nc();lc||(D=mc)};\nfunction nc(){function a(){if(!lc&&(lc=!0,h.calledRun=!0,!pa)){Fa(ua);Fa(va);aa(h);if(h.onRuntimeInitialized)h.onRuntimeInitialized();if(oc){var b=kc;try{var c=b(0,0);Ga||(h.onExit?.(c),pa=!0);ea(c,new Ea(c))}catch(d){d instanceof Ea||\"unwind\"==d||ea(1,d)}}if(h.postRun)for(\"function\"==typeof h.postRun&&(h.postRun=[h.postRun]);h.postRun.length;)b=h.postRun.shift(),wa.unshift(b);Fa(wa)}}if(!(0<C)){if(h.preRun)for(\"function\"==typeof h.preRun&&(h.preRun=[h.preRun]);h.preRun.length;)xa();Fa(ta);0<C||(h.setStatus?\n(h.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){h.setStatus(\"\")},1);a()},1)):a())}}if(h.preInit)for(\"function\"==typeof h.preInit&&(h.preInit=[h.preInit]);0<h.preInit.length;)h.preInit.pop()();var oc=!0;h.noInitialRun&&(oc=!1);nc();\n\n\n  return moduleArg.ready\n}\n);\n})();\n;\nif (typeof exports === 'object' && typeof module === 'object')\n  module.exports = Module;\nelse if (typeof define === 'function' && define['amd'])\n  define([], () => Module);\n","import {\n  BatchEncoderConstructorOptions,\n  BatchEncoderDependencies\n} from './batch-encoder'\nimport {\n  CipherTextConstructorOptions,\n  CipherTextDependencies\n} from './cipher-text'\nimport {\n  CKKSEncoderConstructorOptions,\n  CKKSEncoderDependencies\n} from './ckks-encoder'\nimport { CoeffModulus, CoeffModulusDependencies } from './coeff-modulus'\nimport { ComprModeType, ComprModeTypeDependencies } from './compr-mode-type'\nimport {\n  ContextDataConstructorOptions,\n  ContextDataDependencies\n} from './context-data'\nimport { ContextConstructorOptions, ContextDependencies } from './context'\nimport { DecryptorConstructorOptions, DecryptorDependencies } from './decryptor'\nimport {\n  EncryptionParameterQualifiersConstructorOptions,\n  EncryptionParameterQualifiersDependencies\n} from './encryption-parameter-qualifiers'\nimport {\n  EncryptionParametersConstructorOptions,\n  EncryptionParametersDependencies\n} from './encryption-parameters'\nimport { EncryptorConstructorOptions, EncryptorDependencies } from './encryptor'\nimport { EvaluatorConstructorOptions, EvaluatorDependencies } from './evaluator'\nimport { Exception, ExceptionDependencies } from './exception'\nimport {\n  GaloisKeysConstructorOptions,\n  GaloisKeysDependencies\n} from './galois-keys'\nimport {\n  MemoryPoolHandle,\n  MemoryPoolHandleDependencies\n} from './memory-pool-handle'\nimport { ModulusConstructorOptions, ModulusDependencies } from './modulus'\nimport {\n  ParmsIdTypeConstructorOptions,\n  ParmsIdTypeDependencies\n} from './parms-id-type'\nimport {\n  PlainTextConstructorOptions,\n  PlainTextDependencies\n} from './plain-text'\nimport { PlainModulus, PlainModulusDependencies } from './plain-modulus'\nimport {\n  PublicKeyConstructorOptions,\n  PublicKeyDependencies\n} from './public-key'\nimport {\n  RelinKeysConstructorOptions,\n  RelinKeysDependencies\n} from './relin-keys'\nimport { SchemeType, SchemeTypeDependencies } from './scheme-type'\nimport {\n  SecretKeyConstructorOptions,\n  SecretKeyDependencies\n} from './secret-key'\nimport { SecurityLevel, SecurityLevelDependencies } from './security-level'\nimport {\n  SerializableConstructorOptions,\n  SerializableDependencies\n} from './serializable'\nimport { VectorConstructorOptions, VectorDependencies } from './vector'\nimport {\n  KeyGeneratorConstructorOptions,\n  KeyGeneratorDependencies\n} from './key-generator'\nimport { version } from '../../package.json'\n\nexport type Instance = any\nexport type Loader = any\nexport type Library = any\nexport type Dependencies = any\nexport type LoaderOptions = {\n  readonly loader: Loader\n}\n\nexport type SEALLibrary = {\n  readonly BatchEncoder: BatchEncoderConstructorOptions\n  readonly CipherText: CipherTextConstructorOptions\n  readonly CKKSEncoder: CKKSEncoderConstructorOptions\n  readonly CoeffModulus: CoeffModulus\n  readonly ComprModeType: ComprModeType\n  readonly ContextData: ContextDataConstructorOptions\n  readonly Context: ContextConstructorOptions\n  readonly Decryptor: DecryptorConstructorOptions\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersConstructorOptions\n  readonly EncryptionParameters: EncryptionParametersConstructorOptions\n  readonly Encryptor: EncryptorConstructorOptions\n  readonly Evaluator: EvaluatorConstructorOptions\n  readonly Exception: Exception\n  readonly GaloisKeys: GaloisKeysConstructorOptions\n  readonly KeyGenerator: KeyGeneratorConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Modulus: ModulusConstructorOptions\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly PlainText: PlainTextConstructorOptions\n  readonly PlainModulus: PlainModulus\n  readonly PublicKey: PublicKeyConstructorOptions\n  readonly RelinKeys: RelinKeysConstructorOptions\n  readonly SchemeType: SchemeType\n  readonly SecretKey: SecretKeyConstructorOptions\n  readonly SecurityLevel: SecurityLevel\n  readonly Serializable: SerializableConstructorOptions\n  readonly Vector: VectorConstructorOptions\n  readonly Version: string\n}\ntype SEALConstructorOptions = {\n  readonly BatchEncoder: BatchEncoderDependencies\n  readonly CipherText: CipherTextDependencies\n  readonly CKKSEncoder: CKKSEncoderDependencies\n  readonly CoeffModulus: CoeffModulusDependencies\n  readonly ComprModeType: ComprModeTypeDependencies\n  readonly ContextData: ContextDataDependencies\n  readonly Context: ContextDependencies\n  readonly Decryptor: DecryptorDependencies\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersDependencies\n  readonly EncryptionParameters: EncryptionParametersDependencies\n  readonly Encryptor: EncryptorDependencies\n  readonly Evaluator: EvaluatorDependencies\n  readonly Exception: ExceptionDependencies\n  readonly GaloisKeys: GaloisKeysDependencies\n  readonly KeyGenerator: KeyGeneratorDependencies\n  readonly MemoryPoolHandle: MemoryPoolHandleDependencies\n  readonly Modulus: ModulusDependencies\n  readonly ParmsIdType: ParmsIdTypeDependencies\n  readonly PlainText: PlainTextDependencies\n  readonly PlainModulus: PlainModulusDependencies\n  readonly PublicKey: PublicKeyDependencies\n  readonly RelinKeys: RelinKeysDependencies\n  readonly SchemeType: SchemeTypeDependencies\n  readonly SecretKey: SecretKeyDependencies\n  readonly SecurityLevel: SecurityLevelDependencies\n  readonly Serializable: SerializableDependencies\n  readonly Vector: VectorDependencies\n}\n\n/**\n * @implements SEAL\n */\nexport const SEALConstructor = ({\n  BatchEncoder,\n  CipherText,\n  CKKSEncoder,\n  CoeffModulus,\n  ComprModeType,\n  ContextData,\n  Context,\n  Decryptor,\n  EncryptionParameterQualifiers,\n  EncryptionParameters,\n  Encryptor,\n  Evaluator,\n  Exception,\n  GaloisKeys,\n  KeyGenerator,\n  MemoryPoolHandle,\n  Modulus,\n  ParmsIdType,\n  PlainText,\n  PlainModulus,\n  PublicKey,\n  RelinKeys,\n  SchemeType,\n  SecretKey,\n  SecurityLevel,\n  Serializable,\n  Vector\n}: SEALConstructorOptions): SEALLibrary => {\n  // Unfortunately, this library has nested depenencies\n  // so we need to load them in order.\n\n  // Define our singletons\n  const exception = Exception()()\n  const comprModeType = ComprModeType()()\n  const memoryPoolHandle = MemoryPoolHandle()()\n  const securityLevel = SecurityLevel()()\n  const schemeType = SchemeType()()\n\n  // Define our constructors (ORDER MATTERS)\n  const vector = Vector({ Exception: exception })\n  const coeffModulus = CoeffModulus({\n    Exception: exception,\n    SecurityLevel: securityLevel,\n    Vector: vector\n  })()\n  const modulus = Modulus({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const plainModulus = PlainModulus({\n    Exception: exception,\n    Modulus: modulus,\n    Vector: vector\n  })()\n  const serializable = Serializable({\n    Exception: exception,\n    Vector: vector,\n    ComprModeType: comprModeType\n  })\n  const parmsIdType = ParmsIdType({ Exception: exception })\n  const plainText = PlainText({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    ParmsIdType: parmsIdType,\n    MemoryPoolHandle: memoryPoolHandle,\n    Vector: vector\n  })\n  const cipherText = CipherText({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    ParmsIdType: parmsIdType,\n    MemoryPoolHandle: memoryPoolHandle,\n    Vector: vector\n  })\n  const batchEncoder = BatchEncoder({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    PlainText: plainText,\n    Vector: vector\n  })\n  const ckksEncoder = CKKSEncoder({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    PlainText: plainText,\n    Vector: vector\n  })\n  const encryptionParameterQualifiers = EncryptionParameterQualifiers()\n  const encryptionParameters = EncryptionParameters({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Modulus: modulus,\n    SchemeType: schemeType,\n    ParmsIdType: parmsIdType,\n    Vector: vector\n  })\n  const contextData = ContextData({\n    Exception: exception,\n    EncryptionParameters: encryptionParameters,\n    ParmsIdType: parmsIdType,\n    EncryptionParameterQualifiers: encryptionParameterQualifiers\n  })\n  const context = Context({\n    ParmsIdType: parmsIdType,\n    ContextData: contextData,\n    SecurityLevel: securityLevel\n  })\n  const decryptor = Decryptor({\n    Exception: exception,\n    PlainText: plainText\n  })\n  const encryptor = Encryptor({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    CipherText: cipherText,\n    Serializable: serializable\n  })\n  const evaluator = Evaluator({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    CipherText: cipherText,\n    PlainText: plainText\n  })\n  const publicKey = PublicKey({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const secretKey = SecretKey({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const relinKeys = RelinKeys({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const galoisKeys = GaloisKeys({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const keyGenerator = KeyGenerator({\n    Exception: exception,\n    PublicKey: publicKey,\n    SecretKey: secretKey,\n    RelinKeys: relinKeys,\n    GaloisKeys: galoisKeys,\n    Serializable: serializable\n  })\n\n  /**\n   * @interface SEAL\n   */\n  return {\n    BatchEncoder: batchEncoder,\n    CipherText: cipherText,\n    CKKSEncoder: ckksEncoder,\n    CoeffModulus: coeffModulus, // Singleton\n    ComprModeType: comprModeType, // Singleton\n    ContextData: contextData,\n    Context: context,\n    Decryptor: decryptor,\n    EncryptionParameterQualifiers: encryptionParameterQualifiers,\n    EncryptionParameters: encryptionParameters,\n    Encryptor: encryptor,\n    Evaluator: evaluator,\n    Exception: exception, // Singleton\n    GaloisKeys: galoisKeys,\n    KeyGenerator: keyGenerator,\n    MemoryPoolHandle: memoryPoolHandle, // Singleton\n    Modulus: modulus,\n    ParmsIdType: parmsIdType,\n    PlainText: plainText,\n    PlainModulus: plainModulus, // Singleton\n    PublicKey: publicKey,\n    RelinKeys: relinKeys,\n    SchemeType: schemeType,\n    SecretKey: secretKey,\n    SecurityLevel: securityLevel, // Singleton\n    Serializable: serializable,\n    Vector: vector,\n    Version: version\n  }\n}\n","export const INSTANCE_DELETED = 'Instance was deleted'\nexport const UNSUPPORTED_VECTOR_TYPE = 'Unsupported vector type'\nexport const UNSUPPORTED_BITSIZES_TYPE =\n  'Unsupported argument type! `bitSizes` must be an Int32Array'\nexport const UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE =\n  'Unsupported array type! `array` must be of type Int32Array, Uint32Array, BigInt64Array, or BigUint64Array.'\nexport const UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE =\n  'Unsupported array type! `array` must be of type Float64Array.'\nexport const INVALID_PLAIN_CONSRUCTOR_OPTIONS =\n  'Must specify a (coeffCount), (coeffCount, capacity)'\nexport const INVALID_CIPHER_CONSTRUCTOR_OPTIONS =\n  'Must specify a (context), (context, parmsId), or (context, parmsId, sizeCapacity)'\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { Context } from './context'\nimport { UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE } from './constants'\n\nexport type BatchEncoderDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly PlainText: PlainTextConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type BatchEncoderDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: BatchEncoderDependencyOptions): BatchEncoderConstructorOptions\n}\n\nexport type BatchEncoderConstructorOptions = {\n  (context: Context): BatchEncoder\n}\n\nexport type BatchEncoderTypes =\n  | Int32Array\n  | Uint32Array\n  | BigInt64Array\n  | BigUint64Array\n\nexport type BatchEncoder = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encode: (\n    array: BatchEncoderTypes,\n    plainText?: PlainText\n  ) => PlainText | void\n  readonly decode: (\n    plainText: PlainText,\n    signed?: boolean,\n    pool?: MemoryPoolHandle\n  ) => Int32Array | Uint32Array\n  readonly decodeBigInt: (\n    plainText: PlainText,\n    signed?: boolean,\n    pool?: MemoryPoolHandle\n  ) => BigInt64Array | BigUint64Array\n  readonly slotCount: number\n}\n\nconst BatchEncoderConstructor =\n  (library: Library): BatchEncoderDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: BatchEncoderDependencyOptions): BatchEncoderConstructorOptions =>\n  (context): BatchEncoder => {\n    const Constructor = library.BatchEncoder\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements BatchEncoder\n     */\n\n    /**\n     * @interface BatchEncoder\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name BatchEncoder#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name BatchEncoder#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name BatchEncoder#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Creates a PlainText from a given matrix. This function \"batches\" a given matrix\n       * of either signed or unsigned integers modulo the PlainText modulus into a PlainText element, and stores\n       * the result in the destination parameter. The input array must have size at most equal\n       * to the degree of the polynomial modulus. The first half of the elements represent the\n       * first row of the matrix, and the second half represent the second row. The numbers\n       * in the matrix can be at most equal to the PlainText modulus for it to represent\n       * a valid PlainText.\n       *\n       * If the destination PlainText overlaps the input values in memory, the behavior of\n       * this function is undefined.\n       *\n       * @function\n       * @name BatchEncoder#encode\n       * @param {Int32Array|Uint32Array|BigInt64Array|BigUint64Array} array Data to encode\n       * @param {PlainText} [plainText=null] Destination to store the encoded result\n       * @returns {PlainText|void} A new PlainText holding the encoded data or void if one was provided\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const batchEncoder = seal.BatchEncoder(context)\n       *\n       * const plainText = batchEncoder.encode(Int32Array.from([1, -2, 3]))\n       */\n      encode(\n        array: Int32Array | Uint32Array | BigInt64Array | BigUint64Array,\n        plainText?: PlainText\n      ): PlainText | void {\n        try {\n          if (array.constructor === Int32Array) {\n            if (plainText) {\n              _instance.encode(array, plainText.instance, 'INT32')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(array, plain.instance, 'INT32')\n            return plain\n          }\n\n          if (array.constructor === Uint32Array) {\n            if (plainText) {\n              _instance.encode(array, plainText.instance, 'UINT32')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(array, plain.instance, 'UINT32')\n            return plain\n          }\n\n          if (array.constructor === BigInt64Array) {\n            // When embind supports BigInt64Arrays we can remove this hack\n            const stringArray = array.toString().split(',')\n            if (plainText) {\n              _instance.encode(stringArray, plainText.instance, 'INT64')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(stringArray, plain.instance, 'INT64')\n            return plain\n          }\n\n          if (array.constructor === BigUint64Array) {\n            // When embind supports BigInt64Arrays we can remove this hack\n            const stringArray = array.toString().split(',')\n            if (plainText) {\n              _instance.encode(stringArray, plainText.instance, 'UINT64')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(stringArray, plain.instance, 'UINT64')\n            return plain\n          }\n\n          throw new Error(UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Inverse of encode. This function \"unbatches\" a given PlainText into a matrix\n       * of signed or unsigned integers modulo the PlainText modulus, and stores the result in the destination\n       * parameter. The input PlainText must have degrees less than the polynomial modulus,\n       * and coefficients less than the PlainText modulus, i.e. it must be a valid PlainText\n       * for the encryption parameters. Dynamic memory allocations in the process are\n       * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name BatchEncoder#decode\n       * @param {PlainText} plainText Data to decode\n       * @param {boolean} [signed=true] By default, decode as an Int32Array. If false, decode as an Uint32Array\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n       * @returns {Int32Array|Uint32Array} TypedArray containing the decoded data\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const batchEncoder = seal.BatchEncoder(context)\n       *\n       * const plainText = batchEncoder.encode(Int32Array.from([1, -2, 3]))\n       * const plainTextU = batchEncoder.encode(Uint32Array.from([1, 2, 3]))\n       *\n       * const result = batchEncoder.decode(plainText)\n       * const resultU = batchEncoder.decode(plainTextU, false) // To decode as an Uint32Array\n       */\n      decode(\n        plainText: PlainText,\n        signed = true,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Int32Array | Uint32Array {\n        try {\n          if (signed) {\n            const tempVect = Vector()\n            const instance = _instance.decodeInt32(plainText.instance, pool)\n            tempVect.unsafeInject(instance)\n            tempVect.setType('Int32Array')\n            const tempArr = tempVect.toArray() as Int32Array\n            tempVect.delete()\n            return tempArr\n          }\n          const tempVect = Vector()\n          const instance = _instance.decodeUint32(plainText.instance, pool)\n          tempVect.unsafeInject(instance)\n          tempVect.setType('Uint32Array')\n          const tempArr = tempVect.toArray() as Uint32Array\n          tempVect.delete()\n          return tempArr\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Performs the same function as the 32-bit decode, but supports true\n       * 64-bit values encapsulated by a BigInt.\n       *\n       * There's no official support for sending a BigInt64Array/BigUint64Array\n       * from C++ to JS, therefore this function uses string conversion to\n       * marshal data which is noticably slower. Use this function if you\n       * absolutely need to marshal values larger than 32 bits.\n       *\n       * @see {@link BatchEncoder#decode} for more information about decode.\n       * @function\n       * @name BatchEncoder#decodeBigInt\n       * @param {PlainText} plainText Data to decode\n       * @param {boolean} [signed=true] By default, decode as an BigInt64Array. If false, decode as an BigUint64Array\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n       * @returns {BigInt64Array|BigUint64Array} TypedArray containing the decoded data\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const batchEncoder = seal.BatchEncoder(context)\n       *\n       * const plainText = batchEncoder.encode(BigInt64Array.from([1n, -2n, 3n]))\n       * const plainTextU = batchEncoder.encode(BigUint64Array.from([1n, 2n, 3n]))\n       *\n       * const result = batchEncoder.decodeBigInt(plainText)\n       * const resultU = batchEncoder.decodeBigInt(plainTextU, false) // To decode as an BigUint64Array\n       */\n      decodeBigInt(\n        plainText: PlainText,\n        signed = true,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): BigInt64Array | BigUint64Array {\n        try {\n          if (signed) {\n            const instance = _instance.decodeBigInt(\n              plainText.instance,\n              true,\n              pool\n            )\n            return BigInt64Array.from(instance)\n          }\n          const instance = _instance.decodeBigInt(\n            plainText.instance,\n            false,\n            pool\n          )\n          return BigUint64Array.from(instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The total number of batching slots available to hold data\n       *\n       * @readonly\n       * @name BatchEncoder#slotCount\n       * @type {number}\n       */\n      get slotCount() {\n        return _instance.slotCount()\n      }\n    }\n  }\n\nexport const BatchEncoderInit = ({\n  loader\n}: LoaderOptions): BatchEncoderDependencies => {\n  const library: Library = loader.library\n  return BatchEncoderConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\nimport { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { VectorConstructorOptions } from './vector'\nimport { INVALID_CIPHER_CONSTRUCTOR_OPTIONS } from './constants'\nexport type CipherTextDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type CipherTextDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: CipherTextDependencyOptions): CipherTextConstructorOptions\n}\n\nexport type CipherTextConstructorOptions = {\n  ({\n    context,\n    parmsId,\n    sizeCapacity,\n    pool\n  }?: {\n    context?: Context\n    parmsId?: ParmsIdType\n    sizeCapacity?: number\n    pool?: MemoryPoolHandle\n  }): CipherText\n}\n\nexport type CipherText = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly reserve: (context: Context, capacity: number) => void\n  readonly resize: (size: number) => void\n  readonly release: () => void\n  readonly coeffModulusSize: number\n  readonly polyModulusDegree: number\n  readonly size: number\n  readonly sizeCapacity: number\n  readonly isTransparent: boolean\n  readonly isNttForm: boolean\n  readonly parmsId: ParmsIdType\n  readonly scale: number\n  readonly setScale: (scale: number) => void\n  readonly pool: MemoryPoolHandle\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (cipher: CipherText) => void\n  readonly clone: () => CipherText\n  readonly move: (cipher: CipherText) => void\n}\n\nconst CipherTextConstructor =\n  (library: Library): CipherTextDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: CipherTextDependencyOptions): CipherTextConstructorOptions =>\n  ({\n    context,\n    parmsId,\n    sizeCapacity,\n    pool = MemoryPoolHandle.global\n  } = {}): CipherText => {\n    // Static methods\n    const Constructor = library.Ciphertext\n\n    let _instance = construct({\n      context,\n      parmsId,\n      sizeCapacity,\n      pool\n    })\n\n    function construct({\n      context,\n      parmsId,\n      sizeCapacity,\n      pool = MemoryPoolHandle.global\n    }: {\n      context?: Context\n      parmsId?: ParmsIdType\n      sizeCapacity?: number\n      pool?: MemoryPoolHandle\n    }) {\n      try {\n        if (!context && !parmsId && sizeCapacity === undefined) {\n          return new Constructor(pool)\n        } else if (context && !parmsId && sizeCapacity === undefined) {\n          return new Constructor(context.instance, pool)\n        } else if (context && parmsId && sizeCapacity === undefined) {\n          return new Constructor(context.instance, parmsId.instance, pool)\n        } else if (context && parmsId && sizeCapacity !== undefined) {\n          return new Constructor(\n            context.instance,\n            parmsId.instance,\n            sizeCapacity,\n            pool\n          )\n        } else {\n          throw new Error(INVALID_CIPHER_CONSTRUCTOR_OPTIONS)\n        }\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements CipherText\n     */\n\n    /**\n     * @interface CipherText\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name CipherText#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name CipherText#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name CipherText#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Allocates enough memory to accommodate the backing array of a ciphertext\n       * with given capacity. In addition to the capacity, the allocation size is\n       * determined by the current encryption parameters.\n       *\n       * @function\n       * @name CipherText#reserve\n       * @param {Context} context The SEAL Context\n       * @param {number} capacity The capacity to reserve\n       */\n      reserve(context: Context, capacity: number) {\n        try {\n          return _instance.reserve(context.instance, capacity)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Resizes the CipherText to given size, reallocating if the capacity\n       * of the CipherText is too small.\n       *\n       * This function is mainly intended for internal use and is called\n       * automatically by functions such as Evaluator.multiply and\n       * Evaluator.relinearize. A normal user should never have a reason\n       * to manually resize a CipherText.\n       *\n       * @function\n       * @name CipherText#resize\n       * @param {number} size The new size\n       */\n      resize(size: number) {\n        try {\n          return _instance.resize(size)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Resets the CipherText. This function releases any memory allocated\n       * by the CipherText, returning it to the memory pool. It also sets all\n       * encryption parameter specific size information to zero.\n       *\n       * @function\n       * @name CipherText#release\n       */\n      release() {\n        _instance.release()\n      },\n\n      /**\n       * The number of primes in the coefficient modulus of the\n       * associated encryption parameters. This directly affects the\n       * allocation size of the CipherText.\n       *\n       * @readonly\n       * @name CipherText#coeffModulusSize\n       * @type {number}\n       */\n      get coeffModulusSize() {\n        return _instance.coeffModulusSize()\n      },\n\n      /**\n       * The degree of the polynomial modulus of the associated\n       * encryption parameters. This directly affects the allocation size\n       * of the CipherText.\n       *\n       * @readonly\n       * @name CipherText#polyModulusDegree\n       * @type {number}\n       */\n      get polyModulusDegree() {\n        return _instance.polyModulusDegree()\n      },\n\n      /**\n       * The size of the CipherText.\n       *\n       * @readonly\n       * @name CipherText#size\n       * @type {number}\n       */\n      get size() {\n        return _instance.size()\n      },\n\n      /**\n       * The capacity of the allocation. This means the largest size\n       * of the CipherText that can be stored in the current allocation with\n       * the current encryption parameters.\n       *\n       * @readonly\n       * @name CipherText#sizeCapacity\n       * @type {number}\n       */\n      get sizeCapacity() {\n        return _instance.sizeCapacity()\n      },\n\n      /**\n       * Whether the current CipherText is transparent, i.e. does not require\n       * a secret key to decrypt. In typical security models such transparent\n       * CipherTexts would not be considered to be valid. Starting from the second\n       * polynomial in the current CipherText, this function returns true if all\n       * following coefficients are identically zero. Otherwise, returns false.\n       *\n       * @readonly\n       * @name CipherText#isTransparent\n       * @type {boolean}\n       */\n      get isTransparent() {\n        return _instance.isTransparent()\n      },\n\n      /**\n       * Whether the CipherText is in NTT form.\n       *\n       * @readonly\n       * @name CipherText#isNttForm\n       * @type {boolean}\n       */\n      get isNttForm() {\n        return _instance.isNttForm()\n      },\n\n      /**\n       * The reference to parmsId.\n       * @see {@link EncryptionParameters} for more information about parmsId.\n       *\n       * @readonly\n       * @name CipherText#parmsId\n       * @type {ParmsIdType}\n       */\n      get parmsId() {\n        const parms = ParmsIdType()\n        parms.inject(_instance.parmsId())\n        return parms\n      },\n\n      /**\n       * The reference to the scale. This is only needed when using the\n       * CKKS encryption scheme. The user should have little or no reason to ever\n       * change the scale by hand.\n       *\n       * @readonly\n       * @name CipherText#scale\n       * @type {number}\n       */\n      get scale() {\n        return _instance.scale()\n      },\n\n      /**\n       * Sets the CipherText scale. This is only needed when using the\n       * CKKS encryption scheme. The user should have little or no reason to ever\n       * change the scale by hand.\n       *\n       * @function\n       * @name CipherText#setScale\n       * @param {number} scale The scale to set\n       */\n      setScale(scale: number) {\n        _instance.setScale(scale)\n      },\n\n      /**\n       * The currently used MemoryPoolHandle.\n       *\n       * @readonly\n       * @name CipherText#pool\n       * @type {MemoryPoolHandle}\n       */\n      get pool() {\n        return _instance.pool()\n      },\n\n      /**\n       * Save the CipherText to a base64 string\n       *\n       * @function\n       * @name CipherText#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the CipherText as a binary Uint8Array\n       *\n       * @function\n       * @name CipherText#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the CipherText in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a CipherText from a base64 string\n       *\n       * @function\n       * @name CipherText#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a CipherText from an Uint8Array holding binary data\n       *\n       * @function\n       * @name CipherText#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing CipherText and overwrite this instance\n       *\n       * @function\n       * @name CipherText#copy\n       * @param {CipherText} cipher CipherText to copy\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encoding some data ...\n       * const cipherTextB = seal.CipherText()\n       * cipherTextB.copy(cipherTextA)\n       * // cipherTextB holds a copy of cipherTextA\n       */\n      copy(cipher: CipherText) {\n        try {\n          _instance.copy(cipher.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this CipherText\n       *\n       * @function\n       * @name CipherText#clone\n       * @returns {CipherText}\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encoding some data ...\n       * const cipherTextB = cipherTextA.clone()\n       * // cipherTextB holds a copy of cipherTextA\n       */\n      clone(): CipherText {\n        try {\n          const clonedInstance = _instance.clone()\n          const cipher = CipherTextConstructor(library)({\n            Exception,\n            ComprModeType,\n            ParmsIdType,\n            MemoryPoolHandle,\n            Vector\n          })()\n          cipher.unsafeInject(clonedInstance)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a CipherText into this one and delete the old reference\n       *\n       * @function\n       * @name CipherText#move\n       * @param {CipherText} cipher CipherText to move\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encoding some data ...\n       * const cipherTextB = seal.CipherText()\n       * cipherTextB.move(cipherTextA)\n       * // cipherTextB holds a the instance of cipherTextA.\n       * // cipherTextA no longer holds an instance\n       */\n      move(cipher: CipherText) {\n        try {\n          _instance.move(cipher.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          cipher.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const CipherTextInit = ({\n  loader\n}: LoaderOptions): CipherTextDependencies => {\n  const library: Library = loader.library\n  return CipherTextConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { Context } from './context'\nimport { UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE } from './constants'\n\nexport type CKKSEncoderDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly PlainText: PlainTextConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type CKKSEncoderDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: CKKSEncoderDependencyOptions): CKKSEncoderConstructorOptions\n}\n\nexport type CKKSEncoderConstructorOptions = {\n  (context: Context): CKKSEncoder\n}\n\nexport type CKKSEncoderTypes = Float64Array\n\nexport type CKKSEncoder = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encode: (\n    array: CKKSEncoderTypes,\n    scale: number,\n    plainText?: PlainText,\n    pool?: MemoryPoolHandle\n  ) => PlainText | void\n  readonly decode: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => CKKSEncoderTypes\n  readonly slotCount: number\n}\n\nconst CKKSEncoderConstructor =\n  (library: Library): CKKSEncoderDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: CKKSEncoderDependencyOptions): CKKSEncoderConstructorOptions =>\n  (context): CKKSEncoder => {\n    const Constructor = library.CKKSEncoder\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements CKKSEncoder\n     */\n\n    /**\n     * @interface CKKSEncoder\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name CKKSEncoder#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name CKKSEncoder#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name CKKSEncoder#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Encodes a vector of double-precision floating-point real numbers\n       * into a plaintext polynomial. Append zeros if vector size is less than N/2.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name CKKSEncoder#encode\n       * @param {Float64Array} array Data to encode\n       * @param {number} scale Scaling parameter defining encoding precision\n       * @param {PlainText} [plainText] Destination to store the encoded result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {PlainText|void} A new PlainText holding the encoded data or void if one was provided\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const ckksEncoder = seal.CKKSEncoder(context)\n       *\n       * const plainText = ckksEncoder.encode(Float64Array.from([1.11, -2.222, 3.333]), Math.pow(2, 20))\n       */\n      encode(\n        array: Float64Array,\n        scale: number,\n        plainText?: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): PlainText | void {\n        try {\n          if (array.constructor === Float64Array) {\n            if (plainText) {\n              _instance.encode(array, scale, plainText.instance, pool)\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(array, scale, plain.instance, pool)\n            return plain\n          } else {\n            throw new Error(UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE)\n          }\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Decodes a plaintext polynomial into double-precision floating-point\n       * real numbers. Dynamic memory allocations in the process are\n       * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name CKKSEncoder#decode\n       * @param {PlainText} plainText Data to decode\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Float64Array} TypedArray containing the decoded data\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const ckksEncoder = seal.CKKSEncoder(context)\n       *\n       * const plainText = ckksEncoder.encode(Float64Array.from([1, 2, 3]))\n       *\n       * const result = ckksEncoder.decode(plainText)\n       */\n      decode(\n        plainText: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Float64Array {\n        try {\n          const tempVect = Vector()\n          const instance = _instance.decodeDouble(plainText.instance, pool)\n          tempVect.unsafeInject(instance)\n          tempVect.setType('Float64Array')\n          const tempArr = tempVect.toArray() as Float64Array\n          tempVect.delete()\n          return tempArr\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The total number of CKKS slots available to hold data\n       *\n       * @readonly\n       * @name CKKSEncoder#slotCount\n       * @type {number}\n       */\n      get slotCount() {\n        return _instance.slotCount()\n      }\n    }\n  }\n\nexport const CKKSEncoderInit = ({\n  loader\n}: LoaderOptions): CKKSEncoderDependencies => {\n  const library: Library = loader.library\n  return CKKSEncoderConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\nimport { Exception, SealError } from './exception'\nimport { SecurityLevel } from './security-level'\nimport { Vector, VectorConstructorOptions } from './vector'\nimport { UNSUPPORTED_BITSIZES_TYPE } from './constants'\n\nexport type CoeffModulusDependencyOptions = {\n  readonly Exception: Exception\n  readonly SecurityLevel: SecurityLevel\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type CoeffModulusDependencies = {\n  ({\n    Exception,\n    SecurityLevel,\n    Vector\n  }: CoeffModulusDependencyOptions): CoeffModulusConstructorOptions\n}\n\nexport type CoeffModulusConstructorOptions = {\n  (): CoeffModulus\n}\n\nexport type CoeffModulus = {\n  readonly MaxBitCount: (\n    polyModulusDegree: number,\n    securityLevel?: SecurityLevel\n  ) => number\n  readonly BFVDefault: (\n    polyModulusDegree: number,\n    securityLevel?: SecurityLevel\n  ) => Vector\n  readonly Create: (polyModulusDegree: number, bitSizes: Int32Array) => Vector\n}\n\nconst CoeffModulusConstructor =\n  (library: Library): CoeffModulusDependencies =>\n  ({\n    Exception,\n    SecurityLevel,\n    Vector\n  }: CoeffModulusDependencyOptions): CoeffModulusConstructorOptions =>\n  (): CoeffModulus => {\n    // Static methods\n    const _MaxBitCount = library.CoeffModulus.MaxBitCount\n    const _BFVDefault = library.CoeffModulus.BFVDefault\n    const _CreateFromArray = library.CoeffModulus.CreateFromArray\n\n    /**\n     * @implements CoeffModulus\n     */\n\n    /**\n     * @interface CoeffModulus\n     */\n    return {\n      /**\n       * Returns the Maximum Bit Count for the specified polyModulusDegree and securityLevel\n       *\n       * @function\n       * @name CoeffModulus.MaxBitCount\n       * @param {number} polyModulusDegree Degree of the polynomial modulus\n       * @param {SecurityLevel} [securityLevel={@link SecurityLevel.tc128}] Security Level\n       * @returns {number} Maximum bit count\n       */\n      MaxBitCount(\n        polyModulusDegree: number,\n        securityLevel: SecurityLevel = SecurityLevel.tc128\n      ): number {\n        return _MaxBitCount(polyModulusDegree, securityLevel)\n      },\n\n      /**\n       * Returns a default vector of primes for the BFV CoeffModulus parameter\n       *\n       * @function\n       * @name CoeffModulus.BFVDefault\n       * @param {number} polyModulusDegree Degree of the polynomial modulus\n       * @param {SecurityLevel} [securityLevel={@link SecurityLevel.tc128}] Security Level\n       * @returns {Vector} Vector containing Modulus primes\n       */\n      BFVDefault(\n        polyModulusDegree: number,\n        securityLevel: SecurityLevel = SecurityLevel.tc128\n      ): Vector {\n        try {\n          const vectorModulus = Vector()\n          const instance = _BFVDefault(polyModulusDegree, securityLevel)\n          vectorModulus.unsafeInject(instance)\n          vectorModulus.setType('Modulus')\n          return vectorModulus\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Creates a vector of primes for a given polyModulusDegree and bitSizes\n       *\n       * @function\n       * @name CoeffModulus.Create\n       * @param {number} polyModulusDegree Degree of the polynomial modulus\n       * @param {Int32Array} bitSizes Int32Array containing values representing\n       * bit-sizes of primes\n       * @returns {Vector} Vector containing Modulus primes\n       */\n      Create(polyModulusDegree: number, bitSizes: Int32Array): Vector {\n        try {\n          if (bitSizes.constructor !== Int32Array) {\n            throw new Error(UNSUPPORTED_BITSIZES_TYPE)\n          }\n          const vectorModulus = Vector()\n          const instance = _CreateFromArray(polyModulusDegree, bitSizes)\n          vectorModulus.unsafeInject(instance)\n          vectorModulus.setType('Modulus')\n          return vectorModulus\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const CoeffModulusInit = ({\n  loader\n}: LoaderOptions): CoeffModulusDependencies => {\n  const library: Library = loader.library\n  return CoeffModulusConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type ComprModeTypeDependencies = {\n  (): ComprModeTypeConstructorOptions\n}\n\nexport type ComprModeTypeConstructorOptions = {\n  (): ComprModeType\n}\n\nexport type ComprModeType = {\n  readonly none: any\n  readonly zlib: any\n  readonly zstd: any\n}\n\nconst ComprModeTypeConstructor =\n  (library: Library): ComprModeTypeDependencies =>\n  (): ComprModeTypeConstructorOptions =>\n  (): ComprModeType => {\n    // Static methods\n    const _none = library.ComprModeType.none\n    const _zlib = library.ComprModeType.zlib\n    const _zstd = library.ComprModeType.zstd\n\n    /**\n     * @implements ComprModeType\n     */\n\n    /**\n     * @interface ComprModeType\n     */\n    return {\n      /**\n       * The `none` Compression Mode Type\n       *\n       * @readonly\n       * @name ComprModeType.none\n       * @type {ComprModeType.none}\n       */\n      get none() {\n        /**\n         * @typedef {ComprModeType.none} ComprModeType.none\n         */\n        return _none\n      },\n\n      /**\n       * The `zlib` Compression Mode Type\n       *\n       * @readonly\n       * @name ComprModeType.zlib\n       * @type {ComprModeType.zlib}\n       */\n      get zlib() {\n        /**\n         * @typedef {ComprModeType.zlib} ComprModeType.zlib\n         */\n        return _zlib\n      },\n\n      /**\n       * The `zstd` Compression Mode Type\n       *\n       * @readonly\n       * @name ComprModeType.zstd\n       * @type {ComprModeType.zstd}\n       */\n      get zstd() {\n        /**\n         * @typedef {ComprModeType.zstd} ComprModeType.zstd\n         */\n        return _zstd\n      }\n    }\n  }\n\nexport const ComprModeTypeInit = ({\n  loader\n}: LoaderOptions): ComprModeTypeDependencies => {\n  const library: Library = loader.library\n  return ComprModeTypeConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception } from './exception'\nimport {\n  EncryptionParameters,\n  EncryptionParametersConstructorOptions\n} from './encryption-parameters'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport {\n  EncryptionParameterQualifiers,\n  EncryptionParameterQualifiersConstructorOptions\n} from './encryption-parameter-qualifiers'\n\nexport type ContextDataDependencyOptions = {\n  readonly Exception: Exception\n  readonly EncryptionParameters: EncryptionParametersConstructorOptions\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersConstructorOptions\n}\n\nexport type ContextDataDependencies = {\n  ({\n    Exception,\n    EncryptionParameters,\n    ParmsIdType,\n    EncryptionParameterQualifiers\n  }: ContextDataDependencyOptions): ContextDataConstructorOptions\n}\n\nexport type ContextDataConstructorOptions = {\n  (): ContextData\n}\n\nexport type ContextData = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly parms: EncryptionParameters\n  readonly parmsId: ParmsIdType\n  readonly qualifiers: EncryptionParameterQualifiers\n  readonly totalCoeffModulusBitCount: number\n  readonly prevContextData: ContextData\n  readonly nextContextData: ContextData\n  readonly chainIndex: number\n}\n\nconst ContextDataConstructor =\n  (library: Library): ContextDataDependencies =>\n  ({\n    Exception,\n    EncryptionParameters,\n    ParmsIdType,\n    EncryptionParameterQualifiers\n  }: ContextDataDependencyOptions): ContextDataConstructorOptions =>\n  (): ContextData => {\n    let _instance: Instance\n    /**\n     * @implements ContextData\n     */\n\n    /**\n     * @interface ContextData\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name ContextData#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name ContextData#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name ContextData#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Returns a const reference to the underlying encryption parameters.\n       *\n       * @readonly\n       * @name ContextData#parms\n       * @type {EncryptionParameters}\n       */\n      get parms() {\n        const instance = _instance.parms()\n        const encryptionParameters = EncryptionParameters()\n        encryptionParameters.unsafeInject(instance)\n        return encryptionParameters\n      },\n\n      /**\n       * Returns the parmsId of the current parameters.\n       *\n       * @readonly\n       * @name ContextData#parmsId\n       * @type {ParmsIdType}\n       */\n      get parmsId() {\n        const parms = ParmsIdType()\n        parms.inject(_instance.parmsId())\n        return parms\n      },\n\n      /**\n       * Returns a copy of EncryptionParameterQualifiers corresponding to the\n       * current encryption parameters. Note that to change the qualifiers it is\n       * necessary to create a new instance of SEALContext once appropriate changes\n       * to the encryption parameters have been made.\n       *\n       * @readonly\n       * @name ContextData#qualifiers\n       * @type {EncryptionParameterQualifiers}\n       */\n      get qualifiers() {\n        const encParmQualifiers = EncryptionParameterQualifiers()\n        encParmQualifiers.unsafeInject(_instance.qualifiers())\n        return encParmQualifiers\n      },\n\n      /**\n       * Returns the significant bit count of the total coefficient modulus.\n       *\n       * @readonly\n       * @name ContextData#totalCoeffModulusBitCount\n       * @type {number}\n       */\n      get totalCoeffModulusBitCount() {\n        return _instance.totalCoeffModulusBitCount()\n      },\n\n      /**\n       * Returns a shared_ptr to the context data corresponding to the previous parameters\n       * in the modulus switching chain. If the current data is the first one in the\n       * chain, then the result is nullptr.\n       *\n       * @readonly\n       * @name ContextData#prevContextData\n       * @type {ContextData}\n       */\n      get prevContextData() {\n        const cxtData = ContextDataConstructor(library)({\n          Exception,\n          EncryptionParameters,\n          ParmsIdType,\n          EncryptionParameterQualifiers\n        })()\n        cxtData.unsafeInject(_instance.prevContextData())\n        return cxtData\n      },\n\n      /**\n       * Returns a shared_ptr to the context data corresponding to the next parameters\n       * in the modulus switching chain. If the current data is the last one in the\n       * chain, then the result is nullptr.\n       *\n       * @readonly\n       * @name ContextData#nextContextData\n       * @type {ContextData}\n       */\n      get nextContextData() {\n        const cxtData = ContextDataConstructor(library)({\n          Exception,\n          EncryptionParameters,\n          ParmsIdType,\n          EncryptionParameterQualifiers\n        })()\n        cxtData.unsafeInject(_instance.nextContextData())\n        return cxtData\n      },\n\n      /**\n       * Returns the index of the parameter set in a chain. The initial parameters\n       * have index 0 and the index increases sequentially in the parameter chain.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#chainIndex\n       * @type {number}\n       */\n      get chainIndex() {\n        return _instance.chainIndex()\n      }\n    }\n  }\n\nexport const ContextDataInit = ({\n  loader\n}: LoaderOptions): ContextDataDependencies => {\n  const library: Library = loader.library\n  return ContextDataConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { ContextData, ContextDataConstructorOptions } from './context-data'\nimport { EncryptionParameters } from './encryption-parameters'\nimport { SecurityLevel } from './security-level'\n\nexport type ContextDependencyOptions = {\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly ContextData: ContextDataConstructorOptions\n  readonly SecurityLevel: SecurityLevel\n}\n\nexport type ContextDependencies = {\n  ({\n    ParmsIdType,\n    ContextData,\n    SecurityLevel\n  }: ContextDependencyOptions): ContextConstructorOptions\n}\n\nexport type ContextConstructorOptions = {\n  (\n    encryptionParams: EncryptionParameters,\n    expandModChain?: boolean,\n    securityLevel?: SecurityLevel\n  ): Context\n}\n\nexport type Context = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly toHuman: () => string\n  readonly getContextData: (parmsId: ParmsIdType) => ContextData\n  readonly keyContextData: ContextData\n  readonly firstContextData: ContextData\n  readonly lastContextData: ContextData\n  readonly parametersSet: () => boolean\n  readonly keyParmsId: ParmsIdType\n  readonly firstParmsId: ParmsIdType\n  readonly lastParmsId: ParmsIdType\n  readonly usingKeyswitching: boolean\n}\n\nconst ContextConstructor =\n  (library: Library): ContextDependencies =>\n  ({\n    ParmsIdType,\n    ContextData,\n    SecurityLevel\n  }: ContextDependencyOptions): ContextConstructorOptions =>\n  (\n    encryptionParams,\n    expandModChain = true,\n    securityLevel = SecurityLevel.tc128\n  ): Context => {\n    // Static methods\n    const Constructor = library.SEALContext\n\n    let _instance = new Constructor(\n      encryptionParams.instance,\n      expandModChain,\n      securityLevel\n    ) as Instance\n\n    /**\n     * @implements Context\n     */\n\n    /**\n     * @interface Context\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Context#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Context#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Context#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Returns the context parameters in a human readable string format.\n       *\n       * @private\n       * @function\n       * @name Context#toString\n       * @returns {string} Context details as a string\n       */\n      toHuman(): string {\n        return _instance.toHuman()\n      },\n\n      /**\n       * Returns the ContextData corresponding to encryption parameters with a given\n       * parmsId. If parameters with the given parmsId are not found then the\n       * function returns nullptr.\n       *\n       * @function\n       * @name Context#getContextData\n       * @param {ParmsIdType} parmsId Specific id to return ContextData for\n       * @returns {ContextData} ContextData corresponding to encryption parameters\n       */\n      getContextData(parmsId: ParmsIdType): ContextData {\n        const instance = _instance.getContextData(parmsId.instance)\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * The ContextData corresponding to encryption parameters that are used for keys.\n       *\n       * @readonly\n       * @name Context#keyContextData\n       * @type {ContextData}\n       */\n      get keyContextData() {\n        const instance = _instance.keyContextData()\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * The ContextData corresponding to the first encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#firstContextData\n       * @type {ContextData}\n       */\n      get firstContextData() {\n        const instance = _instance.firstContextData()\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * Returns the ContextData corresponding to the last encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#lastContextData\n       * @type {ContextData}\n       */\n      get lastContextData() {\n        const instance = _instance.lastContextData()\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * Whether the encryption parameters are set in a way that is considered valid by\n       * Microsoft SEAL, the variable parameters_set is set to true.\n       *\n       * @function\n       * @name Context#parametersSet\n       * @type {boolean}\n       */\n      parametersSet() {\n        return _instance.parametersSet()\n      },\n\n      /**\n       * Returns a ParmsIdType corresponding to the set of encryption parameters that are used for keys.\n       *\n       * @readonly\n       * @name Context#keyParmsId\n       * @type {ParmsIdType}\n       */\n      get keyParmsId() {\n        const instance = _instance.keyParmsId()\n        const parmsId = ParmsIdType()\n        parmsId.inject(instance)\n        return parmsId\n      },\n\n      /**\n       * Returns a ParmsIdType corresponding to the first encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#firstParmsId\n       * @type {ParmsIdType}\n       */\n      get firstParmsId() {\n        const instance = _instance.firstParmsId()\n        const parmsId = ParmsIdType()\n        parmsId.inject(instance)\n        return parmsId\n      },\n\n      /**\n       * The ParmsIdType corresponding to the last encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#lastParmsId\n       * @type {ParmsIdType}\n       */\n      get lastParmsId() {\n        const instance = _instance.lastParmsId()\n        const parmsId = ParmsIdType()\n        parmsId.inject(instance)\n        return parmsId\n      },\n\n      /**\n       * Whether the coefficient modulus supports keyswitching. In practice,\n       * support for keyswitching is required by Evaluator.relinearize,\n       * Evaluator.applyGalois, and all rotation and conjugation operations. For\n       * keyswitching to be available, the coefficient modulus parameter must consist\n       * of at least two prime number factors.\n       *\n       * @readonly\n       * @name Context#usingKeyswitching\n       * @type {boolean}\n       */\n      get usingKeyswitching() {\n        return _instance.usingKeyswitching()\n      }\n    }\n  }\n\nexport const ContextInit = ({ loader }: LoaderOptions): ContextDependencies => {\n  const library: Library = loader.library\n  return ContextConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { CipherText } from './cipher-text'\nimport { Context } from './context'\nimport { SecretKey } from './secret-key'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\n\nexport type DecryptorDependencyOptions = {\n  readonly Exception: Exception\n  readonly PlainText: PlainTextConstructorOptions\n}\n\nexport type DecryptorDependencies = {\n  ({\n    Exception,\n    PlainText\n  }: DecryptorDependencyOptions): DecryptorConstructorOptions\n}\n\nexport type DecryptorConstructorOptions = {\n  (context: Context, secretKey: SecretKey): Decryptor\n}\n\nexport type Decryptor = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly decrypt: (\n    cipherText: CipherText,\n    plainText?: PlainText\n  ) => PlainText | void\n  readonly invariantNoiseBudget: (cipherText: CipherText) => number\n}\n\nconst DecryptorConstructor =\n  (library: Library): DecryptorDependencies =>\n  ({\n    Exception,\n    PlainText\n  }: DecryptorDependencyOptions): DecryptorConstructorOptions =>\n  (context, secretKey): Decryptor => {\n    const Constructor = library.Decryptor\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance, secretKey.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements Decryptor\n     */\n\n    /**\n     * @interface Decryptor\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Decryptor#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Decryptor#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Decryptor#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Decrypts a CipherText and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Decryptor#decrypt\n       * @param {CipherText} cipherText CipherText to decrypt\n       * @param {PlainText} [plainText] PlainText destination to store the decrypted result\n       * @returns {PlainText|void} Returns undefined if a PlainText was specified. Otherwise returns a\n       * PlainText containng the decrypted result\n       */\n      decrypt(cipherText: CipherText, plainText?: PlainText): PlainText | void {\n        try {\n          if (plainText) {\n            _instance.decrypt(cipherText.instance, plainText.instance)\n            return\n          }\n          const plain = PlainText()\n          _instance.decrypt(cipherText.instance, plain.instance)\n          return plain\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Computes the invariant noise budget (in bits) of a CipherText. The invariant\n       * noise budget measures the amount of room there is for the noise to grow while\n       * ensuring correct decryptions. This function works only with the BFV scheme.\n       *\n       * @par Invariant Noise Budget\n       * The invariant noise polynomial of a CipherText is a rational coefficient\n       * polynomial, such that a CipherText decrypts correctly as long as the\n       * coefficients of the invariantnoise polynomial are of absolute value less\n       * than 1/2. Thus, we call the infinity-norm of the invariant noise polynomial\n       * the invariant noise, and for correct decryption requireit to be less than\n       * 1/2. If v denotes the invariant noise, we define the invariant noise budget\n       * as -log2(2v). Thus, the invariant noise budget starts from some initial\n       * value, which depends on the encryption parameters, and decreases when\n       * computations are performed. When the budget reaches zero, the CipherText\n       * becomes too noisy to decrypt correctly.\n       *\n       * @function\n       * @name Decryptor#invariantNoiseBudget\n       * @param {CipherText} cipherText CipherText to measure\n       * @returns {number} Invariant noise budget (in bits)\n       */\n      invariantNoiseBudget(cipherText: CipherText): number {\n        try {\n          return _instance.invariantNoiseBudget(cipherText.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const DecryptorInit = ({\n  loader\n}: LoaderOptions): DecryptorDependencies => {\n  const library: Library = loader.library\n  return DecryptorConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Vector, VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { SchemeType } from './scheme-type'\nimport { Exception, SealError } from './exception'\nimport { Modulus, ModulusConstructorOptions } from './modulus'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\n\nexport type EncryptionParametersDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Modulus: ModulusConstructorOptions\n  readonly SchemeType: SchemeType\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type EncryptionParametersDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Modulus,\n    SchemeType,\n    Vector\n  }: EncryptionParametersDependencyOptions): EncryptionParametersConstructorOptions\n}\n\nexport type EncryptionParametersConstructorOptions = {\n  (schemeType?: SchemeType): EncryptionParameters\n}\n\nexport type EncryptionParameters = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly setPolyModulusDegree: (polyModulusDegree: number) => void\n  readonly setCoeffModulus: (coeffModulus: Vector) => void\n  readonly setPlainModulus: (plainModulus: Modulus) => void\n  readonly scheme: SchemeType\n  readonly polyModulusDegree: number\n  readonly coeffModulus: BigUint64Array\n  readonly plainModulus: Modulus\n  readonly parmsId: ParmsIdType\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (encoded: string) => void\n  readonly loadArray: (array: Uint8Array) => void\n}\n\nconst EncryptionParametersConstructor =\n  (library: Library): EncryptionParametersDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Modulus,\n    SchemeType,\n    ParmsIdType,\n    Vector\n  }: EncryptionParametersDependencyOptions): EncryptionParametersConstructorOptions =>\n  (schemeType: SchemeType = SchemeType.none): EncryptionParameters => {\n    const Constructor = library.EncryptionParameters\n    let _instance = new Constructor(schemeType)\n\n    /**\n     * @implements EncryptionParameters\n     */\n\n    /**\n     * @interface EncryptionParameters\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name EncryptionParameters#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name EncryptionParameters#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name EncryptionParameters#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Sets the degree of the polynomial modulus parameter to the specified value.\n       * The polynomial modulus directly affects the number of coefficients in\n       * PlainText polynomials, the size of CipherText elements, the computational\n       * performance of the scheme (bigger is worse), and the security level (bigger\n       * is better). In Microsoft SEAL the degree of the polynomial modulus must be a power\n       * of 2 (e.g.  1024, 2048, 4096, 8192, 16384, or 32768).\n       *\n       * @function\n       * @name EncryptionParameters#setPolyModulusDegree\n       * @param {number} polyModulusDegree The degree of the polynomial modulus\n       */\n      setPolyModulusDegree(polyModulusDegree: number) {\n        try {\n          _instance.setPolyModulusDegree(polyModulusDegree)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sets the coefficient modulus parameter. The coefficient modulus consists\n       * of a list of distinct prime numbers, and is represented by a vector of\n       * Modulus objects. The coefficient modulus directly affects the size\n       * of CipherText elements, the amount of computation that the scheme can perform\n       * (bigger is better), and the security level (bigger is worse). In Microsoft SEAL each\n       * of the prime numbers in the coefficient modulus must be at most 60 bits,\n       * and must be congruent to 1 modulo 2*degree(poly_modulus).\n       *\n       * @function\n       * @name EncryptionParameters#setCoeffModulus\n       * @param {Vector} coeffModulus Vector of Modulus primes\n       */\n      setCoeffModulus(coeffModulus: Vector) {\n        try {\n          _instance.setCoeffModulus(coeffModulus.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sets the PlainText modulus parameter. The PlainText modulus is an integer\n       * modulus represented by the Modulus class. The PlainText modulus\n       * determines the largest coefficient that PlainText polynomials can represent.\n       * It also affects the amount of computation that the scheme can perform\n       * (bigger is worse). In Microsoft SEAL the PlainText modulus can be at most 60 bits\n       * long, but can otherwise be any integer. Note, however, that some features\n       * (e.g. batching) require the PlainText modulus to be of a particular form.\n       *\n       * @function\n       * @name EncryptionParameters#setPlainModulus\n       * @param {Modulus} plainModulus PlainText modulus parameter\n       */\n      setPlainModulus(plainModulus: Modulus) {\n        try {\n          _instance.setPlainModulus(plainModulus.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The encryption scheme type.\n       *\n       * @readonly\n       * @name EncryptionParameters#scheme\n       * @type {SchemeType.none|SchemeType.bfv|SchemeType.ckks}\n       */\n      get scheme() {\n        return _instance.scheme()\n      },\n\n      /**\n       * The degree of the polynomial modulus parameter.\n       *\n       * @readonly\n       * @name EncryptionParameters#polyModulusDegree\n       * @type {number}\n       */\n      get polyModulusDegree() {\n        return _instance.polyModulusDegree()\n      },\n\n      /**\n       * Returns the currently set coefficient modulus parameter.\n       *\n       * @readonly\n       * @name EncryptionParameters#coeffModulus\n       * @type {BigUint64Array}\n       */\n      get coeffModulus() {\n        const tempVect = Vector()\n        const instance = _instance.coeffModulus()\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Modulus')\n        const tempArr = tempVect.toArray() as BigUint64Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Returns the currently set PlainText modulus parameter.\n       *\n       * @readonly\n       * @name EncryptionParameters#plainModulus\n       * @type {Modulus}\n       */\n      get plainModulus() {\n        const instance = _instance.plainModulus()\n        const smallModulus = Modulus(BigInt(0))\n        smallModulus.inject(instance)\n        return smallModulus\n      },\n\n      /**\n       * Returns the ParmsId of the current parameters.\n       *\n       * @readonly\n       * @name EncryptionParameters#parmsId\n       * @type {ParmsIdType}\n       */\n      get parmsId() {\n        const parms = ParmsIdType()\n        parms.inject(_instance.parmsId())\n        return parms\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name EncryptionParameters#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the Encryption Parameters as a binary Uint8Array\n       *\n       * @function\n       * @name EncryptionParameters#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the CipherText in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load the Encryption Parameters from a base64 string\n       *\n       * @function\n       * @name EncryptionParameters#load\n       * @param {string} encoded base64 encoded string\n       */\n      load(encoded: string) {\n        try {\n          _instance.loadFromString(encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load the Encryption Parameters from an Uint8Array holding binary data\n       *\n       * @function\n       * @name EncryptionParameters#loadArray\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(array: Uint8Array) {\n        try {\n          _instance.loadFromArray(array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const EncryptionParametersInit = ({\n  loader\n}: LoaderOptions): EncryptionParametersDependencies => {\n  const library: Library = loader.library\n  return EncryptionParametersConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { CipherText, CipherTextConstructorOptions } from './cipher-text'\nimport { Context } from './context'\nimport { Serializable, SerializableConstructorOptions } from './serializable'\nimport { PublicKey } from './public-key'\nimport { SecretKey } from './secret-key'\nimport { PlainText } from './plain-text'\n\nexport type EncryptorDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly CipherText: CipherTextConstructorOptions\n  readonly Serializable: SerializableConstructorOptions\n}\n\nexport type EncryptorDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    Serializable\n  }: EncryptorDependencyOptions): EncryptorConstructorOptions\n}\n\nexport type EncryptorConstructorOptions = {\n  (context: Context, publicKey: PublicKey, secretKey?: SecretKey): Encryptor\n}\n\nexport type Encryptor = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encrypt: (\n    plainText: PlainText,\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptSerializable: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => Serializable\n  readonly encryptSymmetric: (\n    plainText: PlainText,\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptSymmetricSerializable: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => Serializable\n  readonly encryptZero: (\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptZeroSerializable: (pool?: MemoryPoolHandle) => Serializable\n}\n\nconst EncryptorConstructor =\n  (library: Library): EncryptorDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    Serializable\n  }: EncryptorDependencyOptions): EncryptorConstructorOptions =>\n  (context, publicKey, secretKey): Encryptor => {\n    const Constructor = library.Encryptor\n    let _instance = constructInstance(context, publicKey, secretKey)\n\n    function constructInstance(\n      context: Context,\n      publicKey: PublicKey,\n      secretKey?: SecretKey\n    ) {\n      try {\n        if (secretKey) {\n          return new Constructor(\n            context.instance,\n            publicKey.instance,\n            secretKey.instance\n          )\n        }\n        return new Constructor(context.instance, publicKey.instance)\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements Encryptor\n     */\n\n    /**\n     * @interface Encryptor\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Encryptor#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Encryptor#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Encryptor#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Encrypts a PlainText and stores the result in the destination parameter.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encrypt\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {CipherText} [cipherText] CipherText destination to store the encrypted result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n       * CipherText containing the encrypted result\n       */\n      encrypt(\n        plainText: PlainText,\n        cipherText?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (cipherText) {\n            _instance.encrypt(plainText.instance, cipherText.instance, pool)\n            return\n          }\n          const cipher = CipherText()\n          _instance.encrypt(plainText.instance, cipher.instance, pool)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a PlainText and returns a CipherText as a Serializable object.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptSerializable\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Serializable<CipherText>} A Serializable containing the encrypted result\n       */\n      encryptSerializable(\n        plainText: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Serializable {\n        try {\n          const temp = Serializable()\n          const instance = _instance.encryptSerializable(\n            plainText.instance,\n            pool\n          )\n          temp.unsafeInject(instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a PlainText with the secret key and stores the result in\n       * destination.\n       *\n       * The encryption parameters for the resulting CipherText\n       * correspond to:\n       * 1) in BFV or BGV, the highest (data) level in the modulus switching chain,\n       * 2) in CKKS, the encryption parameters of the plaintext.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptSymmetric\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {CipherText} [cipherText] CipherText destination to store the encrypted result.\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n       * CipherText containing the encrypted result\n       */\n      encryptSymmetric(\n        plainText: PlainText,\n        cipherText?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (cipherText) {\n            _instance.encryptSymmetric(\n              plainText.instance,\n              cipherText.instance,\n              pool\n            )\n            return\n          }\n          const cipher = CipherText()\n          _instance.encryptSymmetric(plainText.instance, cipher.instance, pool)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a plaintext with the secret key and returns the ciphertext as\n       * a serializable object.\n       *\n       * The encryption parameters for the resulting CipherText\n       * correspond to:\n       * 1) in BFV or BGV, the highest (data) level in the modulus switching chain,\n       * 2) in CKKS, the encryption parameters of the plaintext.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * Half of the ciphertext data is pseudo-randomly generated from a seed to\n       * reduce the object size. The resulting serializable object cannot be used\n       * directly and is meant to be serialized for the size reduction to have an\n       * impact.\n       *\n       * @function\n       * @name Encryptor#encryptSymmetricSerializable\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Serializable<CipherText>} Returns a Serializable containing the encrypted result\n       */\n      encryptSymmetricSerializable(\n        plainText: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.encryptSymmetricSerializable(\n            plainText.instance,\n            pool\n          )\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a zero plaintext with the public key and returns the ciphertext\n       * as a serializable object.\n       *\n       * The encryption parameters for the resulting ciphertext correspond to the\n       * highest (data) level in the modulus switching chain. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed to\n       * by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptZero\n       * @param {CipherText} [cipherText] A CipherText to overwrite.\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n       * CipherText containing the encrypted result\n       */\n      encryptZero(\n        cipherText?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (cipherText) {\n            _instance.encryptZero(cipherText.instance, pool)\n            return\n          }\n          const cipher = CipherText()\n          _instance.encryptZero(cipher.instance, pool)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a zero plaintext with the public key and stores the result in\n       * destination.\n       *\n       * The encryption parameters for the resulting ciphertext correspond to the\n       * highest (data) level in the modulus switching chain. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed to\n       * by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptZeroSerializable\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Serializable<CipherText>} A CipherText as a serialized object containing the encrypted result\n       */\n      encryptZeroSerializable(\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.encryptZeroSerializable(pool)\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const EncryptorInit = ({\n  loader\n}: LoaderOptions): EncryptorDependencies => {\n  const library: Library = loader.library\n  return EncryptorConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { CipherText, CipherTextConstructorOptions } from './cipher-text'\nimport { Context } from './context'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { RelinKeys } from './relin-keys'\nimport { ParmsIdType } from './parms-id-type'\nimport { GaloisKeys } from './galois-keys'\nimport { SchemeType } from './scheme-type'\n\nexport type EvaluatorDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly CipherText: CipherTextConstructorOptions\n  readonly PlainText: PlainTextConstructorOptions\n}\n\nexport type EvaluatorDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    PlainText\n  }: EvaluatorDependencyOptions): EvaluatorConstructorOptions\n}\n\nexport type EvaluatorConstructorOptions = {\n  (context: Context): Evaluator\n}\n\nexport type Evaluator = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly negate: (\n    encrypted: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly add: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly sub: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly multiply: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly square: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly relinearize: (\n    encrypted: CipherText,\n    relinKeys: RelinKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly cipherModSwitchToNext: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly cipherModSwitchTo: (\n    encrypted: CipherText,\n    parmsId: ParmsIdType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly plainModSwitchToNext: (\n    plain: PlainText,\n    destination?: PlainText\n  ) => PlainText | void\n  readonly plainModSwitchTo: (\n    plain: PlainText,\n    parmsId: ParmsIdType,\n    destination?: PlainText\n  ) => PlainText | void\n  readonly rescaleToNext: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rescaleTo: (\n    encrypted: CipherText,\n    parmsId: ParmsIdType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly modReduceToNext: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly modReduceTo: (\n    encrypted: CipherText,\n    parmsId: ParmsIdType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly exponentiate: (\n    encrypted: CipherText,\n    exponent: number,\n    relinKeys: RelinKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly addPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly subPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly multiplyPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly plainTransformToNtt: (\n    plain: PlainText,\n    parmsId: ParmsIdType,\n    destinationNtt?: PlainText,\n    pool?: MemoryPoolHandle\n  ) => PlainText | void\n  readonly cipherTransformToNtt: (\n    encrypted: CipherText,\n    destinationNtt?: CipherText\n  ) => CipherText | void\n  readonly cipherTransformFromNtt: (\n    encryptedNtt: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly applyGalois: (\n    encrypted: CipherText,\n    galoisElt: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateRows: (\n    encrypted: CipherText,\n    steps: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateColumns: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateVector: (\n    encrypted: CipherText,\n    steps: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly complexConjugate: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly sumElements: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly dotProduct: (\n    a: CipherText,\n    b: CipherText,\n    relinKeys: RelinKeys,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly dotProductPlain: (\n    a: CipherText,\n    b: PlainText,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n}\n\nconst EvaluatorConstructor =\n  (library: Library): EvaluatorDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    PlainText\n  }: EvaluatorDependencyOptions): EvaluatorConstructorOptions =>\n  (context): Evaluator => {\n    const Constructor = library.Evaluator\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements Evaluator\n     */\n\n    /**\n     * @interface Evaluator\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Evaluator#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Evaluator#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Evaluator#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Negates a CipherText and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#negate\n       * @param {CipherText} encrypted CipherText to negate\n       * @param {CipherText} [destination] CipherText to store the negated results\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherText = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.negate(cipherText)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.negate(encrypted, cipherDest)\n       */\n      negate(\n        encrypted: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.negate(encrypted.instance, destination.instance)\n            return\n          }\n          const temp = CipherText()\n          _instance.negate(encrypted.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Adds two CipherTexts. This function adds together a and b\n       * and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#add\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {CipherText} [destination] CipherText destination to store the sum\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.add(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.add(cipherTextA, cipherTextB, cipherDest)\n       */\n      add(\n        a: CipherText,\n        b: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.add(a.instance, b.instance, destination.instance)\n            return\n          }\n          const temp = CipherText()\n          _instance.add(a.instance, b.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Subtracts two CipherTexts. This function computes the difference of a\n       * and b and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#sub\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {CipherText} [destination] CipherText destination to store the difference\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.sub(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.sub(cipherTextA, cipherTextB, cipherDest)\n       */\n      sub(\n        a: CipherText,\n        b: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.sub(a.instance, b.instance, destination.instance)\n            return\n          }\n          const temp = CipherText()\n          _instance.sub(a.instance, b.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Multiplies two CipherTexts. This functions computes the product of a\n       * and b and stores the result in the destination parameter. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#multiply\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {CipherText} [destination] CipherText destination to store the product\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.multiply(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.multiply(cipherTextA, cipherTextB, cipherDest)\n       */\n      multiply(\n        a: CipherText,\n        b: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiply(\n              a.instance,\n              b.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.multiply(a.instance, b.instance, temp.instance, pool)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Squares a CipherText. This functions computes the square of encrypted and\n       * stores the result in the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#square\n       * @param {CipherText} encrypted CipherText to square\n       * @param {CipherText} [destination] CipherText destination to store the squared result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.square(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.square(cipherTextA, cipherDest)\n       */\n      square(\n        encrypted: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.square(encrypted.instance, destination.instance, pool)\n            return\n          }\n          const temp = CipherText()\n          _instance.square(encrypted.instance, temp.instance, pool)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Relinearizes a CipherText. This functions relinearizes encrypted, reducing\n       * its size down to 2, and stores the result in the destination parameter.\n       * If the size of encrypted is K+1, the given relinearization keys need to\n       * have size at least K-1. Dynamic memory allocations in the process are allocated\n       * from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#relinearize\n       * @param {CipherText} encrypted CipherText to relinearize\n       * @param {RelinKeys} relinKeys RelinKey used to perform relinearization\n       * @param {CipherText} [destination] CipherText destination to store the relinearized result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const relinKeys = keyGenerator.createRelinKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.relinearize(cipherTextA, relinKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.relinearize(cipherTextA, relinKeys, cipherDest)\n       */\n      relinearize(\n        encrypted: CipherText,\n        relinKeys: RelinKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.relinearize(\n              encrypted.instance,\n              relinKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.relinearize(\n            encrypted.instance,\n            relinKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down to q_1...q_{k-1} and stores the result in the destination\n       * parameter. Dynamic memory allocations in the process are allocated from\n       * the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#cipherModSwitchToNext\n       * @param {CipherText} encrypted CipherText to switch its modulus down\n       * @param {CipherText} [destination] CipherText destination to store the switched result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.cipherModSwitchToNext(cipherTextA)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherModSwitchToNext(cipherTextA, cipherDest)\n       */\n      cipherModSwitchToNext(\n        encrypted: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.cipherModSwitchToNext(\n              encrypted.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherModSwitchToNext(\n            encrypted.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down until the parameters reach the given parmsId and stores the\n       * result in the destination parameter. Dynamic memory allocations in the process\n       * are allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#cipherModSwitchTo\n       * @param {CipherText} encrypted CipherText to switch its modulus down\n       * @param {ParmsIdType} parmsId Target parmsId to switch to\n       * @param {CipherText} [destination] CipherText destination to store the switched result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.cipherModSwitchTo(cipherTextA, parmsId)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherModSwitchTo(cipherTextA, parmsId, cipherDest)\n       */\n      cipherModSwitchTo(\n        encrypted: CipherText,\n        parmsId: ParmsIdType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.cipherModSwitchTo(\n              encrypted.instance,\n              parmsId.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherModSwitchTo(\n            encrypted.instance,\n            parmsId.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Modulus switches an NTT transformed PlainText from modulo q_1...q_k down\n       * to modulo q_1...q_{k-1} and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#plainModSwitchToNext\n       * @param {PlainText} plain PlainText to switch its modulus down\n       * @param {PlainText} [destination] PlainText destination to store the switched result\n       * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const resultCipher = evaluator.plainModSwitchToNext(plainTextA)\n       * // or\n       * const plainDest = seal.PlainText()\n       * evaluator.plainModSwitchToNext(plainTextA, plainDest)\n       */\n      plainModSwitchToNext(\n        plain: PlainText,\n        destination?: PlainText\n      ): PlainText | void {\n        try {\n          if (destination) {\n            _instance.plainModSwitchToNext(plain.instance, destination.instance)\n            return\n          }\n          const temp = PlainText()\n          _instance.plainModSwitchToNext(plain.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given an NTT transformed PlainText modulo q_1...q_k, this function switches\n       * the modulus down until the parameters reach the given parmsId and stores\n       * the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#plainModSwitchTo\n       * @param {PlainText} plain PlainText to switch its modulus down\n       * @param {ParmsIdType} parmsId Target parmsId to switch to\n       * @param {PlainText} [destination] PlainText destination to store the switched result\n       * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.plainModSwitchTo(plainTextA, parmsId)\n       * // or\n       * const plainDest = seal.PlainText()\n       * evaluator.plainModSwitchTo(plainTextA, parmsId, plainDest)\n       */\n      plainModSwitchTo(\n        plain: PlainText,\n        parmsId: ParmsIdType,\n        destination?: PlainText\n      ): PlainText | void {\n        try {\n          if (destination) {\n            _instance.plainModSwitchTo(\n              plain.instance,\n              parmsId.instance,\n              destination.instance\n            )\n            return\n          }\n          const temp = PlainText()\n          _instance.plainModSwitchTo(\n            plain.instance,\n            parmsId.instance,\n            temp.instance\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down to q_1...q_{k-1}, scales the message down accordingly, and\n       * stores the result in the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rescaleToNext\n       * @param {CipherText} encrypted CipherText to rescale\n       * @param {CipherText} [destination] CipherText destination to store the rescaled result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rescaleToNext(cipherTextA)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rescaleToNext(cipherTextA, cipherDest)\n       */\n      rescaleToNext(\n        encrypted: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rescaleToNext(\n              encrypted.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rescaleToNext(encrypted.instance, temp.instance, pool)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down until the parameters reach the given parmsId, scales the message\n       * down accordingly, and stores the result in the destination parameter. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rescaleTo\n       * @param {CipherText} encrypted CipherText to rescale\n       * @param {ParmsIdType} parmsId Target parmsId to rescale to\n       * @param {CipherText} [destination] CipherText destination to store the rescaled result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.rescaleTo(cipherTextA, parmsId)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rescaleTo(cipherTextA, parmsId, cipherDest)\n       */\n      rescaleTo(\n        encrypted: CipherText,\n        parmsId: ParmsIdType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rescaleTo(\n              encrypted.instance,\n              parmsId.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rescaleTo(\n            encrypted.instance,\n            parmsId.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a ciphertext encrypted modulo q_1...q_k, this function switches\n       * the modulus down to q_1...q_{k-1}, scales the message down accordingly,\n       * and stores the result in the destination parameter. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#modReduceToNext\n       * @param {CipherText} encrypted CipherText to reduce\n       * @param {CipherText} [destination] CipherText destination to store the\n       * reduced result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n       * MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if\n       * a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.modReduceToNext(cipherTextA)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.modReduceToNext(cipherTextA, cipherDest)\n       */\n      modReduceToNext(\n        encrypted: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.modReduceToNext(\n              encrypted.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.modReduceToNext(encrypted.instance, temp.instance, pool)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a ciphertext encrypted modulo q_1...q_k, this function reduces\n       * the modulus down until the parameters reach the given parms_id and\n       * stores the result in the destination parameter. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#modReduceTo\n       * @param {CipherText} encrypted CipherText to reduce\n       * @param {ParmsIdType} parmsId Target parmsId to reduce to\n       * @param {CipherText} [destination] CipherText destination to store the\n       * reduced result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n       * MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if\n       * a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.modReduceTo(cipherTextA, parmsId)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.modReduceTo(cipherTextA, parmsId, cipherDest)\n       */\n      modReduceTo(\n        encrypted: CipherText,\n        parmsId: ParmsIdType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.modReduceTo(\n              encrypted.instance,\n              parmsId.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.modReduceTo(\n            encrypted.instance,\n            parmsId.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Exponentiates a CipherText. This functions raises encrypted to a power and\n       * stores the result in the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle. The exponentiation is done in a depth-optimal order, and\n       * relinearization is performed automatically after every multiplication in\n       * the process. In relinearization the given relinearization keys are used.\n       *\n       * @function\n       * @name Evaluator#exponentiate\n       * @param {CipherText} encrypted CipherText to exponentiate\n       * @param {number} exponent Positive integer to exponentiate the CipherText\n       * @param {RelinKeys} relinKeys RelinKeys used to perform relinearization after each exponentiation\n       * @param {CipherText} [destination] CipherText destination to store the exponentiated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const relinKeys = keyGenerator.createRelinKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.exponentiate(cipherTextA, 3, relinKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.exponentiate(cipherTextA, 3, relinKeys, cipherDest)\n       */\n      exponentiate(\n        encrypted: CipherText,\n        exponent: number,\n        relinKeys: RelinKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.exponentiate(\n              encrypted.instance,\n              exponent,\n              relinKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.exponentiate(\n            encrypted.instance,\n            exponent,\n            relinKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Adds a CipherText and a PlainText. This function adds a CipherText and\n       * a PlainText and stores the result in the destination parameter. The PlainText\n       * must be valid for the current encryption parameters.\n       *\n       * @function\n       * @name Evaluator#addPlain\n       * @param {CipherText} encrypted CipherText operand A\n       * @param {PlainText} plain PlainText operand B\n       * @param {CipherText} [destination] CipherText destination to store the sum\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encrypting/encoding some data ...\n       * const resultCipher = evaluator.addPlain(cipherTextA, plainTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.addPlain(cipherTextA, plainTextB, cipherDest)\n       */\n      addPlain(\n        encrypted: CipherText,\n        plain: PlainText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.addPlain(\n              encrypted.instance,\n              plain.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.addPlain(\n            encrypted.instance,\n            plain.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Subtracts a PlainText from a CipherText. This function subtracts a PlainText\n       * from a CipherText and stores the result in the destination parameter. The\n       * PlainText must be valid for the current encryption parameters.\n       *\n       * @function\n       * @name Evaluator#subPlain\n       * @param {CipherText} encrypted CipherText operand A\n       * @param {PlainText} plain PlainText operand B\n       * @param {CipherText} [destination] CipherText destination to store the difference\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encrypting/encoding some data ...\n       * const resultCipher = evaluator.subPlain(cipherTextA, plainTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.subPlain(cipherTextA, plainTextB, cipherDest)\n       */\n      subPlain(\n        encrypted: CipherText,\n        plain: PlainText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.subPlain(\n              encrypted.instance,\n              plain.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.subPlain(\n            encrypted.instance,\n            plain.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Multiplies a CipherText with a PlainText. This function multiplies\n       * a CipherText with a PlainText and stores the result in the destination\n       * parameter. The PlainText must be a valid for the current encryption parameters,\n       * and cannot be identially 0. Dynamic memory allocations in the process are\n       * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#multiplyPlain\n       * @param {CipherText} encrypted CipherText operand A\n       * @param {PlainText} plain PlainText operand B\n       * @param {CipherText} [destination] CipherText destination to store the product\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText?} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encrypting/encoding some data ...\n       * const resultCipher = evaluator.multiplyPlain(cipherTextA, plainTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.multiplyPlain(cipherTextA, plainTextB, cipherDest)\n       */\n      multiplyPlain(\n        encrypted: CipherText,\n        plain: PlainText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiplyPlain(\n              encrypted.instance,\n              plain.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.multiplyPlain(\n            encrypted.instance,\n            plain.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Transforms a PlainText to NTT domain. This functions applies the number\n       * Theoretic Transform to a PlainText by first embedding integers modulo the\n       * PlainText modulus to integers modulo the coefficient modulus and then\n       * performing David Harvey's NTT on the resulting polynomial. The transformation\n       * is done with respect to encryption parameters corresponding to a given\n       * parmsId. The result is stored in the destinationNtt parameter. For the\n       * operation to be valid, the PlainText must have degree less than PolyModulusDegree\n       * and each coefficient must be less than the PlainText modulus, i.e., the PlainText\n       * must be a valid PlainText under the current encryption parameters. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#plainTransformToNtt\n       * @param {PlainText} plain PlainText to transform\n       * @param {ParmsIdType} parmsId target parmsId to perform NTT transformation\n       * @param {PlainText} [destinationNtt] PlainText destination to store the transformed result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.plainTransformToNtt(plainTextA, parmsId)\n       * // or\n       * const plainDest = seal.PlainText()\n       * evaluator.plainTransformToNtt(plainTextA, parmsId, plainDest)\n       */\n      plainTransformToNtt(\n        plain: PlainText,\n        parmsId: ParmsIdType,\n        destinationNtt?: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): PlainText | void {\n        try {\n          if (destinationNtt) {\n            _instance.plainTransformToNtt(\n              plain.instance,\n              parmsId.instance,\n              destinationNtt.instance,\n              pool\n            )\n            return\n          }\n          const temp = PlainText()\n          _instance.plainTransformToNtt(\n            plain.instance,\n            parmsId.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Transforms a CipherText to NTT domain. This functions applies David Harvey's\n       * number Theoretic Transform separately to each polynomial of a CipherText.\n       * The result is stored in the destinationNtt parameter.\n       *\n       * @function\n       * @name Evaluator#cipherTransformToNtt\n       * @param {CipherText} encrypted CipherText to transform\n       * @param {CipherText} [destinationNtt] CipherText destination to store the transformed result\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.cipherTransformToNtt(cipherTextA)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherTransformToNtt(cipherTextA, cipherDest)\n       */\n      cipherTransformToNtt(\n        encrypted: CipherText,\n        destinationNtt?: CipherText\n      ): CipherText | void {\n        try {\n          if (destinationNtt) {\n            _instance.cipherTransformToNtt(\n              encrypted.instance,\n              destinationNtt.instance\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherTransformToNtt(encrypted.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Transforms a CipherText back from NTT domain. This functions applies the\n       * inverse of David Harvey's number Theoretic Transform separately to each\n       * polynomial of a CipherText. The result is stored in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#cipherTransformFromNtt\n       * @param {CipherText} encryptedNtt CipherText to transform\n       * @param {CipherText} [destination] CipherText destination to store the transformed result\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * // ... after cipherTransformToNtt ...\n       * const resultCipher = evaluator.cipherTransformFromNtt(cipherTextANtt)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherTransformFromNtt(cipherTextANtt, cipherDest)\n       */\n      cipherTransformFromNtt(\n        encryptedNtt: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.cipherTransformFromNtt(\n              encryptedNtt.instance,\n              destination.instance\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherTransformFromNtt(encryptedNtt.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Applies a Galois automorphism to a CipherText and writes the result to the\n       * destination parameter. To evaluate the Galois automorphism, an appropriate\n       * set of Galois keys must also be provided. Dynamic memory allocations in\n       * the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * The desired Galois automorphism is given as a Galois element, and must be\n       * an odd integer in the interval [1, M-1], where M = 2*N, and N = degree(poly_modulus).\n       * Used with batching, a Galois element 3^i % M corresponds to a cyclic row\n       * rotation i steps to the left, and a Galois element 3^(N/2-i) % M corresponds\n       * to a cyclic row rotation i steps to the right. The Galois element M-1 corresponds\n       * to a column rotation (row swap) in BFV, and complex conjugation in CKKS.\n       * In the polynomial view (not batching), a Galois automorphism by a Galois\n       * element p changes Enc(plain(x)) to Enc(plain(x^p)).\n       *\n       * @function\n       * @name Evaluator#applyGalois\n       * @param {CipherText} encrypted CipherText to apply the automorphism\n       * @param {number} galoisElt number representing the Galois element\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * ...\n       * const evaluator = seal.Evaluator(context)\n       * const arr = Int32Array.from({ length: encoder.slotCount }, (_, i) => i)\n       * const plain = encoder.encode(arr)\n       * const cipher = encryptor.encrypt(plain)\n       * const cipherDest = seal.CipherText()\n       * const galElt = 2 * parms.polyModulusDegree - 1\n       * evaluator.applyGalois(cipher, galElt, galoisKeys, cipherDest)\n       */\n      applyGalois(\n        encrypted: CipherText,\n        galoisElt: number,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.applyGalois(\n              encrypted.instance,\n              galoisElt,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.applyGalois(\n            encrypted.instance,\n            galoisElt,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Rotates PlainText matrix rows cyclically. When batching is used with the\n       * BFV/BGV scheme, this function rotates the encrypted PlainText matrix rows\n       * cyclically to the left (steps > 0) or to the right (steps < 0) and writes\n       * the result to the destination parameter. Since the size of the batched\n       * matrix is 2-by-(N/2), where N is the degree of the polynomial modulus,\n       * the number of steps to rotate must have absolute value at most N/2-1. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rotateRows\n       * @param {CipherText} encrypted CipherText to rotate rows\n       * @param {number} steps Int representing steps to rotate (negative = right, positive = left)\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the rotated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rotateRows(cipherTextA, 3, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rotateRows(cipherTextA, 3, galoisKeys, cipherDest)\n       */\n      rotateRows(\n        encrypted: CipherText,\n        steps: number,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rotateRows(\n              encrypted.instance,\n              steps,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rotateRows(\n            encrypted.instance,\n            steps,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Rotates PlainText matrix columns cyclically. When batching is used with\n       * the BFV scheme, this function rotates the encrypted PlainText matrix columns\n       * cyclically, and writes the result to the destination parameter. Since the\n       * size of the batched matrix is 2-by-(N/2), where N is the degree of the\n       * polynomial modulus, this means simply swapping the two rows. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed to\n       * by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rotateColumns\n       * @param {CipherText} encrypted CipherText to rotate columns\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the rotated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rotateColumns(cipherTextA, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rotateColumns(cipherTextA, galoisKeys, cipherDest)\n       */\n      rotateColumns(\n        encrypted: CipherText,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rotateColumns(\n              encrypted.instance,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rotateColumns(\n            encrypted.instance,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Rotates PlainText vector cyclically. When using the CKKS scheme, this function\n       * rotates the encrypted PlainText vector cyclically to the left (steps > 0)\n       * or to the right (steps < 0) and writes the result to the destination parameter.\n       * Since the size of the batched matrix is 2-by-(N/2), where N is the degree\n       * of the polynomial modulus, the number of steps to rotate must have absolute\n       * value at most N/2-1. Dynamic memory allocations in the process are allocated\n       * from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rotateVector\n       * @param {CipherText} encrypted CipherText to rotate the entire vector\n       * @param {number} steps Int representing steps to rotate (negative = right, positive = left)\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the rotated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rotateVector(cipherTextA, 3, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rotateVector(cipherTextA, 3, galoisKeys, cipherDest)\n       */\n      rotateVector(\n        encrypted: CipherText,\n        steps: number,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rotateVector(\n              encrypted.instance,\n              steps,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rotateVector(\n            encrypted.instance,\n            steps,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Complex conjugates PlainText slot values. When using the CKKS scheme, this\n       * function complex conjugates all values in the underlying PlainText, and\n       * writes the result to the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#complexConjugate\n       * @param {CipherText} encrypted CipherText to complex conjugate\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the conjugated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.complexConjugate(cipherTextA, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.complexConjugate(cipherTextA, galoisKeys, cipherDest)\n       */\n      complexConjugate(\n        encrypted: CipherText,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.complexConjugate(\n              encrypted.instance,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.complexConjugate(\n            encrypted.instance,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sum all elements in the encrypted CipherText. The resulting CipherText contains the sum in every element.\n       *\n       * @function\n       * @name Evaluator#sumElements\n       * @param {CipherText} encrypted CipherText to sum elements\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {SchemeType} scheme Scheme that was used for encryption\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.sumElements(cipherTextA, galoisKeys, seal.SchemeTypes.BFV)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.sumElements(cipherTextA, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n       */\n      sumElements(\n        encrypted: CipherText,\n        galoisKeys: GaloisKeys,\n        scheme: SchemeType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.sumElements(\n              encrypted.instance,\n              galoisKeys.instance,\n              scheme,\n              destination.instance,\n              pool\n            )\n            return\n          }\n\n          const newDest = CipherText()\n          _instance.sumElements(\n            encrypted.instance,\n            galoisKeys.instance,\n            scheme,\n            newDest.instance,\n            pool\n          )\n          return newDest\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Perform the dot product (A.B) of two CipherTexts The resulting CipherText contains the dot product in every\n       * element.\n       *\n       * @function\n       * @name Evaluator#dotProduct\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {RelinKeys} relinKeys RelinKeys used to perform relinearization after multiplication\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {SchemeType} scheme Scheme that was used for encryption\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const relinKeys = keyGenerator.createRelinKeys()\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.dotProduct(cipherTextA, cipherTextB, relinKeys, galoisKeys, seal.SchemeTypes.BFV)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.dotProduct(cipherTextA, cipherTextB, relinKeys, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n       */\n      dotProduct(\n        a: CipherText,\n        b: CipherText,\n        relinKeys: RelinKeys,\n        galoisKeys: GaloisKeys,\n        scheme: SchemeType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiply(\n              a.instance,\n              b.instance,\n              destination.instance,\n              pool\n            )\n            _instance.relinearize(\n              destination.instance,\n              relinKeys.instance,\n              destination.instance,\n              pool\n            )\n            _instance.sumElements(\n              destination.instance,\n              galoisKeys.instance,\n              scheme,\n              destination.instance,\n              pool\n            )\n            return\n          }\n\n          const newDest = CipherText()\n          _instance.multiply(a.instance, b.instance, newDest.instance, pool)\n          _instance.relinearize(\n            newDest.instance,\n            relinKeys.instance,\n            newDest.instance,\n            pool\n          )\n          _instance.sumElements(\n            newDest.instance,\n            galoisKeys.instance,\n            scheme,\n            newDest.instance,\n            pool\n          )\n          return newDest\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Perform the dot product (A.B) of CipherText (A) and PlainText (B). The resulting CipherText contains the dot\n       * product in every element.\n       *\n       * @function\n       * @name Evaluator#dotProductPlain\n       * @param {CipherText} a CipherText operand A\n       * @param {PlainText} b PlainText operand B\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {SchemeType} scheme Scheme that was used for encryption\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encoding / encrypting some data ...\n       * const resultCipher = evaluator.dotProductPlain(cipherTextA, plainTextB, galoisKeys, seal.SchemeTypes.BFV)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.dotProductPlain(cipherTextA, plainTextB, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n       */\n      dotProductPlain(\n        a: CipherText,\n        b: PlainText,\n        galoisKeys: GaloisKeys,\n        scheme: SchemeType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiplyPlain(\n              a.instance,\n              b.instance,\n              destination.instance,\n              pool\n            )\n            _instance.sumElements(\n              destination.instance,\n              galoisKeys.instance,\n              scheme,\n              destination.instance,\n              pool\n            )\n            return\n          }\n\n          const newDest = CipherText()\n          _instance.multiplyPlain(\n            a.instance,\n            b.instance,\n            newDest.instance,\n            pool\n          )\n          _instance.sumElements(\n            newDest.instance,\n            galoisKeys.instance,\n            scheme,\n            newDest.instance,\n            pool\n          )\n          return newDest\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const EvaluatorInit = ({\n  loader\n}: LoaderOptions): EvaluatorDependencies => {\n  const library: Library = loader.library\n  return EvaluatorConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type ExceptionDependencies = {\n  (): ExceptionConstructorOptions\n}\n\nexport type ExceptionConstructorOptions = {\n  (): Exception\n}\n\nexport type SealError = number | Error | string\n\nexport type Exception = {\n  readonly safe: (e: SealError) => Error\n}\n\nconst ExceptionConstructor =\n  (library: Library): ExceptionDependencies =>\n  (): ExceptionConstructorOptions =>\n  (): Exception => {\n    // Static methods\n    const _getException = library.getException\n\n    /**\n     * @implements Exception\n     */\n\n    /**\n     * @interface Exception\n     */\n    return {\n      /**\n       * Takes a caught exception in SEAL library and gets a safe error string\n       *\n       * @function\n       * @name Exception.safe\n       * @param {(number|Error|string)} error Unsafe error to normalize\n       * @returns {Error}\n       */\n      safe(error: number | Error | string): Error {\n        if (typeof error === 'number') {\n          return new Error(_getException(error))\n        }\n\n        if (error instanceof Error) {\n          return error\n        }\n        return new Error(error || 'Unknown Error!')\n      }\n    }\n  }\n\nexport const ExceptionInit = ({\n  loader\n}: LoaderOptions): ExceptionDependencies => {\n  const library: Library = loader.library\n  return ExceptionConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\n\nexport type GaloisKeysDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type GaloisKeysDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: GaloisKeysDependencyOptions): GaloisKeysConstructorOptions\n}\n\nexport type GaloisKeysConstructorOptions = {\n  (): GaloisKeys\n}\n\nexport type GaloisKeys = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly size: number\n  readonly getIndex: (galoisElt: number) => number\n  readonly hasKey: (galoisElt: number) => boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: GaloisKeys) => void\n  readonly clone: () => GaloisKeys\n  readonly move: (key: GaloisKeys) => void\n}\n\nconst GaloisKeysConstructor =\n  (library: Library): GaloisKeysDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: GaloisKeysDependencyOptions): GaloisKeysConstructorOptions =>\n  (): GaloisKeys => {\n    const Constructor = library.GaloisKeys\n    let _instance = new Constructor()\n\n    /**\n     * @implements GaloisKeys\n     */\n\n    /**\n     * @interface GaloisKeys\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name GaloisKeys#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name GaloisKeys#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name GaloisKeys#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Returns the current number of keyswitching keys. Only keys that are\n       * non-empty are counted.\n       *\n       * @readonly\n       * @name GaloisKeys#size\n       * @type {number}\n       */\n      get size() {\n        return _instance.size()\n      },\n\n      /**\n       * Returns the index of a Galois key in the backing KSwitchKeys instance that\n       * corresponds to the given Galois element, assuming that it exists in the\n       * backing KSwitchKeys.\n       *\n       * @function\n       * @name GaloisKeys#getIndex\n       * @param {number} galoisElt The Galois element\n       * @returns {number} The index of the galois element\n       */\n      getIndex(galoisElt: number): number {\n        try {\n          return _instance.getIndex(galoisElt)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Returns whether a Galois key corresponding to a given Galois element exists.\n       *\n       * @function\n       * @name GaloisKeys#hasKey\n       * @param {number} galoisElt The Galois element\n       * @returns {boolean} True if the key exists\n       */\n      hasKey(galoisElt: number): boolean {\n        try {\n          return _instance.hasKey(galoisElt)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name GaloisKeys#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the GaloisKeys as a binary Uint8Array\n       *\n       * @function\n       * @name GaloisKeys#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the GaloisKeys in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a GaloisKeys from a base64 string\n       *\n       * @function\n       * @name GaloisKeys#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a GaloisKeys from an Uint8Array holding binary data\n       *\n       * @function\n       * @name GaloisKeys#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing GaloisKeys and overwrite this instance\n       *\n       * @function\n       * @name GaloisKeys#copy\n       * @param {GaloisKeys} key GaloisKeys to copy\n       * @example\n       * const keyA = keyGenerator.createGaloisKeys()\n       * const keyB = seal.GaloisKeys()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: GaloisKeys) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this GaloisKeys\n       *\n       * @function\n       * @name GaloisKeys#clone\n       * @returns {GaloisKeys}\n       * @example\n       * const keyA = keyGenerator.createGaloisKeys()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): GaloisKeys {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = GaloisKeysConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a GaloisKeys into this one and delete the old reference\n       *\n       * @function\n       * @name GaloisKeys#move\n       * @param {GaloisKeys} key GaloisKeys to move\n       * @example\n       * const keyA = keyGenerator.createGaloisKeys()\n       * const keyB = seal.GaloisKeys()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: GaloisKeys) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const GaloisKeysInit = ({\n  loader\n}: LoaderOptions): GaloisKeysDependencies => {\n  const library: Library = loader.library\n  return GaloisKeysConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { Context } from './context'\nimport { SecretKey, SecretKeyConstructorOptions } from './secret-key'\nimport { RelinKeys, RelinKeysConstructorOptions } from './relin-keys'\nimport { Serializable, SerializableConstructorOptions } from './serializable'\nimport { PublicKey, PublicKeyConstructorOptions } from './public-key'\nimport { GaloisKeys, GaloisKeysConstructorOptions } from './galois-keys'\n\nexport type KeyGeneratorDependencyOptions = {\n  readonly Exception: Exception\n  readonly PublicKey: PublicKeyConstructorOptions\n  readonly SecretKey: SecretKeyConstructorOptions\n  readonly RelinKeys: RelinKeysConstructorOptions\n  readonly GaloisKeys: GaloisKeysConstructorOptions\n  readonly Serializable: SerializableConstructorOptions\n}\n\nexport type KeyGeneratorDependencies = {\n  ({\n    Exception,\n    PublicKey,\n    SecretKey,\n    RelinKeys,\n    GaloisKeys,\n    Serializable\n  }: KeyGeneratorDependencyOptions): KeyGeneratorConstructorOptions\n}\n\nexport type KeyGeneratorConstructorOptions = {\n  (context: Context, secretKey?: SecretKey): KeyGenerator\n}\n\nexport type KeyGenerator = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly secretKey: () => SecretKey\n  readonly createPublicKeySerializable: () => Serializable\n  readonly createPublicKey: () => PublicKey\n  readonly createRelinKeysSerializable: () => Serializable\n  readonly createRelinKeys: () => RelinKeys\n  readonly createGaloisKeysSerializable: (steps?: Int32Array) => Serializable\n  readonly createGaloisKeys: (steps?: Int32Array) => GaloisKeys\n}\n\nconst KeyGeneratorConstructor =\n  (library: Library): KeyGeneratorDependencies =>\n  ({\n    Exception,\n    PublicKey,\n    SecretKey,\n    RelinKeys,\n    GaloisKeys,\n    Serializable\n  }: KeyGeneratorDependencyOptions): KeyGeneratorConstructorOptions =>\n  (context, secretKey): KeyGenerator => {\n    const Constructor = library.KeyGenerator\n    let _instance = constructInstance(context, secretKey)\n\n    function constructInstance(context: Context, secretKey?: SecretKey) {\n      try {\n        if (secretKey) {\n          return new Constructor(context.instance, secretKey.instance)\n        }\n        return new Constructor(context.instance)\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements KeyGenerator\n     */\n\n    /**\n     * @interface KeyGenerator\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name KeyGenerator#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name KeyGenerator#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name KeyGenerator#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Return the generated SecretKey\n       *\n       * @function\n       * @name KeyGenerator#secretKey\n       * @returns {SecretKey} The secret key that was generated upon instantiation of this KeyGenerator\n       */\n      secretKey(): SecretKey {\n        try {\n          const key = SecretKey()\n          const instance = _instance.secretKey()\n          key.inject(instance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Create a new PublicKey instance\n       *\n       * @function\n       * @name KeyGenerator#createPublicKey\n       * @returns {PublicKey} A new PublicKey instance\n       */\n      createPublicKey(): PublicKey {\n        try {\n          const key = PublicKey()\n          _instance.createPublicKey(key.instance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Create a new, Serializable PublicKey instance\n       *\n       * @function\n       * @name KeyGenerator#createPublicKeySerializable\n       * @returns {Serializable<PublicKey>} A new, serializable, PublicKey instance\n       */\n      createPublicKeySerializable(): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.createPublicKeySerializable()\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns relinearization keys. This function returns\n       * relinearization keys in a fully expanded form and is meant to be used\n       * primarily for demo, testing, and debugging purposes.\n       *\n       * @function\n       * @name KeyGenerator#createRelinKeys\n       * @returns {RelinKeys} New RelinKeys from the KeyGenerator's internal secret key\n       */\n      createRelinKeys(): RelinKeys {\n        try {\n          const keys = RelinKeys()\n          _instance.createRelinKeys(keys.instance)\n          return keys\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns relinearization keys as a serializable object.\n       *\n       * Half of the key data is pseudo-randomly generated from a seed to reduce\n       * the object size. The resulting serializable object cannot be used\n       * directly and is meant to be serialized for the size reduction to have an\n       * impact.\n       *\n       *\n       * @function\n       * @name KeyGenerator#createRelinKeysSerializable\n       * @returns {Serializable<RelinKeys>} New, serializable RelinKeys from the KeyGenerator's internal secret key\n       */\n      createRelinKeysSerializable(): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.createRelinKeysSerializable()\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns Galois keys. This function returns Galois keys in\n       * a fully expanded form and is meant to be used primarily for demo, testing,\n       * and debugging purposes. The user can optionally give an input a vector of desired\n       * Galois rotation step counts, where negative step counts correspond to\n       * rotations to the right and positive step counts correspond to rotations to\n       * the left. A step count of zero can be used to indicate a column rotation\n       * in the BFV scheme complex conjugation in the CKKS scheme.\n       *\n       * @function\n       * @name KeyGenerator#createGaloisKeys\n       * @param {Int32Array} [steps=Int32Array.from([])] Specific Galois Elements to generate\n       * @returns {GaloisKeys} New GaloisKeys from the KeyGenerator's internal secret key\n       */\n      createGaloisKeys(steps: Int32Array = Int32Array.from([])): GaloisKeys {\n        try {\n          const keys = GaloisKeys()\n          _instance.createGaloisKeys(steps, keys.instance)\n          return keys\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns Galois keys as a serializable object. This function\n       * creates specific Galois keys that can be used to apply specific Galois\n       * automorphisms on encrypted data. The user can optionally give an input a vector\n       * of desired Galois rotation step counts, where negative step counts\n       * correspond to rotations to the right and positive step counts correspond\n       * to rotations to the left. A step count of zero can be used to indicate\n       * a column rotation in the BFV scheme complex conjugation in the CKKS scheme.\n       * Half of the key data is pseudo-randomly generated from a seed to reduce\n       * the object size. The resulting serializable object cannot be used\n       * directly and is meant to be serialized for the size reduction to have an\n       * impact.\n       *\n       * @function\n       * @name KeyGenerator#createGaloisKeysSerializable\n       * @param {Int32Array} [steps=Int32Array.from([])] Specific Galois Elements to generate\n       * @returns {Serializable<GaloisKeys>} Base64 encoded string\n       */\n      createGaloisKeysSerializable(\n        steps: Int32Array = Int32Array.from([])\n      ): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.createGaloisKeysSerializable(steps)\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const KeyGeneratorInit = ({\n  loader\n}: LoaderOptions): KeyGeneratorDependencies => {\n  const library: Library = loader.library\n  return KeyGeneratorConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type MemoryPoolHandleDependencies = {\n  (): MemoryPoolHandleConstructorOptions\n}\n\nexport type MemoryPoolHandleConstructorOptions = {\n  (): MemoryPoolHandle\n}\n\nexport type MemoryPoolHandle = {\n  readonly global: any\n  readonly threadLocal: any\n}\n\nconst MemoryPoolHandleConstructor =\n  (library: Library): MemoryPoolHandleDependencies =>\n  (): MemoryPoolHandleConstructorOptions =>\n  (): MemoryPoolHandle => {\n    // Static methods\n    const _global = library.MemoryPoolHandle.MemoryPoolHandleGlobal\n    const _threadLocal = library.MemoryPoolHandle.MemoryPoolHandleThreadLocal\n\n    /**\n     * @implements MemoryPoolHandle\n     */\n\n    /**\n     * @interface MemoryPoolHandle\n     */\n    return {\n      /**\n       * The MemoryPoolHandle pointing to the global memory pool.\n       *\n       * @readonly\n       * @name MemoryPoolHandle.global\n       * @type {MemoryPoolHandle.global}\n       */\n      get global() {\n        /**\n         * @typedef {MemoryPoolHandle.global} MemoryPoolHandle.global\n         */\n        return _global()\n      },\n\n      /**\n       * The MemoryPoolHandle pointing to the thread-local memory pool.\n       *\n       * @readonly\n       * @name MemoryPoolHandle.threadLocal\n       * @type {MemoryPoolHandle.threadLocal}\n       */\n      get threadLocal() {\n        /**\n         * @typedef {MemoryPoolHandle.threadLocal} MemoryPoolHandle.threadLocal\n         */\n        return _threadLocal()\n      }\n    }\n  }\n\nexport const MemoryPoolHandleInit = ({\n  loader\n}: LoaderOptions): MemoryPoolHandleDependencies => {\n  const library: Library = loader.library\n  return MemoryPoolHandleConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\n\nexport type ModulusDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type ModulusDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: ModulusDependencyOptions): ModulusConstructorOptions\n}\n\nexport type ModulusConstructorOptions = {\n  (value: bigint): Modulus\n}\n\nexport type Modulus = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly setValue: (value: bigint) => void\n  readonly value: bigint\n  readonly bitCount: number\n  readonly isZero: boolean\n  readonly isPrime: boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (encoded: string) => void\n  readonly loadArray: (array: Uint8Array) => void\n}\n\nconst ModulusConstructor =\n  (library: Library): ModulusDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: ModulusDependencyOptions): ModulusConstructorOptions =>\n  (value: bigint): Modulus => {\n    // Static methods\n    const Constructor = library.Modulus\n\n    let _instance = createModulus(value)\n\n    function createModulus(value: bigint) {\n      try {\n        const inst = new Constructor()\n        inst.setValue(value.toString())\n        return inst\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n\n    /**\n     * @implements Modulus\n     */\n\n    /**\n     * @interface Modulus\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Modulus#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name Modulus#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Modulus#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Loads a Modulus from a string representing an uint64 value.\n       *\n       * @function\n       * @name Modulus#setValue\n       * @param {BigInt} value BigInt value to set\n       */\n      setValue(value: bigint) {\n        try {\n          _instance.setValue(value.toString())\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The value of the current Modulus as a BigInt.\n       *\n       * @readonly\n       * @name Modulus#value\n       * @type {BigInt}\n       */\n      get value() {\n        // eslint-disable-next-line no-undef\n        return BigInt(_instance.value())\n      },\n\n      /**\n       * The significant bit count of the value of the current Modulus.\n       *\n       * @readonly\n       * @name Modulus#bitCount\n       * @type {number}\n       */\n      get bitCount() {\n        return _instance.bitCount()\n      },\n\n      /**\n       * Whether the value of the current Modulus is zero.\n       *\n       * @readonly\n       * @name Modulus#isZero\n       * @type {boolean}\n       */\n      get isZero() {\n        return _instance.isZero()\n      },\n\n      /**\n       * Whether the value of the current Modulus is a prime number.\n       *\n       * @readonly\n       * @name Modulus#isPrime\n       * @type {boolean}\n       */\n      get isPrime() {\n        return _instance.isPrime()\n      },\n\n      /**\n       * Save the Modulus as a base64 string\n       *\n       * @function\n       * @name Modulus#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the Modulus as a binary Uint8Array\n       *\n       * @function\n       * @name Modulus#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the Modulus in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a Modulus from a base64 string\n       *\n       * @function\n       * @name Modulus#load\n       * @param {string} encoded Base64 encoded string\n       */\n      load(encoded: string) {\n        try {\n          _instance.loadFromString(encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a Modulus from an Uint8Array holding binary data\n       *\n       * @function\n       * @name Modulus#loadArray\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(array: Uint8Array) {\n        try {\n          _instance.loadFromArray(array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const ModulusInit = ({ loader }: LoaderOptions): ModulusDependencies => {\n  const library: Library = loader.library\n  return ModulusConstructor(library)\n}\n","import { LoaderOptions, Instance, Library } from './seal'\nimport { Exception, SealError } from './exception'\n\nexport type ParmsIdTypeDependencyOptions = {\n  readonly Exception: Exception\n}\n\nexport type ParmsIdTypeDependencies = {\n  ({ Exception }: ParmsIdTypeDependencyOptions): ParmsIdTypeConstructorOptions\n}\n\nexport type ParmsIdTypeConstructorOptions = {\n  (): ParmsIdType\n}\n\nexport type ParmsIdType = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly values: BigUint64Array\n}\n\nconst ParmsIdTypeConstructor =\n  (library: Library): ParmsIdTypeDependencies =>\n  ({\n    Exception\n  }: ParmsIdTypeDependencyOptions): ParmsIdTypeConstructorOptions =>\n  (): ParmsIdType => {\n    const Constructor = library.ParmsIdType\n\n    let _instance: Instance\n\n    /**\n     * @implements ParmsIdType\n     */\n\n    /**\n     * @interface ParmsIdType\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name ParmsIdType#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name ParmsIdType#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name ParmsIdType#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * The values of the current ParmsIdType as an Array of BigInts.\n       *\n       * @readonly\n       * @name ParmsIdType#values\n       * @type {BigUint64Array}\n       */\n      get values() {\n        try {\n          const instance = _instance.values()\n          return BigUint64Array.from(instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const ParmsIdTypeInit = ({\n  loader\n}: LoaderOptions): ParmsIdTypeDependencies => {\n  const library: Library = loader.library\n  return ParmsIdTypeConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\nimport { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { VectorConstructorOptions } from './vector'\nimport { INVALID_PLAIN_CONSRUCTOR_OPTIONS } from './constants'\nexport type PlainTextDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type PlainTextDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: PlainTextDependencyOptions): PlainTextConstructorOptions\n}\n\nexport type PlainTextConstructorOptions = {\n  ({\n    capacity,\n    coeffCount,\n    pool\n  }?: {\n    capacity?: number\n    coeffCount?: number\n    pool?: MemoryPoolHandle\n  }): PlainText\n}\n\nexport type PlainText = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly reserve: (capacity: number) => void\n  readonly shrinkToFit: () => void\n  readonly release: () => void\n  readonly resize: (coeffCount: number) => void\n  readonly setZero: () => void\n  readonly isZero: boolean\n  readonly capacity: number\n  readonly coeffCount: number\n  readonly significantCoeffCount: number\n  readonly nonzeroCoeffCount: number\n  readonly toPolynomial: () => string\n  readonly isNttForm: boolean\n  readonly parmsId: ParmsIdType\n  readonly scale: number\n  readonly setScale: (scale: number) => void\n  readonly pool: MemoryPoolHandle\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (plain: PlainText) => void\n  readonly clone: () => PlainText\n  readonly move: (plain: PlainText) => void\n}\n\nconst PlainTextConstructor =\n  (library: Library): PlainTextDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: PlainTextDependencyOptions): PlainTextConstructorOptions =>\n  ({\n    capacity,\n    coeffCount,\n    pool = MemoryPoolHandle.global\n  } = {}): PlainText => {\n    // Static methods\n    const Constructor = library.Plaintext\n\n    let _instance = construct({\n      capacity,\n      coeffCount,\n      pool\n    })\n\n    function construct({\n      capacity,\n      coeffCount,\n      pool = MemoryPoolHandle.global\n    }: {\n      capacity?: number\n      coeffCount?: number\n      pool?: MemoryPoolHandle\n    }) {\n      try {\n        if (capacity === undefined && coeffCount === undefined) {\n          return new Constructor(pool)\n        } else if (capacity === undefined && coeffCount !== undefined) {\n          return new Constructor(coeffCount, pool)\n        } else if (capacity !== undefined && coeffCount !== undefined) {\n          return new Constructor(capacity, coeffCount, pool)\n        } else {\n          throw new Error(INVALID_PLAIN_CONSRUCTOR_OPTIONS)\n        }\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements PlainText\n     */\n\n    /**\n     * @interface PlainText\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name PlainText#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name PlainText#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name PlainText#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Allocates enough memory to accommodate the backing array of a plaintext\n       * with given capacity.\n       *\n       * @function\n       * @name PlainText#reserve\n       * @param {number} capacity The capacity to reserve\n       */\n      reserve(capacity: number) {\n        try {\n          return _instance.reserve(capacity)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Allocates enough memory to accommodate the backing array of the current\n       * PlainText and copies it over to the new location. This function is meant\n       * to reduce the memory use of the PlainText to smallest possible and can be\n       * particularly important after modulus switching.\n       *\n       * @function\n       * @name PlainText#shrinkToFit\n       */\n      shrinkToFit() {\n        _instance.shrinkToFit()\n      },\n\n      /**\n       * Resets the PlainText. This function releases any memory allocated by the\n       * PlainText, returning it to the memory pool.\n       *\n       * @function\n       * @name PlainText#release\n       */\n      release() {\n        _instance.release()\n      },\n\n      /**\n       * Resizes the PlainText to have a given coefficient count. The PlainText\n       * is automatically reallocated if the new coefficient count does not fit in\n       * the current capacity.\n       *\n       * @function\n       * @name PlainText#resize\n       * @param {number} coeffCount The number of coefficients in the plaintext polynomial\n       */\n      resize(coeffCount: number) {\n        try {\n          _instance.resize(coeffCount)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sets the PlainText polynomial to zero.\n       *\n       * @function\n       * @name PlainText#setZero\n       */\n      setZero() {\n        _instance.setZero()\n      },\n\n      /**\n       * Whether the current PlainText polynomial has all zero coefficients.\n       *\n       * @readonly\n       * @name PlainText#isZero\n       * @type {boolean}\n       */\n      get isZero() {\n        return _instance.isZero()\n      },\n\n      /**\n       * The capacity of the current allocation.\n       *\n       * @readonly\n       * @name PlainText#capacity\n       * @type {number}\n       */\n      get capacity() {\n        return _instance.capacity()\n      },\n\n      /**\n       * The coefficient count of the current PlainText polynomial.\n       *\n       * @readonly\n       * @name PlainText#coeffCount\n       * @type {number}\n       */\n      get coeffCount() {\n        return _instance.coeffCount()\n      },\n\n      /**\n       * The significant coefficient count of the current PlainText polynomial.\n       *\n       * @readonly\n       * @name PlainText#significantCoeffCount\n       * @type {number}\n       */\n      get significantCoeffCount() {\n        return _instance.significantCoeffCount()\n      },\n\n      /**\n       * Returns the non-zero coefficient count of the current PlainText polynomial.\n       *\n       * @readonly\n       * @name PlainText#nonzeroCoeffCount\n       * @type {number}\n       */\n      get nonzeroCoeffCount() {\n        return _instance.nonzeroCoeffCount()\n      },\n\n      /**\n       * Returns a human-readable string description of the PlainText polynomial.\n       *\n       * The returned string is of the form \"7FFx^3 + 1x^1 + 3\" with a format\n       * summarized by the following:\n       * 1. Terms are listed in order of strictly decreasing exponent\n       * 2. Coefficient values are non-negative and in hexadecimal format (hexadecimal\n       * letters are in upper-case)\n       * 3. Exponents are positive and in decimal format\n       * 4. Zero coefficient terms (including the constant term) are omitted unless\n       * the polynomial is exactly 0 (see rule 9)\n       * 5. Term with the exponent value of one is written as x^1\n       * 6. Term with the exponent value of zero (the constant term) is written as\n       * just a hexadecimal number without x or exponent\n       * 7. Terms are separated exactly by <space>+<space>\n       * 8. Other than the +, no other terms have whitespace\n       * 9. If the polynomial is exactly 0, the string \"0\" is returned\n       *\n       * @function\n       * @name PlainText#toPolynomial\n       * @throws std::invalid_argument if the PlainText is in NTT transformed form\n       * @returns {string} Polynomial string\n       */\n      toPolynomial(): string {\n        try {\n          return _instance.toPolynomial()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Whether the PlainText is in NTT form.\n       *\n       * @readonly\n       * @name PlainText#isNttForm\n       * @type {boolean}\n       */\n      get isNttForm() {\n        return _instance.isNttForm()\n      },\n\n      /**\n       * The reference to parmsId of the PlainText. The parmsId must remain zero unless the\n       * PlainText polynomial is in NTT form.\n       *\n       * @see {@link EncryptionParameters} for more information about parmsId.\n       *\n       * @readonly\n       * @name PlainText#parmsId\n       * @type {ParmsIdType}\n       */\n      get parmsId() {\n        const parms = ParmsIdType()\n        parms.inject(_instance.parmsId())\n        return parms\n      },\n\n      /**\n       * The reference to the scale. This is only needed when using the CKKS\n       * encryption scheme. The user should have little or no reason to ever change\n       * the scale by hand.\n       *\n       * @readonly\n       * @name PlainText#scale\n       * @type {number}\n       */\n      get scale() {\n        return _instance.scale()\n      },\n\n      /**\n       * Sets the PlainText scale. This is only needed when using the\n       * CKKS encryption scheme. The user should have little or no reason to ever\n       * change the scale by hand.\n       *\n       * @function\n       * @name PlainText#setScale\n       * @param {number} scale The scale to set\n       */\n      setScale(scale: number) {\n        _instance.setScale(scale)\n      },\n\n      /**\n       * The currently used MemoryPoolHandle.\n       *\n       * @readonly\n       * @name PlainText#pool\n       * @type {MemoryPoolHandle}\n       */\n      get pool() {\n        return _instance.pool()\n      },\n\n      /**\n       * Save the PlainText to a base64 string\n       *\n       * @function\n       * @name PlainText#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the PlainText as a binary Uint8Array\n       *\n       * @function\n       * @name PlainText#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the PlainText in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a PlainText from a base64 string\n       *\n       * @function\n       * @name PlainText#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a PlainText from an Uint8Array holding binary data\n       *\n       * @function\n       * @name PlainText#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing PlainText and overwrite this instance\n       *\n       * @function\n       * @name PlainText#copy\n       * @param {PlainText} plain PlainText to copy\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const plainTextB = seal.PlainText()\n       * plainTextB.copy(plainTextA)\n       * // plainTextB holds a copy of plainTextA\n       */\n      copy(plain: PlainText) {\n        try {\n          _instance.copy(plain.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this PlainText\n       *\n       * @function\n       * @name PlainText#clone\n       * @returns {PlainText}\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const plainTextB = plainTextA.clone()\n       * // plainTextB holds a copy of plainTextA\n       */\n      clone(): PlainText {\n        try {\n          const clonedInstance = _instance.clone()\n          const plain = PlainTextConstructor(library)({\n            Exception,\n            ComprModeType,\n            ParmsIdType,\n            MemoryPoolHandle,\n            Vector\n          })()\n          plain.unsafeInject(clonedInstance)\n          return plain\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a PlainText into this one and delete the old reference\n       *\n       * @function\n       * @name PlainText#move\n       * @param {PlainText} plain PlainText to move\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const plainTextB = seal.PlainText()\n       * plainTextB.move(plainTextA)\n       * // plainTextB holds a the instance of plainTextA.\n       * // plainTextA no longer holds an instance\n       */\n      move(plain: PlainText) {\n        try {\n          _instance.move(plain.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          plain.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const PlainTextInit = ({\n  loader\n}: LoaderOptions): PlainTextDependencies => {\n  const library: Library = loader.library\n  return PlainTextConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\nimport { Exception, SealError } from './exception'\nimport { Modulus, ModulusConstructorOptions } from './modulus'\nimport { Vector, VectorConstructorOptions } from './vector'\n\nexport type PlainModulusDependencyOptions = {\n  readonly Exception: Exception\n  readonly Modulus: ModulusConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type PlainModulusDependencies = {\n  ({\n    Exception,\n    Modulus,\n    Vector\n  }: PlainModulusDependencyOptions): PlainModulusConstructorOptions\n}\n\nexport type PlainModulusConstructorOptions = {\n  (): PlainModulus\n}\n\nexport type PlainModulus = {\n  readonly Batching: (polyModulusDegree: number, bitSize: number) => Modulus\n  readonly BatchingVector: (\n    polyModulusDegree: number,\n    bitSizes: Int32Array\n  ) => Vector\n}\n\nconst PlainModulusConstructor =\n  (library: Library): PlainModulusDependencies =>\n  ({\n    Exception,\n    Modulus,\n    Vector\n  }: PlainModulusDependencyOptions): PlainModulusConstructorOptions =>\n  (): PlainModulus => {\n    // Static methods\n    const _Batching = library.PlainModulus.Batching\n    const _BatchingVector = library.PlainModulus.BatchingVector\n\n    /**\n     * @implements PlainModulus\n     */\n\n    /**\n     * @interface PlainModulus\n     */\n    return {\n      /**\n       * Creates a prime number PlainModulus for use as plainPlainModulus encryption\n       * parameter that supports batching with a given polyPlainModulusDegree.\n       *\n       * @function\n       * @name PlainModulus.Batching\n       * @param {number} polyModulusDegree The degree of the polynomial modulus\n       * @param {number} bitSize The bit-size of the desired prime number\n       * @returns {Modulus} A PlainModulus containing the prime number\n       */\n      Batching(polyModulusDegree: number, bitSize: number): Modulus {\n        try {\n          const smallMod = Modulus(BigInt(0))\n          smallMod.inject(_Batching(polyModulusDegree, bitSize))\n          return smallMod\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Creates several prime number PlainModulus elements that can be used as\n       * plainPlainModulus encryption parameters, each supporting batching with a given\n       * polyPlainModulusDegree.\n       *\n       * @function\n       * @name PlainModulus.BatchingVector\n       * @param {Number} polyPlainModulusDegree The degree of the polynomial modulus\n       * @param {Int32Array} bitSizes Int32Array containing values representing bit-sizes of primes\n       * @returns {Vector} Vector of Modulus containing prime numbers\n       */\n      BatchingVector(\n        polyPlainModulusDegree: number,\n        bitSizes: Int32Array\n      ): Vector {\n        try {\n          const vectBitSizes = Vector()\n          vectBitSizes.from(bitSizes)\n          const vect = _BatchingVector(\n            polyPlainModulusDegree,\n            vectBitSizes.instance\n          )\n          vectBitSizes.delete()\n          return vect\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const PlainModulusInit = ({\n  loader\n}: LoaderOptions): PlainModulusDependencies => {\n  const library: Library = loader.library\n  return PlainModulusConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\n\nexport type PublicKeyDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type PublicKeyDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: PublicKeyDependencyOptions): PublicKeyConstructorOptions\n}\n\nexport type PublicKeyConstructorOptions = {\n  (): PublicKey\n}\n\nexport type PublicKey = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: PublicKey) => void\n  readonly clone: () => PublicKey\n  readonly move: (key: PublicKey) => void\n}\n\nconst PublicKeyConstructor =\n  (library: Library): PublicKeyDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: PublicKeyDependencyOptions): PublicKeyConstructorOptions =>\n  (): PublicKey => {\n    const Constructor = library.PublicKey\n    let _instance = new Constructor()\n\n    /**\n     * @implements PublicKey\n     */\n\n    /**\n     * @interface PublicKey\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name PublicKey#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name PublicKey#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name PublicKey#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name PublicKey#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the PublicKey as a binary Uint8Array\n       *\n       * @function\n       * @name PublicKey#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the PublicKey in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a PublicKey from a base64 string\n       *\n       * @function\n       * @name PublicKey#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a PublicKey from an Uint8Array holding binary data\n       *\n       * @function\n       * @name PublicKey#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing PublicKey and overwrite this instance\n       *\n       * @function\n       * @name PublicKey#copy\n       * @param {PublicKey} key PublicKey to copy\n       * @example\n       * const keyA = keyGenerator.createPublicKey()\n       * const keyB = seal.PublicKey()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: PublicKey) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this PublicKey\n       *\n       * @function\n       * @name PublicKey#clone\n       * @returns {PublicKey}\n       * @example\n       * const keyA = keyGenerator.createPublicKey()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): PublicKey {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = PublicKeyConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a PublicKey into this one and delete the old reference\n       *\n       * @function\n       * @name PublicKey#move\n       * @param {PublicKey} key PublicKey to move\n       * @example\n       * const keyA = keyGenerator.createPublicKey()\n       * const keyB = seal.PublicKey()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: PublicKey) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const PublicKeyInit = ({\n  loader\n}: LoaderOptions): PublicKeyDependencies => {\n  const library: Library = loader.library\n  return PublicKeyConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\n\nexport type RelinKeysDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type RelinKeysDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: RelinKeysDependencyOptions): RelinKeysConstructorOptions\n}\n\nexport type RelinKeysConstructorOptions = {\n  (): RelinKeys\n}\n\nexport type RelinKeys = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly size: number\n  readonly getIndex: (keyPower: number) => number\n  readonly hasKey: (keyPower: number) => boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: RelinKeys) => void\n  readonly clone: () => RelinKeys\n  readonly move: (key: RelinKeys) => void\n}\n\nconst RelinKeysConstructor =\n  (library: Library): RelinKeysDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: RelinKeysDependencyOptions): RelinKeysConstructorOptions =>\n  (): RelinKeys => {\n    const Constructor = library.RelinKeys\n    let _instance = new Constructor()\n\n    /**\n     * @implements RelinKeys\n     */\n\n    /**\n     * @interface RelinKeys\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name RelinKeys#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name RelinKeys#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name RelinKeys#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Returns the current number of keyswitching keys. Only keys that are\n       * non-empty are counted.\n       *\n       * @readonly\n       * @name RelinKeys#size\n       * @type {number}\n       */\n      get size() {\n        return _instance.size()\n      },\n\n      /**\n       * Returns the index of a relinearization key in the backing KSwitchKeys\n       * instance that corresponds to the given secret key power, assuming that\n       * it exists in the backing KSwitchKeys.\n       *\n       * @function\n       * @name RelinKeys#getIndex\n       * @param {number} keyPower The power of the secret key\n       * @returns {number} The index of the relin key\n       */\n      getIndex(keyPower: number): number {\n        try {\n          return _instance.getIndex(keyPower)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Returns whether a relinearization key corresponding to a given power of\n       * the secret key exists.\n       *\n       * @function\n       * @name RelinKeys#hasKey\n       * @param {number} keyPower The power of the secret key\n       * @returns {boolean} True if the power exists\n       */\n      hasKey(keyPower: number): boolean {\n        try {\n          return _instance.hasKey(keyPower)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name RelinKeys#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the RelinKeys as a binary Uint8Array\n       *\n       * @function\n       * @name RelinKeys#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the RelinKeys in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a RelinKeys from a base64 string\n       *\n       * @function\n       * @name RelinKeys#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a RelinKeys from an Uint8Array holding binary data\n       *\n       * @function\n       * @name RelinKeys#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing RelinKeys and overwrite this instance\n       *\n       * @function\n       * @name RelinKeys#copy\n       * @param {RelinKeys} key RelinKeys to copy\n       * @example\n       * const keyA = keyGenerator.createRelinKeys()\n       * const keyB = seal.RelinKeys()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: RelinKeys) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this RelinKeys\n       *\n       * @function\n       * @name RelinKeys#clone\n       * @returns {RelinKeys}\n       * @example\n       * const keyA = keyGenerator.createRelinKeys()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): RelinKeys {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = RelinKeysConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a RelinKeys into this one and delete the old reference\n       *\n       * @function\n       * @name RelinKeys#move\n       * @param {RelinKeys} key RelinKeys to move\n       * @example\n       * const keyA = keyGenerator.createRelinKeys()\n       * const keyB = seal.RelinKeys()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: RelinKeys) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const RelinKeysInit = ({\n  loader\n}: LoaderOptions): RelinKeysDependencies => {\n  const library: Library = loader.library\n  return RelinKeysConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type SchemeTypeDependencies = {\n  (): SchemeTypeConstructorOptions\n}\n\nexport type SchemeTypeConstructorOptions = {\n  (): SchemeType\n}\n\nexport type SchemeType = {\n  readonly none: any\n  readonly bfv: any\n  readonly ckks: any\n  readonly bgv: any\n}\n\nconst SchemeTypeConstructor =\n  (library: Library): SchemeTypeDependencies =>\n  (): SchemeTypeConstructorOptions =>\n  (): SchemeType => {\n    // Static methods\n    const _none = library.SchemeType.none\n    const _bfv = library.SchemeType.bfv\n    const _ckks = library.SchemeType.ckks\n    const _bgv = library.SchemeType.bgv\n\n    /**\n     * @implements SchemeType\n     */\n\n    /**\n     * @interface SchemeType\n     */\n    return {\n      /**\n       * Return the 'none' scheme type\n       *\n       * @readonly\n       * @name SchemeType.none\n       * @type {SchemeType.none}\n       */\n      get none() {\n        /**\n         * @typedef {SchemeType.none} SchemeType.none\n         */\n        return _none\n      },\n\n      /**\n       * Return the 'bfv' scheme type\n       *\n       * @readonly\n       * @name SchemeType.bfv\n       * @type {SchemeType.bfv}\n       */\n      get bfv() {\n        /**\n         * @typedef {SchemeType.bfv} SchemeType.bfv\n         */\n        return _bfv\n      },\n\n      /**\n       * Return the 'ckks' scheme type\n       *\n       * @readonly\n       * @name SchemeType.ckks\n       * @type {SchemeType.ckks}\n       */\n      get ckks() {\n        /**\n         * @typedef {SchemeType.ckks} SchemeType.ckks\n         */\n        return _ckks\n      },\n\n      /**\n       * Return the 'bgv' scheme type\n       *\n       * @readonly\n       * @name SchemeType.bgv\n       * @type {SchemeType.bgv}\n       */\n      get bgv() {\n        /**\n         * @typedef {SchemeType.bgv} SchemeType.bgv\n         */\n        return _bgv\n      }\n    }\n  }\n\nexport const SchemeTypeInit = ({\n  loader\n}: LoaderOptions): SchemeTypeDependencies => {\n  const library: Library = loader.library\n  return SchemeTypeConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\n\nexport type SecretKeyDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type SecretKeyDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: SecretKeyDependencyOptions): SecretKeyConstructorOptions\n}\n\nexport type SecretKeyConstructorOptions = {\n  (): SecretKey\n}\n\nexport type SecretKey = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: SecretKey) => void\n  readonly clone: () => SecretKey\n  readonly move: (key: SecretKey) => void\n}\n\nconst SecretKeyConstructor =\n  (library: Library): SecretKeyDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: SecretKeyDependencyOptions): SecretKeyConstructorOptions =>\n  (): SecretKey => {\n    const Constructor = library.SecretKey\n    let _instance = new Constructor()\n\n    /**\n     * @implements SecretKey\n     */\n\n    /**\n     * @interface SecretKey\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name SecretKey#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name SecretKey#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name SecretKey#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name SecretKey#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the SecretKey as a binary Uint8Array\n       *\n       * @function\n       * @name SecretKey#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the SecretKey in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a SecretKey from a base64 string\n       *\n       * @function\n       * @name SecretKey#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a SecretKey from an Uint8Array holding binary data\n       *\n       * @function\n       * @name SecretKey#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing SecretKey and overwrite this instance\n       *\n       * @function\n       * @name SecretKey#copy\n       * @param {SecretKey} key SecretKey to copy\n       * @example\n       * const keyA = keyGenerator.secretKey()\n       * const keyB = seal.SecretKey()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: SecretKey) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this SecretKey\n       *\n       * @function\n       * @name SecretKey#clone\n       * @returns {SecretKey}\n       * @example\n       * const keyA = keyGenerator.secretKey()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): SecretKey {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = SecretKeyConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a SecretKey into this one and delete the old reference\n       *\n       * @function\n       * @name SecretKey#move\n       * @param {SecretKey} key SecretKey to move\n       * @example\n       * const keyA = keyGenerator.secretKey()\n       * const keyB = seal.SecretKey()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: SecretKey) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const SecretKeyInit = ({\n  loader\n}: LoaderOptions): SecretKeyDependencies => {\n  const library: Library = loader.library\n  return SecretKeyConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type SecurityLevelDependencies = {\n  (): SecurityLevelConstructorOptions\n}\n\nexport type SecurityLevelConstructorOptions = {\n  (): SecurityLevel\n}\n\nexport type SecurityLevel = {\n  readonly none: any\n  readonly tc128: any\n  readonly tc192: any\n  readonly tc256: any\n}\n\nconst SecurityLevelConstructor =\n  (library: Library): SecurityLevelDependencies =>\n  (): SecurityLevelConstructorOptions =>\n  (): SecurityLevel => {\n    // Static methods\n    const _none = library.SecLevelType.none\n    const _tc128 = library.SecLevelType.tc128\n    const _tc192 = library.SecLevelType.tc192\n    const _tc256 = library.SecLevelType.tc256\n\n    /**\n     * @implements SecurityLevel\n     */\n\n    /**\n     * @interface SecurityLevel\n     */\n    return {\n      /**\n       * Returns the 'none' security level\n       *\n       * @readonly\n       * @name SecurityLevel.none\n       * @type {SecurityLevel.none}\n       */\n      get none() {\n        /**\n         * @typedef {SecurityLevel.none} SecurityLevel.none\n         */\n        return _none\n      },\n\n      /**\n       * Returns the '128' security level\n       *\n       * @readonly\n       * @name SecurityLevel.tc128\n       * @type {SecurityLevel.tc128}\n       */\n      get tc128() {\n        /**\n         * @typedef {SecurityLevel.tc128} SecurityLevel.tc128\n         */\n        return _tc128\n      },\n\n      /**\n       * Returns the '192' security level\n       *\n       * @readonly\n       * @name SecurityLevel.tc192\n       * @type {SecurityLevel.tc192}\n       */\n      get tc192() {\n        /**\n         * @typedef {SecurityLevel.tc192} SecurityLevel.tc192\n         */\n        return _tc192\n      },\n\n      /**\n       * Returns the '256' security level\n       *\n       * @readonly\n       * @name SecurityLevel.tc256\n       * @type {SecurityLevel.tc256}\n       */\n      get tc256() {\n        /**\n         * @typedef {SecurityLevel.tc256} SecurityLevel.tc256\n         */\n        return _tc256\n      }\n    }\n  }\nexport const SecurityLevelInit = ({\n  loader\n}: LoaderOptions): SecurityLevelDependencies => {\n  const library: Library = loader.library\n  return SecurityLevelConstructor(library)\n}\n","import { LoaderOptions, Instance, Library } from './seal'\nimport { Exception, SealError } from './exception'\nimport { INSTANCE_DELETED, UNSUPPORTED_VECTOR_TYPE } from './constants'\n\nexport type VectorDependencyOptions = {\n  readonly Exception: Exception\n}\n\nexport type VectorDependencies = {\n  ({ Exception }: VectorDependencyOptions): VectorConstructorOptions\n}\n\nexport type VectorConstructorOptions = {\n  (): Vector\n}\n\nexport type Vector = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly from: (array: VectorTypes, type?: StringTypes) => Instance\n  readonly type: string\n  readonly setType: (type: StringTypes) => void\n  readonly size: number\n  readonly getValue: (index: number) => number\n  readonly resize: (size: number, fill: number) => void\n  readonly toArray: () => VectorTypes\n}\n\nexport type VectorTypes =\n  | Uint8Array\n  | Int32Array\n  | Uint32Array\n  | Float64Array\n  | BigInt64Array\n  | BigUint64Array\n\nexport type StringTypes =\n  | 'Uint8Array'\n  | 'Int32Array'\n  | 'Uint32Array'\n  | 'Float64Array'\n  | 'BigInt64Array'\n  | 'BigUint64Array'\n  | 'Modulus'\n\nconst VectorConstructor =\n  (library: Library): VectorDependencies =>\n  ({ Exception }: VectorDependencyOptions): VectorConstructorOptions =>\n  (): Vector => {\n    // Static methods\n    const _vecFromArrayUint8 = library.vecFromArrayUint8\n    const _vecFromArrayUint32 = library.vecFromArrayUint32\n    const _vecFromArrayInt32 = library.vecFromArrayInt32\n    const _vecFromArrayFloat64 = library.vecFromArrayFloat64\n    const _vecFromArrayBigInt64 = library.vecFromArrayBigInt64\n    const _vecFromArrayBigUint64 = library.vecFromArrayBigUint64\n    const _vecFromArrayModulus = library.vecFromArrayModulus\n    const _jsArrayUint8FromVec = library.jsArrayUint8FromVec\n    const _jsArrayUint32FromVec = library.jsArrayUint32FromVec\n    const _jsArrayInt32FromVec = library.jsArrayInt32FromVec\n    const _jsArrayFloat64FromVec = library.jsArrayFloat64FromVec\n    const _jsArrayStringFromVecInt64 = library.jsArrayStringFromVecInt64\n    const _jsArrayStringFromVecUint64 = library.jsArrayStringFromVecUint64\n    const _jsArrayStringFromVecModulus = library.jsArrayStringFromVecModulus\n\n    let _instance: Instance\n    let _type: StringTypes\n    /**\n     * @implements Vector\n     */\n\n    /**\n     * @interface Vector\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Vector#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Vector#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Vector#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Converts a JS TypedArray into a vector\n       *\n       * @function\n       * @name Vector#from\n       * @param {VectorTypes} array The TypedArray to convert\n       * @param {StringTypes} [type] An optional type override - useful for 'Modulus' only\n       */\n      from(array: VectorTypes, type?: StringTypes) {\n        try {\n          _type = type ? type : (array.constructor.name as StringTypes)\n          switch (_type) {\n            case 'Uint8Array':\n              _instance = _vecFromArrayUint8(array)\n              break\n            case 'Int32Array':\n              _instance = _vecFromArrayInt32(array)\n              break\n            case 'Uint32Array':\n              _instance = _vecFromArrayUint32(array)\n              break\n            case 'Float64Array':\n              _instance = _vecFromArrayFloat64(array)\n              break\n            case 'BigInt64Array':\n              _instance = _vecFromArrayBigInt64(array.toString().split(','))\n              break\n            case 'BigUint64Array':\n              _instance = _vecFromArrayBigUint64(array.toString().split(','))\n              break\n            case 'Modulus':\n              _instance = _vecFromArrayModulus(array.toString().split(','))\n              break\n            default:\n              throw new Error(UNSUPPORTED_VECTOR_TYPE)\n          }\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The Vector type\n       *\n       * @readonly\n       * @name Vector#type\n       */\n      get type(): StringTypes {\n        return _type\n      },\n\n      /**\n       * Set the Vector type\n       *\n       * @function\n       * @name Vector#setType\n       * @param {StringTypes} type the type of the vector\n       */\n      setType(type: StringTypes) {\n        _type = type\n      },\n\n      /**\n       * The vector size\n       *\n       * @readonly\n       * @name Vector#size\n       * @type {number}\n       */\n      get size(): number {\n        return _instance.size()\n      },\n\n      /**\n       * Get a value pointed to by the specified index\n       *\n       * @function\n       * @name Vector#getValue\n       * @param {number} index Index of the Vector\n       * @returns {number} Value of the element in the Vector pointed to by the index\n       */\n      getValue(index: number): number {\n        try {\n          return _instance.get(index)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Resizes a vector to the given size\n       *\n       * @function\n       * @name Vector#resize\n       * @param {number} size number of elements to resize\n       * @param {number} fill Data to fill the vector with\n       */\n      resize(size: number, fill: number) {\n        try {\n          _instance.resize(size, fill)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy a vector's data into a Typed Array\n       *\n       * Note: we cannot simply return a view on the underlying ArrayBuffer\n       * because WASM memory can grow and cause all the views to become\n       * neutered. We have to perform a hard copy to get data from WASM heap to JS.\n       *\n       * @function\n       * @name Vector#toArray\n       * @returns {VectorTypes} TypedArray containing values from the Vector\n       */\n      toArray(): VectorTypes {\n        if (!_instance) {\n          throw new Error(INSTANCE_DELETED)\n        }\n        switch (_type) {\n          case 'Uint8Array':\n            return Uint8Array.from(_jsArrayUint8FromVec(_instance))\n          case 'Int32Array':\n            return Int32Array.from(_jsArrayInt32FromVec(_instance))\n          case 'Uint32Array':\n            return Uint32Array.from(_jsArrayUint32FromVec(_instance))\n          case 'Float64Array':\n            return Float64Array.from(_jsArrayFloat64FromVec(_instance))\n          case 'BigInt64Array':\n            return BigInt64Array.from(_jsArrayStringFromVecInt64(_instance))\n          case 'BigUint64Array':\n            return BigUint64Array.from(_jsArrayStringFromVecUint64(_instance))\n          case 'Modulus':\n            return BigUint64Array.from(_jsArrayStringFromVecModulus(_instance))\n          default:\n            throw new Error(UNSUPPORTED_VECTOR_TYPE)\n        }\n      }\n    }\n  }\n\nexport const VectorInit = ({ loader }: LoaderOptions): VectorDependencies => {\n  const library: Library = loader.library\n  return VectorConstructor(library)\n}\n","import { SEALLibrary } from './implementation/seal'\nimport sealLibrary from 'seal_allows_wasm_node'\nimport { Loader, createLoader } from './main/loader'\nimport { SEAL } from './main/seal'\n/**\n * Export a function which loads the proper build\n */\nconst loader = async (): Promise<Loader> => createLoader(sealLibrary)\n\n/**\n * Main export for node-seal\n */\nexport default async (): Promise<SEALLibrary> => SEAL(loader)\n","import { Library } from '../implementation/seal'\n\nexport type Loader = {\n  readonly library: Library\n}\n\n/**\n * Export a default function which instantiates the library\n * @param {Object} bin Emscripten library to initialize\n */\nexport const createLoader = async (\n  bin: () => Promise<Library>\n): Promise<Loader> => ({\n  library: await bin()\n})\n","import { SEALLibrary, SEALConstructor } from '../implementation/seal'\nimport { BatchEncoderInit } from '../implementation/batch-encoder'\nimport { CipherTextInit } from '../implementation/cipher-text'\nimport { CKKSEncoderInit } from '../implementation/ckks-encoder'\nimport { CoeffModulusInit } from '../implementation/coeff-modulus'\nimport { ComprModeTypeInit } from '../implementation/compr-mode-type'\nimport { ContextDataInit } from '../implementation/context-data'\nimport { ContextInit } from '../implementation/context'\nimport { DecryptorInit } from '../implementation/decryptor'\nimport { EncryptionParameterQualifiersInit } from '../implementation/encryption-parameter-qualifiers'\nimport { EncryptionParametersInit } from '../implementation/encryption-parameters'\nimport { EncryptorInit } from '../implementation/encryptor'\nimport { EvaluatorInit } from '../implementation/evaluator'\nimport { ExceptionInit } from '../implementation/exception'\nimport { GaloisKeysInit } from '../implementation/galois-keys'\nimport { KeyGeneratorInit } from '../implementation/key-generator'\nimport { MemoryPoolHandleInit } from '../implementation/memory-pool-handle'\nimport { ModulusInit } from '../implementation/modulus'\nimport { ParmsIdTypeInit } from '../implementation/parms-id-type'\nimport { PlainTextInit } from '../implementation/plain-text'\nimport { PlainModulusInit } from '../implementation/plain-modulus'\nimport { PublicKeyInit } from '../implementation/public-key'\nimport { RelinKeysInit } from '../implementation/relin-keys'\nimport { SchemeTypeInit } from '../implementation/scheme-type'\nimport { SecretKeyInit } from '../implementation/secret-key'\nimport { SecurityLevelInit } from '../implementation/security-level'\nimport { SerializableInit } from '../implementation/serializable'\nimport { VectorInit } from '../implementation/vector'\nimport { Loader } from './loader'\n\n/**\n * Main export for the library\n */\nexport const SEAL = async (\n  Loader: () => Promise<Loader>\n): Promise<SEALLibrary> => {\n  const loader = await Loader()\n  return SEALConstructor({\n    BatchEncoder: BatchEncoderInit({\n      loader\n    }),\n    CipherText: CipherTextInit({\n      loader\n    }),\n    CKKSEncoder: CKKSEncoderInit({\n      loader\n    }),\n    CoeffModulus: CoeffModulusInit({\n      loader\n    }),\n    ComprModeType: ComprModeTypeInit({\n      loader\n    }),\n    ContextData: ContextDataInit({\n      loader\n    }),\n    Context: ContextInit({\n      loader\n    }),\n    Decryptor: DecryptorInit({\n      loader\n    }),\n    EncryptionParameterQualifiers: EncryptionParameterQualifiersInit(),\n    EncryptionParameters: EncryptionParametersInit({\n      loader\n    }),\n    Encryptor: EncryptorInit({\n      loader\n    }),\n    Evaluator: EvaluatorInit({\n      loader\n    }),\n    Exception: ExceptionInit({\n      loader\n    }),\n    GaloisKeys: GaloisKeysInit({\n      loader\n    }),\n    KeyGenerator: KeyGeneratorInit({\n      loader\n    }),\n    MemoryPoolHandle: MemoryPoolHandleInit({\n      loader\n    }),\n    Modulus: ModulusInit({\n      loader\n    }),\n    ParmsIdType: ParmsIdTypeInit({\n      loader\n    }),\n    PlainText: PlainTextInit({\n      loader\n    }),\n    PlainModulus: PlainModulusInit({\n      loader\n    }),\n    PublicKey: PublicKeyInit({\n      loader\n    }),\n    RelinKeys: RelinKeysInit({\n      loader\n    }),\n    SchemeType: SchemeTypeInit({\n      loader\n    }),\n    SecretKey: SecretKeyInit({\n      loader\n    }),\n    SecurityLevel: SecurityLevelInit({\n      loader\n    }),\n    Serializable: SerializableInit(),\n    Vector: VectorInit({\n      loader\n    })\n  })\n}\n","import { Instance } from './seal'\nimport { SecurityLevel } from './security-level'\n\nexport type EncryptionParameterQualifiersDependencies = {\n  (): EncryptionParameterQualifiersConstructorOptions\n}\n\nexport type EncryptionParameterQualifiersConstructorOptions = {\n  (): EncryptionParameterQualifiers\n}\n\nexport type EncryptionParameterQualifiers = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly parametersSet: () => boolean\n  readonly usingFFT: boolean\n  readonly usingNTT: boolean\n  readonly usingBatching: boolean\n  readonly usingFastPlainLift: boolean\n  readonly usingDescendingModulusChain: boolean\n  readonly securityLevel: SecurityLevel\n}\n\nconst EncryptionParameterQualifiersConstructor =\n  (): EncryptionParameterQualifiersDependencies =>\n  (): EncryptionParameterQualifiersConstructorOptions =>\n  (): EncryptionParameterQualifiers => {\n    let _instance: Instance\n    /**\n     * @implements EncryptionParameterQualifiers\n     */\n\n    /**\n     * @interface EncryptionParameterQualifiers\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name EncryptionParameterQualifiers#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name EncryptionParameterQualifiers#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name EncryptionParameterQualifiers#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * If the encryption parameters are set in a way that is considered valid by\n       * Microsoft SEAL, the variable parameters_set is set to true.\n       *\n       * @function\n       * @name EncryptionParameterQualifiers#parametersSet\n       * @type {boolean}\n       */\n      parametersSet() {\n        return _instance.parametersSet()\n      },\n\n      /**\n       * Tells whether FFT can be used for polynomial multiplication. If the\n       * polynomial modulus is of the form X^N+1, where N is a power of two, then\n       * FFT can be used for fast multiplication of polynomials modulo the polynomial\n       * modulus. In this case the variable using_fft will be set to true. However,\n       * currently Microsoft SEAL requires this to be the case for the parameters\n       * to be valid. Therefore, parameters_set can only be true if using_fft is\n       * true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingFFT\n       * @type {boolean}\n       */\n      get usingFFT() {\n        return _instance.usingFFT\n      },\n\n      /**\n       * Tells whether NTT can be used for polynomial multiplication. If the primes\n       * in the coefficient modulus are congruent to 1 modulo 2N, where X^N+1 is the\n       * polynomial modulus and N is a power of two, then the number-theoretic\n       * transform (NTT) can be used for fast multiplications of polynomials modulo\n       * the polynomial modulus and coefficient modulus. In this case the variable\n       * using_ntt will be set to true. However, currently Microsoft SEAL requires\n       * this to be the case for the parameters to be valid. Therefore, parameters_set\n       * can only be true if using_ntt is true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingNTT\n       * @type {boolean}\n       */\n      get usingNTT() {\n        return _instance.usingNTT\n      },\n\n      /**\n       * Tells whether batching is supported by the encryption parameters. If the\n       * plaintext modulus is congruent to 1 modulo 2N, where X^N+1 is the polynomial\n       * modulus and N is a power of two, then it is possible to use the BatchEncoder\n       * class to view plaintext elements as 2-by-(N/2) matrices of integers modulo\n       * the plaintext modulus. This is called batching, and allows the user to\n       * operate on the matrix elements (slots) in a SIMD fashion, and rotate the\n       * matrix rows and columns. When the computation is easily vectorizable, using\n       * batching can yield a huge performance boost. If the encryption parameters\n       * support batching, the variable using_batching is set to true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingBatching\n       * @type {boolean}\n       */\n      get usingBatching() {\n        return _instance.usingBatching\n      },\n\n      /**\n       * Tells whether fast plain lift is supported by the encryption parameters.\n       * A certain performance optimization in multiplication of a ciphertext by\n       * a plaintext (Evaluator::multiply_plain) and in transforming a plaintext\n       * element to NTT domain (Evaluator::transform_to_ntt) can be used when the\n       * plaintext modulus is smaller than each prime in the coefficient modulus.\n       * In this case the variable using_fast_plain_lift is set to true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingFastPlainLift\n       * @type {boolean}\n       */\n      get usingFastPlainLift() {\n        return _instance.usingFastPlainLift\n      },\n\n      /**\n       * Tells whether the coefficient modulus consists of a set of primes that\n       * are in decreasing order. If this is true, certain modular reductions in\n       * base conversion can be omitted, improving performance.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingDescendingModulusChain\n       * @type {boolean}\n       */\n      get usingDescendingModulusChain() {\n        return _instance.usingDescendingModulusChain\n      },\n\n      /**\n       * Tells whether the encryption parameters are secure based on the standard\n       * parameters from HomomorphicEncryption.org security standard.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#securityLevel\n       * @type {(SecurityLevel.none|SecurityLevel.tc128|SecurityLevel.tc192|SecurityLevel.tc256)}\n       */\n      get securityLevel() {\n        return _instance.securityLevel\n      }\n    }\n  }\n\nexport const EncryptionParameterQualifiersInit =\n  (): EncryptionParameterQualifiersDependencies => {\n    return EncryptionParameterQualifiersConstructor()\n  }\n","import { Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\n\nexport type SerializableDependencyOptions = {\n  readonly Exception: Exception\n  readonly Vector: VectorConstructorOptions\n  readonly ComprModeType: ComprModeType\n}\n\nexport type SerializableDependencies = {\n  ({\n    Exception,\n    Vector,\n    ComprModeType\n  }: SerializableDependencyOptions): SerializableConstructorOptions\n}\n\nexport type SerializableConstructorOptions = {\n  (): Serializable\n}\n\nexport type Serializable = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n}\n\nconst SerializableConstructor =\n  (): SerializableDependencies =>\n  ({\n    Exception,\n    Vector,\n    ComprModeType\n  }: SerializableDependencyOptions): SerializableConstructorOptions =>\n  (): Serializable => {\n    let _instance: Instance\n\n    /**\n     * @implements Serializable\n     */\n\n    /**\n     * @interface Serializable\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Serializable#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Serializable#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Serializable#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Save to a base64 string\n       *\n       * @function\n       * @name Serializable#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save as a binary Uint8Array\n       *\n       * @function\n       * @name Serializable#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the Serializable object in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      }\n    }\n  }\n\nexport const SerializableInit = (): SerializableDependencies => {\n  return SerializableConstructor()\n}\n"],"names":["_scriptDir","Module","document","currentScript","src","undefined","__filename","moduleArg","aa","ba","h","ready","Promise","a","b","fa","ha","ia","ca","Object","assign","da","ea","fs","require$$0","ja","require$$1","__dirname","ka","URL","normalize","readFileSync","buffer","Uint8Array","thisProgram","process","argv","length","replace","slice","exitCode","inspect","print","console","log","bind","ma","la","printErr","error","quit","wasmBinary","WebAssembly","na","oa","r","w","x","y","z","A","qa","ra","pa","sa","HEAP8","Int8Array","HEAP16","Int16Array","HEAPU8","HEAPU16","Uint16Array","HEAP32","Int32Array","HEAPU32","Uint32Array","HEAPF32","Float32Array","HEAPF64","Float64Array","ta","ua","va","wa","xa","preRun","shift","unshift","C","D","onAbort","RuntimeError","E","za","startsWith","Aa","locateFile","Ca","resolve","then","Buffer","from","byteOffset","Ba","c","instantiate","Ea","this","name","message","status","Fa","Ga","noExitRuntime","Ha","Ja","Ka","L","M","G","I","J","La","Ma","O","d","l","n","N","forEach","e","Array","g","k","hasOwnProperty","push","TypeError","Na","Q","Oa","R","Pa","Qa","Ra","ga","Sa","P","Ta","pop","Wa","count","value","Va","create","writable","FinalizationRegistry","unregister","register","Xa","S","defineProperty","Ya","arguments","apply","Za","ab","constructor","bb","cb","db","eb","clone","T","fb","gb","fromWireType","hb","m","p","toWireType","kb","nb","ib","jb","lb","get","U","includes","concat","call","mb","pb","ob","V","W","map","join","qb","rb","sb","Function","prototype","tb","t","u","split","f","q","ub","vb","trim","indexOf","substr","wb","xb","X","yb","Y","zb","Xb","Ab","Cb","toString","Db","Eb","Fb","charCodeAt","Gb","Hb","TextDecoder","Ib","decode","subarray","String","fromCharCode","Jb","Kb","Lb","Mb","Nb","Ob","Pb","Qb","Rb","Sb","Tb","Wb","Yb","USER","LOGNAME","PATH","PWD","HOME","LANG","navigator","languages","_","$b","crypto","getRandomValues","require","randomFillSync","randomBytes","set","byteLength","Zb","ac","bc","cc","ec","v","H","B","getFullYear","getMonth","getDate","getDay","Date","getTime","setDate","setMonth","setFullYear","ya","Da","Ua","RegExp","substring","Math","floor","abs","dc","fc","gc","BindingError","Error","super","InternalError","isAliasOf","getPrototypeOf","isDeleted","deleteLater","getInheritedInstanceCount","keys","getLiveInheritedInstances","flushPendingDeletes","setDelayFunction","argPackAdvance","readValueFromPointer","deleteObject","Ia","pointerType","UnboundTypeError","stack","has","count_emval_handles","lc","ic","$a","F","Bb","K","Symbol","enumerable","configurable","splice","className","s","values","o","ArrayBuffer","Uint8ClampedArray","hc","Vb","Ub","i","j","copyWithin","min","max","grow","Z","exports","__errno_location","stackSave","stackAlloc","jc","monitorRunDependencies","instantiateWasm","instance","catch","kc","_main","nc","calledRun","onRuntimeInitialized","oc","onExit","postRun","setStatus","setTimeout","dynCall_viij","dynCall_viiij","dynCall_iiiij","dynCall_vij","dynCall_iij","dynCall_iiij","dynCall_viijii","dynCall_iiiiij","dynCall_iiiiijj","dynCall_iiiiiijj","$","mc","preInit","noInitialRun","module","UNSUPPORTED_VECTOR_TYPE","BatchEncoderInit","loader","library","Exception","MemoryPoolHandle","PlainText","Vector","context","Constructor","BatchEncoder","_instance","safe","unsafeInject","delete","encode","array","plainText","plain","BigInt64Array","stringArray","BigUint64Array","signed","pool","global","tempVect","decodeInt32","setType","tempArr","toArray","decodeUint32","decodeBigInt","slotCount","BatchEncoderConstructor","CipherTextConstructor","ComprModeType","ParmsIdType","parmsId","sizeCapacity","Ciphertext","construct","reserve","capacity","resize","size","release","coeffModulusSize","polyModulusDegree","isTransparent","isNttForm","parms","inject","scale","setScale","save","compression","zstd","saveToString","saveArray","saveToArray","load","encoded","loadFromString","loadArray","loadFromArray","copy","cipher","clonedInstance","move","CipherTextInit","CKKSEncoderInit","CKKSEncoder","decodeDouble","CKKSEncoderConstructor","CoeffModulusInit","SecurityLevel","_MaxBitCount","CoeffModulus","MaxBitCount","_BFVDefault","BFVDefault","_CreateFromArray","CreateFromArray","securityLevel","tc128","vectorModulus","Create","bitSizes","CoeffModulusConstructor","ComprModeTypeInit","_none","none","_zlib","zlib","_zstd","ComprModeTypeConstructor","ContextDataConstructor","EncryptionParameters","EncryptionParameterQualifiers","encryptionParameters","qualifiers","encParmQualifiers","totalCoeffModulusBitCount","prevContextData","cxtData","nextContextData","chainIndex","ContextDataInit","ContextInit","ContextData","encryptionParams","expandModChain","SEALContext","toHuman","getContextData","contextData","keyContextData","firstContextData","lastContextData","parametersSet","keyParmsId","firstParmsId","lastParmsId","usingKeyswitching","ContextConstructor","DecryptorInit","secretKey","Decryptor","decrypt","cipherText","invariantNoiseBudget","DecryptorConstructor","EncryptionParametersInit","Modulus","SchemeType","schemeType","setPolyModulusDegree","setCoeffModulus","coeffModulus","setPlainModulus","plainModulus","scheme","smallModulus","BigInt","EncryptionParametersConstructor","EncryptorInit","CipherText","Serializable","publicKey","Encryptor","constructInstance","encrypt","encryptSerializable","temp","encryptSymmetric","encryptSymmetricSerializable","serialized","encryptZero","encryptZeroSerializable","EncryptorConstructor","EvaluatorInit","Evaluator","negate","encrypted","destination","add","sub","multiply","square","relinearize","relinKeys","cipherModSwitchToNext","cipherModSwitchTo","plainModSwitchToNext","plainModSwitchTo","rescaleToNext","rescaleTo","modReduceToNext","modReduceTo","exponentiate","exponent","addPlain","subPlain","multiplyPlain","plainTransformToNtt","destinationNtt","cipherTransformToNtt","cipherTransformFromNtt","encryptedNtt","applyGalois","galoisElt","galoisKeys","rotateRows","steps","rotateColumns","rotateVector","complexConjugate","sumElements","newDest","dotProduct","dotProductPlain","EvaluatorConstructor","ExceptionInit","_getException","getException","ExceptionConstructor","GaloisKeysConstructor","GaloisKeys","getIndex","hasKey","key","GaloisKeysInit","KeyGeneratorInit","PublicKey","SecretKey","RelinKeys","KeyGenerator","createPublicKey","createPublicKeySerializable","createRelinKeys","createRelinKeysSerializable","createGaloisKeys","createGaloisKeysSerializable","KeyGeneratorConstructor","MemoryPoolHandleInit","_global","MemoryPoolHandleGlobal","_threadLocal","MemoryPoolHandleThreadLocal","threadLocal","MemoryPoolHandleConstructor","ModulusInit","inst","setValue","createModulus","bitCount","isZero","isPrime","ModulusConstructor","ParmsIdTypeInit","ParmsIdTypeConstructor","PlainTextConstructor","coeffCount","Plaintext","shrinkToFit","setZero","significantCoeffCount","nonzeroCoeffCount","toPolynomial","PlainTextInit","PlainModulusInit","_Batching","PlainModulus","Batching","_BatchingVector","BatchingVector","bitSize","smallMod","polyPlainModulusDegree","vectBitSizes","vect","PlainModulusConstructor","PublicKeyConstructor","PublicKeyInit","RelinKeysConstructor","keyPower","RelinKeysInit","SchemeTypeInit","_bfv","bfv","_ckks","ckks","_bgv","bgv","SchemeTypeConstructor","SecretKeyConstructor","SecretKeyInit","SecurityLevelInit","SecLevelType","_tc128","_tc192","tc192","_tc256","tc256","SecurityLevelConstructor","VectorInit","_vecFromArrayUint8","vecFromArrayUint8","_vecFromArrayUint32","vecFromArrayUint32","_vecFromArrayInt32","vecFromArrayInt32","_vecFromArrayFloat64","vecFromArrayFloat64","_vecFromArrayBigInt64","vecFromArrayBigInt64","_vecFromArrayBigUint64","vecFromArrayBigUint64","_vecFromArrayModulus","vecFromArrayModulus","_jsArrayUint8FromVec","jsArrayUint8FromVec","_jsArrayUint32FromVec","jsArrayUint32FromVec","_jsArrayInt32FromVec","jsArrayInt32FromVec","_jsArrayFloat64FromVec","jsArrayFloat64FromVec","_jsArrayStringFromVecInt64","jsArrayStringFromVecInt64","_jsArrayStringFromVecUint64","jsArrayStringFromVecUint64","_jsArrayStringFromVecModulus","jsArrayStringFromVecModulus","_type","type","getValue","index","fill","VectorConstructor","async","bin","createLoader","sealLibrary","allows_wasm_node_es","Loader","Context","exception","comprModeType","memoryPoolHandle","vector","modulus","serializable","parmsIdType","batchEncoder","ckksEncoder","encryptionParameterQualifiers","decryptor","encryptor","evaluator","Version","SEALConstructor","usingFFT","usingNTT","usingBatching","usingFastPlainLift","usingDescendingModulusChain","SEAL"],"mappings":"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"}