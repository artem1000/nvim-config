{"version":3,"file":"throws_wasm_worker_es.js","sources":["../src/bin/seal_throws_wasm_worker.js","../src/implementation/seal.ts","../src/implementation/constants.ts","../src/implementation/batch-encoder.ts","../src/implementation/cipher-text.ts","../src/implementation/ckks-encoder.ts","../src/implementation/coeff-modulus.ts","../src/implementation/compr-mode-type.ts","../src/implementation/context-data.ts","../src/implementation/context.ts","../src/implementation/decryptor.ts","../src/implementation/encryption-parameters.ts","../src/implementation/encryptor.ts","../src/implementation/evaluator.ts","../src/implementation/exception.ts","../src/implementation/galois-keys.ts","../src/implementation/key-generator.ts","../src/implementation/memory-pool-handle.ts","../src/implementation/modulus.ts","../src/implementation/parms-id-type.ts","../src/implementation/plain-text.ts","../src/implementation/plain-modulus.ts","../src/implementation/public-key.ts","../src/implementation/relin-keys.ts","../src/implementation/scheme-type.ts","../src/implementation/secret-key.ts","../src/implementation/security-level.ts","../src/implementation/vector.ts","../src/throws_wasm_worker_es.ts","../src/main/loader.ts","../src/main/seal.ts","../src/implementation/encryption-parameter-qualifiers.ts","../src/implementation/serializable.ts"],"sourcesContent":["\nvar Module = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  \n  return (\nfunction(moduleArg = {}) {\n\nvar h=moduleArg,aa,ba;h.ready=new Promise((a,b)=>{aa=a;ba=b});var ca=Object.assign({},h),da=\"./this.program\",ea=(a,b)=>{throw b;},r=\"\",fa;r=self.location.href;_scriptDir&&(r=_scriptDir);0!==r.indexOf(\"blob:\")?r=r.substr(0,r.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):r=\"\";fa=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)};var ha=h.printErr||console.error.bind(console);Object.assign(h,ca);ca=null;h.thisProgram&&(da=h.thisProgram);\nh.quit&&(ea=h.quit);var ia;h.wasmBinary&&(ia=h.wasmBinary);\"object\"!=typeof WebAssembly&&ja(\"no native wasm support detected\");var ka,la=!1,w,x,y,z,A,C,ma,na;function oa(){var a=ka.buffer;h.HEAP8=w=new Int8Array(a);h.HEAP16=y=new Int16Array(a);h.HEAPU8=x=new Uint8Array(a);h.HEAPU16=z=new Uint16Array(a);h.HEAP32=A=new Int32Array(a);h.HEAPU32=C=new Uint32Array(a);h.HEAPF32=ma=new Float32Array(a);h.HEAPF64=na=new Float64Array(a)}var pa=[],qa=[],ra=[],sa=[];\nfunction ta(){var a=h.preRun.shift();pa.unshift(a)}var D=0,ua=null,E=null;function ja(a){h.onAbort?.(a);a=\"Aborted(\"+a+\")\";ha(a);la=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");ba(a);throw a;}var va=a=>a.startsWith(\"data:application/octet-stream;base64,\"),G;G=\"data:application/octet-stream;base64,\";if(!va(G)){var wa=G;G=h.locateFile?h.locateFile(wa,r):r+wa}\nfunction xa(){var a=G;return Promise.resolve().then(()=>{if(a==G&&ia)var b=new Uint8Array(ia);else{if(va(a)){b=atob(a.slice(37));for(var c=new Uint8Array(b.length),d=0;d<b.length;++d)c[d]=b.charCodeAt(d);b=c}else b=void 0;if(!b)if(fa)b=fa(a);else throw\"both async and sync fetching of the wasm failed\";}return b})}function ya(a,b){return xa().then(c=>WebAssembly.instantiate(c,a)).then(c=>c).then(b,c=>{ha(`failed to asynchronously prepare wasm: ${c}`);ja(c)})}function za(a,b){return ya(a,b)}\nfunction Aa(a){this.name=\"ExitStatus\";this.message=`Program terminated with exit(${a})`;this.status=a}var Ba=a=>{for(;0<a.length;)a.shift()(h)},Ca=h.noExitRuntime||!0;function Da(a){this.ba=a-24;this.Ha=function(b){C[this.ba+4>>>2>>>0]=b};this.Aa=function(b){C[this.ba+8>>>2>>>0]=b};this.ta=function(b,c){this.za();this.Ha(b);this.Aa(c)};this.za=function(){C[this.ba+16>>>2>>>0]=0}}\nvar Ea=0,Fa=0,Ga,I=a=>{for(var b=\"\";x[a>>>0];)b+=Ga[x[a++>>>0]];return b},J={},K={},Ha={},M,Ia=a=>{throw new M(a);},N,P=(a,b,c)=>{function d(l){l=c(l);if(l.length!==a.length)throw new N(\"Mismatched type converter count\");for(var n=0;n<a.length;++n)O(a[n],l[n])}a.forEach(function(l){Ha[l]=b});var e=Array(b.length),g=[],k=0;b.forEach((l,n)=>{K.hasOwnProperty(l)?e[n]=K[l]:(g.push(l),J.hasOwnProperty(l)||(J[l]=[]),J[l].push(()=>{e[n]=K[l];++k;k===g.length&&d(e)}))});0===g.length&&d(e)};\nfunction Ja(a,b,c={}){var d=b.name;if(!a)throw new M(`type \"${d}\" must have a positive integer typeid pointer`);if(K.hasOwnProperty(a)){if(c.Ma)return;throw new M(`Cannot register type '${d}' twice`);}K[a]=b;delete Ha[a];J.hasOwnProperty(a)&&(b=J[a],delete J[a],b.forEach(e=>e()))}function O(a,b,c={}){if(!(\"argPackAdvance\"in b))throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");Ja(a,b,c)}\nvar Ka=a=>{throw new M(a.R.ca.aa.name+\" instance already deleted\");},La=!1,Ma=()=>{},Na=(a,b,c)=>{if(b===c)return a;if(void 0===c.fa)return null;a=Na(a,b,c.fa);return null===a?null:c.Ja(a)},Oa={},Q=[],Pa=()=>{for(;Q.length;){var a=Q.pop();a.R.qa=!1;a[\"delete\"]()}},R,Qa={},Ra=(a,b)=>{if(void 0===b)throw new M(\"ptr should not be undefined\");for(;a.fa;)b=a.sa(b),a=a.fa;return Qa[b]},Ta=(a,b)=>{if(!b.ca||!b.ba)throw new N(\"makeClassHandle requires ptr and ptrType\");if(!!b.ga!==!!b.ea)throw new N(\"Both smartPtrType and smartPtr must be specified\");\nb.count={value:1};return Sa(Object.create(a,{R:{value:b,writable:!0}}))},Sa=a=>{if(\"undefined\"===typeof FinalizationRegistry)return Sa=b=>b,a;La=new FinalizationRegistry(b=>{b=b.R;--b.count.value;0===b.count.value&&(b.ea?b.ga.la(b.ea):b.ca.aa.la(b.ba))});Sa=b=>{var c=b.R;c.ea&&La.register(b,{R:c},b);return b};Ma=b=>{La.unregister(b)};return Sa(a)};function Ua(){}\nvar S=(a,b)=>Object.defineProperty(b,\"name\",{value:a}),Va=(a,b,c)=>{if(void 0===a[b].da){var d=a[b];a[b]=function(){if(!a[b].da.hasOwnProperty(arguments.length))throw new M(`Function '${c}' called with an invalid number of arguments (${arguments.length}) - expects one of (${a[b].da})!`);return a[b].da[arguments.length].apply(this,arguments)};a[b].da=[];a[b].da[d.pa]=d}},Wa=(a,b,c)=>{if(h.hasOwnProperty(a)){if(void 0===c||void 0!==h[a].da&&void 0!==h[a].da[c])throw new M(`Cannot register public name '${a}' twice`);\nVa(h,a,a);if(h.hasOwnProperty(c))throw new M(`Cannot register multiple overloads of a function with the same number of arguments (${c})!`);h[a].da[c]=b}else h[a]=b,void 0!==c&&(h[a].Xa=c)},Xa=a=>{if(void 0===a)return\"_unknown\";a=a.replace(/[^a-zA-Z0-9_]/g,\"$\");var b=a.charCodeAt(0);return 48<=b&&57>=b?`_${a}`:a};function Ya(a,b,c,d,e,g,k,l){this.name=a;this.constructor=b;this.ka=c;this.la=d;this.fa=e;this.Ka=g;this.sa=k;this.Ja=l;this.Pa=[]}\nvar Za=(a,b,c)=>{for(;b!==c;){if(!b.sa)throw new M(`Expected null or instance of ${c.name}, got an instance of ${b.name}`);a=b.sa(a);b=b.fa}return a};function $a(a,b){if(null===b){if(this.Ba)throw new M(`null is not a valid ${this.name}`);return 0}if(!b.R)throw new M(`Cannot pass \"${ab(b)}\" as a ${this.name}`);if(!b.R.ba)throw new M(`Cannot pass deleted object as a pointer of type ${this.name}`);return Za(b.R.ba,b.R.ca.aa,this.aa)}\nfunction bb(a,b){if(null===b){if(this.Ba)throw new M(`null is not a valid ${this.name}`);if(this.wa){var c=this.Qa();null!==a&&a.push(this.la,c);return c}return 0}if(!b||!b.R)throw new M(`Cannot pass \"${ab(b)}\" as a ${this.name}`);if(!b.R.ba)throw new M(`Cannot pass deleted object as a pointer of type ${this.name}`);if(!this.va&&b.R.ca.va)throw new M(`Cannot convert argument of type ${b.R.ga?b.R.ga.name:b.R.ca.name} to parameter type ${this.name}`);c=Za(b.R.ba,b.R.ca.aa,this.aa);if(this.wa){if(void 0===\nb.R.ea)throw new M(\"Passing raw pointer to smart pointer is illegal\");switch(this.Sa){case 0:if(b.R.ga===this)c=b.R.ea;else throw new M(`Cannot convert argument of type ${b.R.ga?b.R.ga.name:b.R.ca.name} to parameter type ${this.name}`);break;case 1:c=b.R.ea;break;case 2:if(b.R.ga===this)c=b.R.ea;else{var d=b.clone();c=this.Ra(c,T(()=>d[\"delete\"]()));null!==a&&a.push(this.la,c)}break;default:throw new M(\"Unsupporting sharing policy\");}}return c}\nfunction cb(a,b){if(null===b){if(this.Ba)throw new M(`null is not a valid ${this.name}`);return 0}if(!b.R)throw new M(`Cannot pass \"${ab(b)}\" as a ${this.name}`);if(!b.R.ba)throw new M(`Cannot pass deleted object as a pointer of type ${this.name}`);if(b.R.ca.va)throw new M(`Cannot convert argument of type ${b.R.ca.name} to parameter type ${this.name}`);return Za(b.R.ba,b.R.ca.aa,this.aa)}function db(a){return this.fromWireType(C[a>>>2>>>0])}\nfunction eb(a,b,c,d,e,g,k,l,n,m,p){this.name=a;this.aa=b;this.Ba=c;this.va=d;this.wa=e;this.Oa=g;this.Sa=k;this.Fa=l;this.Qa=n;this.Ra=m;this.la=p;e||void 0!==b.fa?this.toWireType=bb:(this.toWireType=d?$a:cb,this.ha=null)}\nvar fb=(a,b,c)=>{if(!h.hasOwnProperty(a))throw new N(\"Replacing nonexistant public symbol\");void 0!==h[a].da&&void 0!==c?h[a].da[c]=b:(h[a]=b,h[a].pa=c)},gb=[],hb,ib=a=>{var b=gb[a];b||(a>=gb.length&&(gb.length=a+1),gb[a]=b=hb.get(a));return b},jb=(a,b)=>{var c=[];return function(){c.length=0;Object.assign(c,arguments);if(a.includes(\"j\")){var d=h[\"dynCall_\"+a];d=c&&c.length?d.apply(null,[b].concat(c)):d.call(null,b)}else d=ib(b).apply(null,c);return d}},U=(a,b)=>{a=I(a);var c=a.includes(\"j\")?jb(a,\nb):ib(b);if(\"function\"!=typeof c)throw new M(`unknown function pointer with signature ${a}: ${b}`);return c},kb,mb=a=>{a=lb(a);var b=I(a);V(a);return b},W=(a,b)=>{function c(g){e[g]||K[g]||(Ha[g]?Ha[g].forEach(c):(d.push(g),e[g]=!0))}var d=[],e={};b.forEach(c);throw new kb(`${a}: `+d.map(mb).join([\", \"]));},nb=a=>{for(;a.length;){var b=a.pop();a.pop()(b)}};function ob(a){for(var b=1;b<a.length;++b)if(null!==a[b]&&void 0===a[b].ha)return!0;return!1}\nfunction pb(a){var b=Function;if(!(b instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof b} which is not a function`);var c=S(b.name||\"unknownFunctionName\",function(){});c.prototype=b.prototype;c=new c;a=b.apply(c,a);return a instanceof Object?a:c}\nfunction qb(a,b,c,d,e,g){var k=b.length;if(2>k)throw new M(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");var l=null!==b[1]&&null!==c,n=ob(b);c=\"void\"!==b[0].name;d=[Ia,d,e,nb,b[0],b[1]];for(e=0;e<k-2;++e)d.push(b[e+2]);if(!n)for(e=l?1:2;e<b.length;++e)null!==b[e].ha&&d.push(b[e].ha);n=ob(b);e=b.length;var m=\"\",p=\"\";for(k=0;k<e-2;++k)m+=(0!==k?\", \":\"\")+\"arg\"+k,p+=(0!==k?\", \":\"\")+\"arg\"+k+\"Wired\";m=`\\n        return function (${m}) {\\n        if (arguments.length !== ${e-\n2}) {\\n          throwBindingError('function ${a} called with ' + arguments.length + ' arguments, expected ${e-2}');\\n        }`;n&&(m+=\"var destructors = [];\\n\");var t=n?\"destructors\":\"null\",u=\"throwBindingError invoker fn runDestructors retType classParam\".split(\" \");l&&(m+=\"var thisWired = classParam['toWireType'](\"+t+\", this);\\n\");for(k=0;k<e-2;++k)m+=\"var arg\"+k+\"Wired = argType\"+k+\"['toWireType'](\"+t+\", arg\"+k+\"); // \"+b[k+2].name+\"\\n\",u.push(\"argType\"+k);l&&(p=\"thisWired\"+(0<p.length?\", \":\n\"\")+p);m+=(c||g?\"var rv = \":\"\")+\"invoker(fn\"+(0<p.length?\", \":\"\")+p+\");\\n\";if(n)m+=\"runDestructors(destructors);\\n\";else for(k=l?1:2;k<b.length;++k)g=1===k?\"thisWired\":\"arg\"+(k-2)+\"Wired\",null!==b[k].ha&&(m+=g+\"_dtor(\"+g+\"); // \"+b[k].name+\"\\n\",u.push(g+\"_dtor\"));c&&(m+=\"var ret = retType['fromWireType'](rv);\\nreturn ret;\\n\");let [f,q]=[u,m+\"}\\n\"];f.push(q);b=pb(f).apply(null,d);return S(a,b)}\nvar rb=(a,b)=>{for(var c=[],d=0;d<a;d++)c.push(C[b+4*d>>>2>>>0]);return c},sb=a=>{a=a.trim();const b=a.indexOf(\"(\");return-1!==b?a.substr(0,b):a},tb=(a,b,c)=>{if(!(a instanceof Object))throw new M(`${c} with invalid \"this\": ${a}`);if(!(a instanceof b.aa.constructor))throw new M(`${c} incompatible with \"this\" of type ${a.constructor.name}`);if(!a.R.ba)throw new M(`cannot call emscripten binding method ${c} on deleted object`);return Za(a.R.ba,a.R.ca.aa,b.aa)};\nfunction ub(){this.ja=[void 0];this.Ea=[]}var X=new ub;function vb(a){a>>>=0;a>=X.ta&&0===--X.get(a).Ga&&X.Aa(a)}var Y=a=>{if(!a)throw new M(\"Cannot use deleted val. handle = \"+a);return X.get(a).value},T=a=>{switch(a){case void 0:return 1;case null:return 2;case !0:return 3;case !1:return 4;default:return X.za({Ga:1,value:a})}};function wb(a){return this.fromWireType(A[a>>>2>>>0])}\nvar xb=(a,b,c)=>{switch(b){case 1:return c?function(d){return this.fromWireType(w[d>>>0>>>0])}:function(d){return this.fromWireType(x[d>>>0>>>0])};case 2:return c?function(d){return this.fromWireType(y[d>>>1>>>0])}:function(d){return this.fromWireType(z[d>>>1>>>0])};case 4:return c?function(d){return this.fromWireType(A[d>>>2>>>0])}:function(d){return this.fromWireType(C[d>>>2>>>0])};default:throw new TypeError(`invalid integer width (${b}): ${a}`);}},yb=(a,b)=>{var c=K[a];if(void 0===c)throw a=b+\n\" has unknown type \"+mb(a),new M(a);return c},ab=a=>{if(null===a)return\"null\";var b=typeof a;return\"object\"===b||\"array\"===b||\"function\"===b?a.toString():\"\"+a},zb=(a,b)=>{switch(b){case 4:return function(c){return this.fromWireType(ma[c>>>2>>>0])};case 8:return function(c){return this.fromWireType(na[c>>>3>>>0])};default:throw new TypeError(`invalid float width (${b}): ${a}`);}},Bb=(a,b,c)=>{switch(b){case 1:return c?d=>w[d>>>0>>>0]:d=>x[d>>>0>>>0];case 2:return c?d=>y[d>>>1>>>0]:d=>z[d>>>1>>>0];\ncase 4:return c?d=>A[d>>>2>>>0]:d=>C[d>>>2>>>0];default:throw new TypeError(`invalid integer width (${b}): ${a}`);}},Cb=(a,b,c,d)=>{c>>>=0;if(0<d){d=c+d-1;for(var e=0;e<a.length;++e){var g=a.charCodeAt(e);if(55296<=g&&57343>=g){var k=a.charCodeAt(++e);g=65536+((g&1023)<<10)|k&1023}if(127>=g){if(c>=d)break;b[c++>>>0]=g}else{if(2047>=g){if(c+1>=d)break;b[c++>>>0]=192|g>>6}else{if(65535>=g){if(c+2>=d)break;b[c++>>>0]=224|g>>12}else{if(c+3>=d)break;b[c++>>>0]=240|g>>18;b[c++>>>0]=128|g>>12&63}b[c++>>>\n0]=128|g>>6&63}b[c++>>>0]=128|g&63}}b[c>>>0]=0}},Db=a=>{for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);127>=d?b++:2047>=d?b+=2:55296<=d&&57343>=d?(b+=4,++c):b+=3}return b},Eb=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0,Fb=(a,b)=>{a>>>=0;if(a){var c=x;a>>>=0;var d=a+b;for(b=a;c[b]&&!(b>=d);)++b;if(16<b-a&&c.buffer&&Eb)c=Eb.decode(c.subarray(a,b));else{for(d=\"\";a<b;){var e=c[a++];if(e&128){var g=c[a++]&63;if(192==(e&224))d+=String.fromCharCode((e&31)<<6|g);else{var k=c[a++]&\n63;e=224==(e&240)?(e&15)<<12|g<<6|k:(e&7)<<18|g<<12|k<<6|c[a++]&63;65536>e?d+=String.fromCharCode(e):(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023))}}else d+=String.fromCharCode(e)}c=d}}else c=\"\";return c},Gb=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0,Hb=(a,b)=>{var c=a>>1;for(var d=c+b/2;!(c>=d)&&z[c>>>0];)++c;c<<=1;if(32<c-a&&Gb)return Gb.decode(x.subarray(a>>>0,c>>>0));c=\"\";for(d=0;!(d>=b/2);++d){var e=y[a+2*d>>>1>>>0];if(0==e)break;c+=String.fromCharCode(e)}return c},\nIb=(a,b,c)=>{c??=2147483647;if(2>c)return 0;c-=2;var d=b;c=c<2*a.length?c/2:a.length;for(var e=0;e<c;++e)y[b>>>1>>>0]=a.charCodeAt(e),b+=2;y[b>>>1>>>0]=0;return b-d},Jb=a=>2*a.length,Kb=(a,b)=>{for(var c=0,d=\"\";!(c>=b/4);){var e=A[a+4*c>>>2>>>0];if(0==e)break;++c;65536<=e?(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023)):d+=String.fromCharCode(e)}return d},Lb=(a,b,c)=>{b>>>=0;c??=2147483647;if(4>c)return 0;var d=b;c=d+c-4;for(var e=0;e<a.length;++e){var g=a.charCodeAt(e);if(55296<=g&&57343>=\ng){var k=a.charCodeAt(++e);g=65536+((g&1023)<<10)|k&1023}A[b>>>2>>>0]=g;b+=4;if(b+4>c)break}A[b>>>2>>>0]=0;return b-d},Mb=a=>{for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&++c;b+=4}return b},Nb=(a,b,c)=>{var d=[];a=a.toWireType(d,c);d.length&&(C[b>>>2>>>0]=T(d));return a},Ob={},Pb=a=>{var b=Ob[a];return void 0===b?I(a):b},Qb=[],Rb=a=>{var b=Qb.length;Qb.push(a);return b},Sb=(a,b)=>{for(var c=Array(a),d=0;d<a;++d)c[d]=yb(C[b+4*d>>>2>>>0],\"parameter \"+d);return c},Tb={},\nVb=()=>{if(!Ub){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:da||\"./this.program\"},b;for(b in Tb)void 0===Tb[b]?delete a[b]:a[b]=Tb[b];var c=[];for(b in a)c.push(`${b}=${a[b]}`);Ub=c}return Ub},Ub,Wb=()=>{if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues)return a=>crypto.getRandomValues(a);ja(\"initRandomDevice\")},Xb=a=>(Xb=Wb())(a),\nYb=a=>0===a%4&&(0!==a%100||0===a%400),Zb=[31,29,31,30,31,30,31,31,30,31,30,31],$b=[31,28,31,30,31,30,31,31,30,31,30,31];function ac(a){var b=Array(Db(a)+1);Cb(a,b,0,b.length);return b}\nfunction bc(a,b,c,d){function e(f,q,v){for(f=\"number\"==typeof f?f.toString():f||\"\";f.length<q;)f=v[0]+f;return f}function g(f,q){return e(f,q,\"0\")}function k(f,q){function v(H){return 0>H?-1:0<H?1:0}var B;0===(B=v(f.getFullYear()-q.getFullYear()))&&0===(B=v(f.getMonth()-q.getMonth()))&&(B=v(f.getDate()-q.getDate()));return B}function l(f){switch(f.getDay()){case 0:return new Date(f.getFullYear()-1,11,29);case 1:return f;case 2:return new Date(f.getFullYear(),0,3);case 3:return new Date(f.getFullYear(),\n0,2);case 4:return new Date(f.getFullYear(),0,1);case 5:return new Date(f.getFullYear()-1,11,31);case 6:return new Date(f.getFullYear()-1,11,30)}}function n(f){var q=f.na;for(f=new Date((new Date(f.oa+1900,0,1)).getTime());0<q;){var v=f.getMonth(),B=(Yb(f.getFullYear())?Zb:$b)[v];if(q>B-f.getDate())q-=B-f.getDate()+1,f.setDate(1),11>v?f.setMonth(v+1):(f.setMonth(0),f.setFullYear(f.getFullYear()+1));else{f.setDate(f.getDate()+q);break}}v=new Date(f.getFullYear()+1,0,4);q=l(new Date(f.getFullYear(),\n0,4));v=l(v);return 0>=k(q,f)?0>=k(v,f)?f.getFullYear()+1:f.getFullYear():f.getFullYear()-1}a>>>=0;b>>>=0;c>>>=0;d>>>=0;var m=C[d+40>>>2>>>0];d={Va:A[d>>>2>>>0],Ua:A[d+4>>>2>>>0],xa:A[d+8>>>2>>>0],Ca:A[d+12>>>2>>>0],ya:A[d+16>>>2>>>0],oa:A[d+20>>>2>>>0],ia:A[d+24>>>2>>>0],na:A[d+28>>>2>>>0],Ya:A[d+32>>>2>>>0],Ta:A[d+36>>>2>>>0],Wa:m?Fb(m):\"\"};c=Fb(c);m={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\n\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var p in m)c=c.replace(new RegExp(p,\"g\"),m[p]);var t=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),u=\"January February March April May June July August September October November December\".split(\" \");m={\"%a\":f=>t[f.ia].substring(0,3),\"%A\":f=>t[f.ia],\"%b\":f=>\nu[f.ya].substring(0,3),\"%B\":f=>u[f.ya],\"%C\":f=>g((f.oa+1900)/100|0,2),\"%d\":f=>g(f.Ca,2),\"%e\":f=>e(f.Ca,2,\" \"),\"%g\":f=>n(f).toString().substring(2),\"%G\":f=>n(f),\"%H\":f=>g(f.xa,2),\"%I\":f=>{f=f.xa;0==f?f=12:12<f&&(f-=12);return g(f,2)},\"%j\":f=>{for(var q=0,v=0;v<=f.ya-1;q+=(Yb(f.oa+1900)?Zb:$b)[v++]);return g(f.Ca+q,3)},\"%m\":f=>g(f.ya+1,2),\"%M\":f=>g(f.Ua,2),\"%n\":()=>\"\\n\",\"%p\":f=>0<=f.xa&&12>f.xa?\"AM\":\"PM\",\"%S\":f=>g(f.Va,2),\"%t\":()=>\"\\t\",\"%u\":f=>f.ia||7,\"%U\":f=>g(Math.floor((f.na+7-f.ia)/7),2),\"%V\":f=>\n{var q=Math.floor((f.na+7-(f.ia+6)%7)/7);2>=(f.ia+371-f.na-2)%7&&q++;if(q)53==q&&(v=(f.ia+371-f.na)%7,4==v||3==v&&Yb(f.oa)||(q=1));else{q=52;var v=(f.ia+7-f.na-1)%7;(4==v||5==v&&Yb(f.oa%400-1))&&q++}return g(q,2)},\"%w\":f=>f.ia,\"%W\":f=>g(Math.floor((f.na+7-(f.ia+6)%7)/7),2),\"%y\":f=>(f.oa+1900).toString().substring(2),\"%Y\":f=>f.oa+1900,\"%z\":f=>{f=f.Ta;var q=0<=f;f=Math.abs(f)/60;return(q?\"+\":\"-\")+String(\"0000\"+(f/60*100+f%60)).slice(-4)},\"%Z\":f=>f.Wa,\"%%\":()=>\"%\"};c=c.replace(/%%/g,\"\\x00\\x00\");for(p in m)c.includes(p)&&\n(c=c.replace(new RegExp(p,\"g\"),m[p](d)));c=c.replace(/\\0\\0/g,\"%\");p=ac(c);if(p.length>b)return 0;w.set(p,a>>>0);return p.length-1}for(var cc=Array(256),dc=0;256>dc;++dc)cc[dc]=String.fromCharCode(dc);Ga=cc;M=h.BindingError=class extends Error{constructor(a){super(a);this.name=\"BindingError\"}};N=h.InternalError=class extends Error{constructor(a){super(a);this.name=\"InternalError\"}};\nObject.assign(Ua.prototype,{isAliasOf:function(a){if(!(this instanceof Ua&&a instanceof Ua))return!1;var b=this.R.ca.aa,c=this.R.ba;a.R=a.R;var d=a.R.ca.aa;for(a=a.R.ba;b.fa;)c=b.sa(c),b=b.fa;for(;d.fa;)a=d.sa(a),d=d.fa;return b===d&&c===a},clone:function(){this.R.ba||Ka(this);if(this.R.ra)return this.R.count.value+=1,this;var a=Sa,b=Object,c=b.create,d=Object.getPrototypeOf(this),e=this.R;a=a(c.call(b,d,{R:{value:{count:e.count,qa:e.qa,ra:e.ra,ba:e.ba,ca:e.ca,ea:e.ea,ga:e.ga}}}));a.R.count.value+=\n1;a.R.qa=!1;return a},[\"delete\"](){this.R.ba||Ka(this);if(this.R.qa&&!this.R.ra)throw new M(\"Object already scheduled for deletion\");Ma(this);var a=this.R;--a.count.value;0===a.count.value&&(a.ea?a.ga.la(a.ea):a.ca.aa.la(a.ba));this.R.ra||(this.R.ea=void 0,this.R.ba=void 0)},isDeleted:function(){return!this.R.ba},deleteLater:function(){this.R.ba||Ka(this);if(this.R.qa&&!this.R.ra)throw new M(\"Object already scheduled for deletion\");Q.push(this);1===Q.length&&R&&R(Pa);this.R.qa=!0;return this}});\nh.getInheritedInstanceCount=()=>Object.keys(Qa).length;h.getLiveInheritedInstances=()=>{var a=[],b;for(b in Qa)Qa.hasOwnProperty(b)&&a.push(Qa[b]);return a};h.flushPendingDeletes=Pa;h.setDelayFunction=a=>{R=a;Q.length&&R&&R(Pa)};\nObject.assign(eb.prototype,{La(a){this.Fa&&(a=this.Fa(a));return a},Da(a){this.la?.(a)},argPackAdvance:8,readValueFromPointer:db,deleteObject:function(a){if(null!==a)a[\"delete\"]()},fromWireType:function(a){function b(){return this.wa?Ta(this.aa.ka,{ca:this.Oa,ba:c,ga:this,ea:a}):Ta(this.aa.ka,{ca:this,ba:a})}var c=this.La(a);if(!c)return this.Da(a),null;var d=Ra(this.aa,c);if(void 0!==d){if(0===d.R.count.value)return d.R.ba=c,d.R.ea=a,d.clone();d=d.clone();this.Da(a);return d}d=this.aa.Ka(c);d=Oa[d];\nif(!d)return b.call(this);d=this.va?d.Ia:d.pointerType;var e=Na(c,this.aa,d.aa);return null===e?b.call(this):this.wa?Ta(d.aa.ka,{ca:d,ba:e,ga:this,ea:a}):Ta(d.aa.ka,{ca:d,ba:e})}});\nkb=h.UnboundTypeError=((a,b)=>{var c=S(b,function(d){this.name=b;this.message=d;d=Error(d).stack;void 0!==d&&(this.stack=this.toString()+\"\\n\"+d.replace(/^Error(:[^\\n]*)?\\n/,\"\"))});c.prototype=Object.create(a.prototype);c.prototype.constructor=c;c.prototype.toString=function(){return void 0===this.message?this.name:`${this.name}: ${this.message}`};return c})(Error,\"UnboundTypeError\");\nObject.assign(ub.prototype,{get(a){return this.ja[a]},has(a){return void 0!==this.ja[a]},za(a){var b=this.Ea.pop()||this.ja.length;this.ja[b]=a;return b},Aa(a){this.ja[a]=void 0;this.Ea.push(a)}});X.ja.push({value:void 0},{value:null},{value:!0},{value:!1});X.ta=X.ja.length;h.count_emval_handles=()=>{for(var a=0,b=X.ta;b<X.ja.length;++b)void 0!==X.ja[b]&&++a;return a};\nvar fc={a:function(a,b,c){a>>>=0;(new Da(a)).ta(b>>>0,c>>>0);Ea=a;Fa++;throw Ea;},B:function(){},D:function(a,b,c,d){b=I(b>>>0);O(a>>>0,{name:b,fromWireType:function(e){return!!e},toWireType:function(e,g){return g?c:d},argPackAdvance:8,readValueFromPointer:function(e){return this.fromWireType(x[e>>>0])},ha:null})},e:function(a,b,c,d,e,g,k,l,n,m,p,t,u){a>>>=0;b>>>=0;c>>>=0;d>>>=0;g>>>=0;k>>>=0;l>>>=0;n>>>=0;m>>>=0;p>>>=0;t>>>=0;u>>>=0;p=I(p);g=U(e>>>0,g);l&&=U(k,l);m&&=U(n,m);u=U(t,u);var f=Xa(p);\nWa(f,function(){W(`Cannot construct ${p} due to unbound types`,[d])});P([a,b,c],d?[d]:[],function(q){q=q[0];if(d){var v=q.aa;var B=v.ka}else B=Ua.prototype;q=S(p,function(){if(Object.getPrototypeOf(this)!==H)throw new M(\"Use 'new' to construct \"+p);if(void 0===F.ma)throw new M(p+\" has no accessible constructor\");var Ab=F.ma[arguments.length];if(void 0===Ab)throw new M(`Tried to invoke ctor of ${p} with invalid number of parameters (${arguments.length}) - expected (${Object.keys(F.ma).toString()}) parameters instead!`);\nreturn Ab.apply(this,arguments)});var H=Object.create(B,{constructor:{value:q}});q.prototype=H;var F=new Ya(p,q,H,u,v,g,l,m);if(F.fa){var L;(L=F.fa).ua??(L.ua=[]);F.fa.ua.push(F)}v=new eb(p,F,!0,!1,!1);L=new eb(p+\"*\",F,!1,!1,!1);B=new eb(p+\" const*\",F,!1,!0,!1);Oa[a]={pointerType:L,Ia:B};fb(f,q);return[v,L,B]})},r:function(a,b,c,d,e,g,k,l){a>>>=0;b>>>=0;e>>>=0;g>>>=0;k>>>=0;var n=rb(c,d>>>0);b=I(b);b=sb(b);g=U(e,g);P([],[a],function(m){function p(){W(`Cannot call ${t} due to unbound types`,n)}m=m[0];\nvar t=`${m.name}.${b}`;b.startsWith(\"@@\")&&(b=Symbol[b.substring(2)]);var u=m.aa.constructor;void 0===u[b]?(p.pa=c-1,u[b]=p):(Va(u,b,t),u[b].da[c-1]=p);P([],n,function(f){f=qb(t,[f[0],null].concat(f.slice(1)),null,g,k,l);void 0===u[b].da?(f.pa=c-1,u[b]=f):u[b].da[c-1]=f;if(m.aa.ua)for(const q of m.aa.ua)q.constructor.hasOwnProperty(b)||(q.constructor[b]=f);return[]});return[]})},x:function(a,b,c,d,e,g,k,l){a>>>=0;b>>>=0;c>>>=0;d>>>=0;g>>>=0;k>>>=0;l>>>=0;b=I(b);g=U(e>>>0,g);P([],[a],function(n){n=\nn[0];var m=`${n.name}.${b}`,p={get(){W(`Cannot access ${m} due to unbound types`,[c])},enumerable:!0,configurable:!0};p.set=l?()=>{W(`Cannot access ${m} due to unbound types`,[c])}:()=>{throw new M(`${m} is a read-only property`);};Object.defineProperty(n.aa.constructor,b,p);P([],[c],function(t){t=t[0];var u={get(){return t.fromWireType(g(d))},enumerable:!0};l&&(l=U(k,l),u.set=f=>{var q=[];l(d,t.toWireType(q,f));nb(q)});Object.defineProperty(n.aa.constructor,b,u);return[]});return[]})},f:function(a,\nb,c,d,e,g){a>>>=0;d>>>=0;e>>>=0;g>>>=0;var k=rb(b,c>>>0);e=U(d,e);P([],[a],function(l){l=l[0];var n=`constructor ${l.name}`;void 0===l.aa.ma&&(l.aa.ma=[]);if(void 0!==l.aa.ma[b-1])throw new M(`Cannot register multiple constructors with identical number of parameters (${b-1}) for class '${l.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);l.aa.ma[b-1]=()=>{W(`Cannot construct ${l.name} due to unbound types`,k)};P([],k,m=>{m.splice(1,0,null);\nl.aa.ma[b-1]=qb(n,m,null,e,g);return[]});return[]})},b:function(a,b,c,d,e,g,k,l,n){a>>>=0;b>>>=0;e>>>=0;g>>>=0;k>>>=0;var m=rb(c,d>>>0);b=I(b);b=sb(b);g=U(e,g);P([],[a],function(p){function t(){W(`Cannot call ${u} due to unbound types`,m)}p=p[0];var u=`${p.name}.${b}`;b.startsWith(\"@@\")&&(b=Symbol[b.substring(2)]);l&&p.aa.Pa.push(b);var f=p.aa.ka,q=f[b];void 0===q||void 0===q.da&&q.className!==p.name&&q.pa===c-2?(t.pa=c-2,t.className=p.name,f[b]=t):(Va(f,b,u),f[b].da[c-2]=t);P([],m,function(v){v=\nqb(u,v,p,g,k,n);void 0===f[b].da?(v.pa=c-2,f[b]=v):f[b].da[c-2]=v;return[]});return[]})},s:function(a,b,c,d,e,g,k,l,n,m){a>>>=0;b>>>=0;c>>>=0;e>>>=0;g>>>=0;k>>>=0;l>>>=0;n>>>=0;m>>>=0;b=I(b);e=U(d>>>0,e);P([],[a],function(p){p=p[0];var t=`${p.name}.${b}`,u={get(){W(`Cannot access ${t} due to unbound types`,[c,k])},enumerable:!0,configurable:!0};u.set=n?()=>W(`Cannot access ${t} due to unbound types`,[c,k]):()=>{throw new M(t+\" is a read-only property\");};Object.defineProperty(p.aa.ka,b,u);P([],n?\n[c,k]:[c],function(f){var q=f[0],v={get(){var H=tb(this,p,t+\" getter\");return q.fromWireType(e(g,H))},enumerable:!0};if(n){n=U(l,n);var B=f[1];v.set=function(H){var F=tb(this,p,t+\" setter\"),L=[];n(m,F,B.toWireType(L,H));nb(L)}}Object.defineProperty(p.aa.ka,b,v);return[]});return[]})},A:function(a,b){b=I(b>>>0);O(a>>>0,{name:b,fromWireType:c=>{var d=Y(c);vb(c);return d},toWireType:(c,d)=>T(d),argPackAdvance:8,readValueFromPointer:wb,ha:null})},u:function(a,b,c,d){function e(){}b=I(b>>>0);e.values=\n{};O(a>>>0,{name:b,constructor:e,fromWireType:function(g){return this.constructor.values[g]},toWireType:(g,k)=>k.value,argPackAdvance:8,readValueFromPointer:xb(b,c>>>0,d),ha:null});Wa(b,e)},p:function(a,b,c){b>>>=0;var d=yb(a>>>0,\"enum\");b=I(b);a=d.constructor;d=Object.create(d.constructor.prototype,{value:{value:c},constructor:{value:S(`${d.name}_${b}`,function(){})}});a.values[c]=d;a[b]=d},v:function(a,b,c){b=I(b>>>0);O(a>>>0,{name:b,fromWireType:d=>d,toWireType:(d,e)=>e,argPackAdvance:8,readValueFromPointer:zb(b,\nc>>>0),ha:null})},o:function(a,b,c,d,e,g,k){a>>>=0;d>>>=0;e>>>=0;g>>>=0;var l=rb(b,c>>>0);a=I(a);a=sb(a);e=U(d,e);Wa(a,function(){W(`Cannot call ${a} due to unbound types`,l)},b-1);P([],l,function(n){fb(a,qb(a,[n[0],null].concat(n.slice(1)),null,e,g,k),b-1);return[]})},q:function(a,b,c,d,e){a>>>=0;c>>>=0;b=I(b>>>0);-1===e&&(e=4294967295);e=l=>l;if(0===d){var g=32-8*c;e=l=>l<<g>>>g}var k=b.includes(\"unsigned\")?function(l,n){return n>>>0}:function(l,n){return n};O(a,{name:b,fromWireType:e,toWireType:k,\nargPackAdvance:8,readValueFromPointer:Bb(b,c,0!==d),ha:null})},k:function(a,b,c){function d(g){return new e(w.buffer,C[g+4>>>2>>>0],C[g>>>2>>>0])}var e=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][b];c=I(c>>>0);O(a>>>0,{name:c,fromWireType:d,argPackAdvance:8,readValueFromPointer:d},{Ma:!0})},w:function(a,b){b=I(b>>>0);var c=\"std::string\"===b;O(a>>>0,{name:b,fromWireType:function(d){var e=C[d>>>2>>>0],g=d+4;if(c)for(var k=g,l=0;l<=e;++l){var n=g+l;\nif(l==e||0==x[n>>>0]){k=Fb(k,n-k);if(void 0===m)var m=k;else m+=String.fromCharCode(0),m+=k;k=n+1}}else{m=Array(e);for(l=0;l<e;++l)m[l]=String.fromCharCode(x[g+l>>>0]);m=m.join(\"\")}V(d);return m},toWireType:function(d,e){e instanceof ArrayBuffer&&(e=new Uint8Array(e));var g=\"string\"==typeof e;if(!(g||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Int8Array))throw new M(\"Cannot pass non-string to std::string\");var k=c&&g?Db(e):e.length;var l=ec(4+k+1),n=l+4;C[l>>>2>>>0]=k;if(c&&\ng)Cb(e,x,n,k+1);else if(g)for(g=0;g<k;++g){var m=e.charCodeAt(g);if(255<m)throw V(n),new M(\"String has UTF-16 code units that do not fit in 8 bits\");x[n+g>>>0]=m}else for(g=0;g<k;++g)x[n+g>>>0]=e[g];null!==d&&d.push(V,l);return l},argPackAdvance:8,readValueFromPointer:db,ha(d){V(d)}})},t:function(a,b,c){b>>>=0;c>>>=0;c=I(c);if(2===b){var d=Hb;var e=Ib;var g=Jb;var k=()=>z;var l=1}else 4===b&&(d=Kb,e=Lb,g=Mb,k=()=>C,l=2);O(a>>>0,{name:c,fromWireType:n=>{for(var m=C[n>>>2>>>0],p=k(),t,u=n+4,f=0;f<=\nm;++f){var q=n+4+f*b;if(f==m||0==p[q>>>l])u=d(u,q-u),void 0===t?t=u:(t+=String.fromCharCode(0),t+=u),u=q+b}V(n);return t},toWireType:(n,m)=>{if(\"string\"!=typeof m)throw new M(`Cannot pass non-string to C++ string type ${c}`);var p=g(m),t=ec(4+p+b);C[t>>>2]=p>>l;e(m,t+4,p+b);null!==n&&n.push(V,t);return t},argPackAdvance:8,readValueFromPointer:wb,ha(n){V(n)}})},J:function(a,b){b=I(b>>>0);O(a>>>0,{Na:!0,name:b,argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}})},h:function(a,b,c){b>>>=0;c>>>=0;\na=Y(a>>>0);b=yb(b,\"emval::as\");return Nb(b,c,a)},n:function(a,b,c,d,e){c>>>=0;d>>>=0;e>>>=0;a=Qb[a>>>0];b=Y(b>>>0);c=Pb(c);return a(b,b[c],d,e)},c:vb,m:function(a,b,c){b=Sb(a,b>>>0);var d=b.shift();a--;var e=\"return function (obj, func, destructorsRef, args) {\\n\",g=0,k=[];0===c&&k.push(\"obj\");for(var l=[\"retType\"],n=[d],m=0;m<a;++m)k.push(\"arg\"+m),l.push(\"argType\"+m),n.push(b[m]),e+=`  var arg${m} = argType${m}.readValueFromPointer(args${g?\"+\"+g:\"\"});\\n`,g+=b[m].argPackAdvance;e+=`  var rv = ${1===\nc?\"new func\":\"func.call\"}(${k.join(\", \")});\\n`;for(m=0;m<a;++m)b[m].deleteObject&&(e+=`  argType${m}.deleteObject(arg${m});\\n`);d.Na||(l.push(\"emval_returnValue\"),n.push(Nb),e+=\"  return emval_returnValue(retType, destructorsRef, rv);\\n\");l.push(e+\"};\\n\");a=pb(l).apply(null,n);c=`methodCaller<(${b.map(p=>p.name).join(\", \")}) => ${d.name}>`;return Rb(S(c,a))},i:function(a,b){b>>>=0;a=Y(a>>>0);b=Y(b);return T(a[b])},j:function(a){a>>>=0;4<a&&(X.get(a).Ga+=1)},C:function(){return T([])},l:function(a){return T(Pb(a>>>\n0))},d:function(a){a>>>=0;var b=Y(a);nb(b);vb(a)},g:function(a,b){b>>>=0;a=yb(a>>>0,\"_emval_take_value\");a=a.readValueFromPointer(b);return T(a)},y:()=>{ja(\"\")},z:function(a,b,c){b>>>=0;return x.copyWithin(a>>>0>>>0,b>>>0,b+(c>>>0)>>>0)},I:function(a){a>>>=0;var b=x.length;if(4294901760<a)return!1;for(var c=1;4>=c;c*=2){var d=b*(1+.2/c);d=Math.min(d,a+100663296);var e=Math;d=Math.max(a,d);a:{e=(e.min.call(e,4294901760,d+(65536-d%65536)%65536)-ka.buffer.byteLength+65535)/65536;try{ka.grow(e);oa();\nvar g=1;break a}catch(k){}g=void 0}if(g)return!0}return!1},G:function(a,b){a>>>=0;b>>>=0;var c=0;Vb().forEach((d,e)=>{var g=b+c;e=C[a+4*e>>>2>>>0]=g;for(g=0;g<d.length;++g)w[e++>>>0>>>0]=d.charCodeAt(g);w[e>>>0>>>0]=0;c+=d.length+1});return 0},H:function(a,b){a>>>=0;b>>>=0;var c=Vb();C[a>>>2>>>0]=c.length;var d=0;c.forEach(e=>d+=e.length+1);C[b>>>2>>>0]=d;return 0},E:function(a,b){a>>>=0;Xb(x.subarray(a>>>0,a+(b>>>0)>>>0));return 0},F:function(a,b,c,d){return bc(a>>>0,b>>>0,c>>>0,d>>>0)}},Z=function(){function a(c){Z=\nc.exports;Z=gc();ka=Z.K;oa();hb=Z.P;qa.unshift(Z.L);D--;h.monitorRunDependencies?.(D);0==D&&(null!==ua&&(clearInterval(ua),ua=null),E&&(c=E,E=null,c()));return Z}var b={a:fc};D++;h.monitorRunDependencies?.(D);if(h.instantiateWasm)try{return h.instantiateWasm(b,a)}catch(c){ha(`Module.instantiateWasm callback failed with error: ${c}`),ba(c)}za(b,function(c){a(c.instance)}).catch(ba);return{}}(),hc=h._main=(a,b)=>(hc=h._main=Z.M)(a,b),lb=a=>(lb=Z.N)(a),ec=a=>(ec=Z.O)(a),V=a=>(V=Z.Q)(a);\nh.dynCall_viij=(a,b,c,d,e)=>(h.dynCall_viij=Z.S)(a,b,c,d,e);h.dynCall_viiij=(a,b,c,d,e,g)=>(h.dynCall_viiij=Z.T)(a,b,c,d,e,g);h.dynCall_iiiij=(a,b,c,d,e,g)=>(h.dynCall_iiiij=Z.U)(a,b,c,d,e,g);h.dynCall_vij=(a,b,c,d)=>(h.dynCall_vij=Z.V)(a,b,c,d);h.dynCall_iij=(a,b,c,d)=>(h.dynCall_iij=Z.W)(a,b,c,d);h.dynCall_iiij=(a,b,c,d,e)=>(h.dynCall_iiij=Z.X)(a,b,c,d,e);h.dynCall_viijii=(a,b,c,d,e,g,k)=>(h.dynCall_viijii=Z.Y)(a,b,c,d,e,g,k);\nh.dynCall_iiiiij=(a,b,c,d,e,g,k)=>(h.dynCall_iiiiij=Z.Z)(a,b,c,d,e,g,k);h.dynCall_iiiiijj=(a,b,c,d,e,g,k,l,n)=>(h.dynCall_iiiiijj=Z._)(a,b,c,d,e,g,k,l,n);h.dynCall_iiiiiijj=(a,b,c,d,e,g,k,l,n,m)=>(h.dynCall_iiiiiijj=Z.$)(a,b,c,d,e,g,k,l,n,m);function gc(){var a=Z;a=Object.assign({},a);var b=d=>e=>d(e)>>>0,c=d=>()=>d()>>>0;a.N=b(a.N);a.__errno_location=c(a.__errno_location);a.O=b(a.O);a.stackSave=c(a.stackSave);a.stackAlloc=b(a.stackAlloc);return a}var ic;E=function jc(){ic||kc();ic||(E=jc)};\nfunction kc(){function a(){if(!ic&&(ic=!0,h.calledRun=!0,!la)){Ba(qa);Ba(ra);aa(h);if(h.onRuntimeInitialized)h.onRuntimeInitialized();if(lc){var b=hc;try{var c=b(0,0);Ca||(h.onExit?.(c),la=!0);ea(c,new Aa(c))}catch(d){d instanceof Aa||\"unwind\"==d||ea(1,d)}}if(h.postRun)for(\"function\"==typeof h.postRun&&(h.postRun=[h.postRun]);h.postRun.length;)b=h.postRun.shift(),sa.unshift(b);Ba(sa)}}if(!(0<D)){if(h.preRun)for(\"function\"==typeof h.preRun&&(h.preRun=[h.preRun]);h.preRun.length;)ta();Ba(pa);0<D||(h.setStatus?\n(h.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){h.setStatus(\"\")},1);a()},1)):a())}}if(h.preInit)for(\"function\"==typeof h.preInit&&(h.preInit=[h.preInit]);0<h.preInit.length;)h.preInit.pop()();var lc=!0;h.noInitialRun&&(lc=!1);kc();\n\n\n  return moduleArg.ready\n}\n);\n})();\n;\nexport default Module;","import {\n  BatchEncoderConstructorOptions,\n  BatchEncoderDependencies\n} from './batch-encoder'\nimport {\n  CipherTextConstructorOptions,\n  CipherTextDependencies\n} from './cipher-text'\nimport {\n  CKKSEncoderConstructorOptions,\n  CKKSEncoderDependencies\n} from './ckks-encoder'\nimport { CoeffModulus, CoeffModulusDependencies } from './coeff-modulus'\nimport { ComprModeType, ComprModeTypeDependencies } from './compr-mode-type'\nimport {\n  ContextDataConstructorOptions,\n  ContextDataDependencies\n} from './context-data'\nimport { ContextConstructorOptions, ContextDependencies } from './context'\nimport { DecryptorConstructorOptions, DecryptorDependencies } from './decryptor'\nimport {\n  EncryptionParameterQualifiersConstructorOptions,\n  EncryptionParameterQualifiersDependencies\n} from './encryption-parameter-qualifiers'\nimport {\n  EncryptionParametersConstructorOptions,\n  EncryptionParametersDependencies\n} from './encryption-parameters'\nimport { EncryptorConstructorOptions, EncryptorDependencies } from './encryptor'\nimport { EvaluatorConstructorOptions, EvaluatorDependencies } from './evaluator'\nimport { Exception, ExceptionDependencies } from './exception'\nimport {\n  GaloisKeysConstructorOptions,\n  GaloisKeysDependencies\n} from './galois-keys'\nimport {\n  MemoryPoolHandle,\n  MemoryPoolHandleDependencies\n} from './memory-pool-handle'\nimport { ModulusConstructorOptions, ModulusDependencies } from './modulus'\nimport {\n  ParmsIdTypeConstructorOptions,\n  ParmsIdTypeDependencies\n} from './parms-id-type'\nimport {\n  PlainTextConstructorOptions,\n  PlainTextDependencies\n} from './plain-text'\nimport { PlainModulus, PlainModulusDependencies } from './plain-modulus'\nimport {\n  PublicKeyConstructorOptions,\n  PublicKeyDependencies\n} from './public-key'\nimport {\n  RelinKeysConstructorOptions,\n  RelinKeysDependencies\n} from './relin-keys'\nimport { SchemeType, SchemeTypeDependencies } from './scheme-type'\nimport {\n  SecretKeyConstructorOptions,\n  SecretKeyDependencies\n} from './secret-key'\nimport { SecurityLevel, SecurityLevelDependencies } from './security-level'\nimport {\n  SerializableConstructorOptions,\n  SerializableDependencies\n} from './serializable'\nimport { VectorConstructorOptions, VectorDependencies } from './vector'\nimport {\n  KeyGeneratorConstructorOptions,\n  KeyGeneratorDependencies\n} from './key-generator'\nimport { version } from '../../package.json'\n\nexport type Instance = any\nexport type Loader = any\nexport type Library = any\nexport type Dependencies = any\nexport type LoaderOptions = {\n  readonly loader: Loader\n}\n\nexport type SEALLibrary = {\n  readonly BatchEncoder: BatchEncoderConstructorOptions\n  readonly CipherText: CipherTextConstructorOptions\n  readonly CKKSEncoder: CKKSEncoderConstructorOptions\n  readonly CoeffModulus: CoeffModulus\n  readonly ComprModeType: ComprModeType\n  readonly ContextData: ContextDataConstructorOptions\n  readonly Context: ContextConstructorOptions\n  readonly Decryptor: DecryptorConstructorOptions\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersConstructorOptions\n  readonly EncryptionParameters: EncryptionParametersConstructorOptions\n  readonly Encryptor: EncryptorConstructorOptions\n  readonly Evaluator: EvaluatorConstructorOptions\n  readonly Exception: Exception\n  readonly GaloisKeys: GaloisKeysConstructorOptions\n  readonly KeyGenerator: KeyGeneratorConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Modulus: ModulusConstructorOptions\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly PlainText: PlainTextConstructorOptions\n  readonly PlainModulus: PlainModulus\n  readonly PublicKey: PublicKeyConstructorOptions\n  readonly RelinKeys: RelinKeysConstructorOptions\n  readonly SchemeType: SchemeType\n  readonly SecretKey: SecretKeyConstructorOptions\n  readonly SecurityLevel: SecurityLevel\n  readonly Serializable: SerializableConstructorOptions\n  readonly Vector: VectorConstructorOptions\n  readonly Version: string\n}\ntype SEALConstructorOptions = {\n  readonly BatchEncoder: BatchEncoderDependencies\n  readonly CipherText: CipherTextDependencies\n  readonly CKKSEncoder: CKKSEncoderDependencies\n  readonly CoeffModulus: CoeffModulusDependencies\n  readonly ComprModeType: ComprModeTypeDependencies\n  readonly ContextData: ContextDataDependencies\n  readonly Context: ContextDependencies\n  readonly Decryptor: DecryptorDependencies\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersDependencies\n  readonly EncryptionParameters: EncryptionParametersDependencies\n  readonly Encryptor: EncryptorDependencies\n  readonly Evaluator: EvaluatorDependencies\n  readonly Exception: ExceptionDependencies\n  readonly GaloisKeys: GaloisKeysDependencies\n  readonly KeyGenerator: KeyGeneratorDependencies\n  readonly MemoryPoolHandle: MemoryPoolHandleDependencies\n  readonly Modulus: ModulusDependencies\n  readonly ParmsIdType: ParmsIdTypeDependencies\n  readonly PlainText: PlainTextDependencies\n  readonly PlainModulus: PlainModulusDependencies\n  readonly PublicKey: PublicKeyDependencies\n  readonly RelinKeys: RelinKeysDependencies\n  readonly SchemeType: SchemeTypeDependencies\n  readonly SecretKey: SecretKeyDependencies\n  readonly SecurityLevel: SecurityLevelDependencies\n  readonly Serializable: SerializableDependencies\n  readonly Vector: VectorDependencies\n}\n\n/**\n * @implements SEAL\n */\nexport const SEALConstructor = ({\n  BatchEncoder,\n  CipherText,\n  CKKSEncoder,\n  CoeffModulus,\n  ComprModeType,\n  ContextData,\n  Context,\n  Decryptor,\n  EncryptionParameterQualifiers,\n  EncryptionParameters,\n  Encryptor,\n  Evaluator,\n  Exception,\n  GaloisKeys,\n  KeyGenerator,\n  MemoryPoolHandle,\n  Modulus,\n  ParmsIdType,\n  PlainText,\n  PlainModulus,\n  PublicKey,\n  RelinKeys,\n  SchemeType,\n  SecretKey,\n  SecurityLevel,\n  Serializable,\n  Vector\n}: SEALConstructorOptions): SEALLibrary => {\n  // Unfortunately, this library has nested depenencies\n  // so we need to load them in order.\n\n  // Define our singletons\n  const exception = Exception()()\n  const comprModeType = ComprModeType()()\n  const memoryPoolHandle = MemoryPoolHandle()()\n  const securityLevel = SecurityLevel()()\n  const schemeType = SchemeType()()\n\n  // Define our constructors (ORDER MATTERS)\n  const vector = Vector({ Exception: exception })\n  const coeffModulus = CoeffModulus({\n    Exception: exception,\n    SecurityLevel: securityLevel,\n    Vector: vector\n  })()\n  const modulus = Modulus({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const plainModulus = PlainModulus({\n    Exception: exception,\n    Modulus: modulus,\n    Vector: vector\n  })()\n  const serializable = Serializable({\n    Exception: exception,\n    Vector: vector,\n    ComprModeType: comprModeType\n  })\n  const parmsIdType = ParmsIdType({ Exception: exception })\n  const plainText = PlainText({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    ParmsIdType: parmsIdType,\n    MemoryPoolHandle: memoryPoolHandle,\n    Vector: vector\n  })\n  const cipherText = CipherText({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    ParmsIdType: parmsIdType,\n    MemoryPoolHandle: memoryPoolHandle,\n    Vector: vector\n  })\n  const batchEncoder = BatchEncoder({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    PlainText: plainText,\n    Vector: vector\n  })\n  const ckksEncoder = CKKSEncoder({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    PlainText: plainText,\n    Vector: vector\n  })\n  const encryptionParameterQualifiers = EncryptionParameterQualifiers()\n  const encryptionParameters = EncryptionParameters({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Modulus: modulus,\n    SchemeType: schemeType,\n    ParmsIdType: parmsIdType,\n    Vector: vector\n  })\n  const contextData = ContextData({\n    Exception: exception,\n    EncryptionParameters: encryptionParameters,\n    ParmsIdType: parmsIdType,\n    EncryptionParameterQualifiers: encryptionParameterQualifiers\n  })\n  const context = Context({\n    ParmsIdType: parmsIdType,\n    ContextData: contextData,\n    SecurityLevel: securityLevel\n  })\n  const decryptor = Decryptor({\n    Exception: exception,\n    PlainText: plainText\n  })\n  const encryptor = Encryptor({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    CipherText: cipherText,\n    Serializable: serializable\n  })\n  const evaluator = Evaluator({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    CipherText: cipherText,\n    PlainText: plainText\n  })\n  const publicKey = PublicKey({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const secretKey = SecretKey({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const relinKeys = RelinKeys({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const galoisKeys = GaloisKeys({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const keyGenerator = KeyGenerator({\n    Exception: exception,\n    PublicKey: publicKey,\n    SecretKey: secretKey,\n    RelinKeys: relinKeys,\n    GaloisKeys: galoisKeys,\n    Serializable: serializable\n  })\n\n  /**\n   * @interface SEAL\n   */\n  return {\n    BatchEncoder: batchEncoder,\n    CipherText: cipherText,\n    CKKSEncoder: ckksEncoder,\n    CoeffModulus: coeffModulus, // Singleton\n    ComprModeType: comprModeType, // Singleton\n    ContextData: contextData,\n    Context: context,\n    Decryptor: decryptor,\n    EncryptionParameterQualifiers: encryptionParameterQualifiers,\n    EncryptionParameters: encryptionParameters,\n    Encryptor: encryptor,\n    Evaluator: evaluator,\n    Exception: exception, // Singleton\n    GaloisKeys: galoisKeys,\n    KeyGenerator: keyGenerator,\n    MemoryPoolHandle: memoryPoolHandle, // Singleton\n    Modulus: modulus,\n    ParmsIdType: parmsIdType,\n    PlainText: plainText,\n    PlainModulus: plainModulus, // Singleton\n    PublicKey: publicKey,\n    RelinKeys: relinKeys,\n    SchemeType: schemeType,\n    SecretKey: secretKey,\n    SecurityLevel: securityLevel, // Singleton\n    Serializable: serializable,\n    Vector: vector,\n    Version: version\n  }\n}\n","export const INSTANCE_DELETED = 'Instance was deleted'\nexport const UNSUPPORTED_VECTOR_TYPE = 'Unsupported vector type'\nexport const UNSUPPORTED_BITSIZES_TYPE =\n  'Unsupported argument type! `bitSizes` must be an Int32Array'\nexport const UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE =\n  'Unsupported array type! `array` must be of type Int32Array, Uint32Array, BigInt64Array, or BigUint64Array.'\nexport const UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE =\n  'Unsupported array type! `array` must be of type Float64Array.'\nexport const INVALID_PLAIN_CONSRUCTOR_OPTIONS =\n  'Must specify a (coeffCount), (coeffCount, capacity)'\nexport const INVALID_CIPHER_CONSTRUCTOR_OPTIONS =\n  'Must specify a (context), (context, parmsId), or (context, parmsId, sizeCapacity)'\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { Context } from './context'\nimport { UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE } from './constants'\n\nexport type BatchEncoderDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly PlainText: PlainTextConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type BatchEncoderDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: BatchEncoderDependencyOptions): BatchEncoderConstructorOptions\n}\n\nexport type BatchEncoderConstructorOptions = {\n  (context: Context): BatchEncoder\n}\n\nexport type BatchEncoderTypes =\n  | Int32Array\n  | Uint32Array\n  | BigInt64Array\n  | BigUint64Array\n\nexport type BatchEncoder = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encode: (\n    array: BatchEncoderTypes,\n    plainText?: PlainText\n  ) => PlainText | void\n  readonly decode: (\n    plainText: PlainText,\n    signed?: boolean,\n    pool?: MemoryPoolHandle\n  ) => Int32Array | Uint32Array\n  readonly decodeBigInt: (\n    plainText: PlainText,\n    signed?: boolean,\n    pool?: MemoryPoolHandle\n  ) => BigInt64Array | BigUint64Array\n  readonly slotCount: number\n}\n\nconst BatchEncoderConstructor =\n  (library: Library): BatchEncoderDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: BatchEncoderDependencyOptions): BatchEncoderConstructorOptions =>\n  (context): BatchEncoder => {\n    const Constructor = library.BatchEncoder\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements BatchEncoder\n     */\n\n    /**\n     * @interface BatchEncoder\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name BatchEncoder#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name BatchEncoder#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name BatchEncoder#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Creates a PlainText from a given matrix. This function \"batches\" a given matrix\n       * of either signed or unsigned integers modulo the PlainText modulus into a PlainText element, and stores\n       * the result in the destination parameter. The input array must have size at most equal\n       * to the degree of the polynomial modulus. The first half of the elements represent the\n       * first row of the matrix, and the second half represent the second row. The numbers\n       * in the matrix can be at most equal to the PlainText modulus for it to represent\n       * a valid PlainText.\n       *\n       * If the destination PlainText overlaps the input values in memory, the behavior of\n       * this function is undefined.\n       *\n       * @function\n       * @name BatchEncoder#encode\n       * @param {Int32Array|Uint32Array|BigInt64Array|BigUint64Array} array Data to encode\n       * @param {PlainText} [plainText=null] Destination to store the encoded result\n       * @returns {PlainText|void} A new PlainText holding the encoded data or void if one was provided\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const batchEncoder = seal.BatchEncoder(context)\n       *\n       * const plainText = batchEncoder.encode(Int32Array.from([1, -2, 3]))\n       */\n      encode(\n        array: Int32Array | Uint32Array | BigInt64Array | BigUint64Array,\n        plainText?: PlainText\n      ): PlainText | void {\n        try {\n          if (array.constructor === Int32Array) {\n            if (plainText) {\n              _instance.encode(array, plainText.instance, 'INT32')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(array, plain.instance, 'INT32')\n            return plain\n          }\n\n          if (array.constructor === Uint32Array) {\n            if (plainText) {\n              _instance.encode(array, plainText.instance, 'UINT32')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(array, plain.instance, 'UINT32')\n            return plain\n          }\n\n          if (array.constructor === BigInt64Array) {\n            // When embind supports BigInt64Arrays we can remove this hack\n            const stringArray = array.toString().split(',')\n            if (plainText) {\n              _instance.encode(stringArray, plainText.instance, 'INT64')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(stringArray, plain.instance, 'INT64')\n            return plain\n          }\n\n          if (array.constructor === BigUint64Array) {\n            // When embind supports BigInt64Arrays we can remove this hack\n            const stringArray = array.toString().split(',')\n            if (plainText) {\n              _instance.encode(stringArray, plainText.instance, 'UINT64')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(stringArray, plain.instance, 'UINT64')\n            return plain\n          }\n\n          throw new Error(UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Inverse of encode. This function \"unbatches\" a given PlainText into a matrix\n       * of signed or unsigned integers modulo the PlainText modulus, and stores the result in the destination\n       * parameter. The input PlainText must have degrees less than the polynomial modulus,\n       * and coefficients less than the PlainText modulus, i.e. it must be a valid PlainText\n       * for the encryption parameters. Dynamic memory allocations in the process are\n       * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name BatchEncoder#decode\n       * @param {PlainText} plainText Data to decode\n       * @param {boolean} [signed=true] By default, decode as an Int32Array. If false, decode as an Uint32Array\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n       * @returns {Int32Array|Uint32Array} TypedArray containing the decoded data\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const batchEncoder = seal.BatchEncoder(context)\n       *\n       * const plainText = batchEncoder.encode(Int32Array.from([1, -2, 3]))\n       * const plainTextU = batchEncoder.encode(Uint32Array.from([1, 2, 3]))\n       *\n       * const result = batchEncoder.decode(plainText)\n       * const resultU = batchEncoder.decode(plainTextU, false) // To decode as an Uint32Array\n       */\n      decode(\n        plainText: PlainText,\n        signed = true,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Int32Array | Uint32Array {\n        try {\n          if (signed) {\n            const tempVect = Vector()\n            const instance = _instance.decodeInt32(plainText.instance, pool)\n            tempVect.unsafeInject(instance)\n            tempVect.setType('Int32Array')\n            const tempArr = tempVect.toArray() as Int32Array\n            tempVect.delete()\n            return tempArr\n          }\n          const tempVect = Vector()\n          const instance = _instance.decodeUint32(plainText.instance, pool)\n          tempVect.unsafeInject(instance)\n          tempVect.setType('Uint32Array')\n          const tempArr = tempVect.toArray() as Uint32Array\n          tempVect.delete()\n          return tempArr\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Performs the same function as the 32-bit decode, but supports true\n       * 64-bit values encapsulated by a BigInt.\n       *\n       * There's no official support for sending a BigInt64Array/BigUint64Array\n       * from C++ to JS, therefore this function uses string conversion to\n       * marshal data which is noticably slower. Use this function if you\n       * absolutely need to marshal values larger than 32 bits.\n       *\n       * @see {@link BatchEncoder#decode} for more information about decode.\n       * @function\n       * @name BatchEncoder#decodeBigInt\n       * @param {PlainText} plainText Data to decode\n       * @param {boolean} [signed=true] By default, decode as an BigInt64Array. If false, decode as an BigUint64Array\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n       * @returns {BigInt64Array|BigUint64Array} TypedArray containing the decoded data\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const batchEncoder = seal.BatchEncoder(context)\n       *\n       * const plainText = batchEncoder.encode(BigInt64Array.from([1n, -2n, 3n]))\n       * const plainTextU = batchEncoder.encode(BigUint64Array.from([1n, 2n, 3n]))\n       *\n       * const result = batchEncoder.decodeBigInt(plainText)\n       * const resultU = batchEncoder.decodeBigInt(plainTextU, false) // To decode as an BigUint64Array\n       */\n      decodeBigInt(\n        plainText: PlainText,\n        signed = true,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): BigInt64Array | BigUint64Array {\n        try {\n          if (signed) {\n            const instance = _instance.decodeBigInt(\n              plainText.instance,\n              true,\n              pool\n            )\n            return BigInt64Array.from(instance)\n          }\n          const instance = _instance.decodeBigInt(\n            plainText.instance,\n            false,\n            pool\n          )\n          return BigUint64Array.from(instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The total number of batching slots available to hold data\n       *\n       * @readonly\n       * @name BatchEncoder#slotCount\n       * @type {number}\n       */\n      get slotCount() {\n        return _instance.slotCount()\n      }\n    }\n  }\n\nexport const BatchEncoderInit = ({\n  loader\n}: LoaderOptions): BatchEncoderDependencies => {\n  const library: Library = loader.library\n  return BatchEncoderConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\nimport { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { VectorConstructorOptions } from './vector'\nimport { INVALID_CIPHER_CONSTRUCTOR_OPTIONS } from './constants'\nexport type CipherTextDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type CipherTextDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: CipherTextDependencyOptions): CipherTextConstructorOptions\n}\n\nexport type CipherTextConstructorOptions = {\n  ({\n    context,\n    parmsId,\n    sizeCapacity,\n    pool\n  }?: {\n    context?: Context\n    parmsId?: ParmsIdType\n    sizeCapacity?: number\n    pool?: MemoryPoolHandle\n  }): CipherText\n}\n\nexport type CipherText = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly reserve: (context: Context, capacity: number) => void\n  readonly resize: (size: number) => void\n  readonly release: () => void\n  readonly coeffModulusSize: number\n  readonly polyModulusDegree: number\n  readonly size: number\n  readonly sizeCapacity: number\n  readonly isTransparent: boolean\n  readonly isNttForm: boolean\n  readonly parmsId: ParmsIdType\n  readonly scale: number\n  readonly setScale: (scale: number) => void\n  readonly pool: MemoryPoolHandle\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (cipher: CipherText) => void\n  readonly clone: () => CipherText\n  readonly move: (cipher: CipherText) => void\n}\n\nconst CipherTextConstructor =\n  (library: Library): CipherTextDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: CipherTextDependencyOptions): CipherTextConstructorOptions =>\n  ({\n    context,\n    parmsId,\n    sizeCapacity,\n    pool = MemoryPoolHandle.global\n  } = {}): CipherText => {\n    // Static methods\n    const Constructor = library.Ciphertext\n\n    let _instance = construct({\n      context,\n      parmsId,\n      sizeCapacity,\n      pool\n    })\n\n    function construct({\n      context,\n      parmsId,\n      sizeCapacity,\n      pool = MemoryPoolHandle.global\n    }: {\n      context?: Context\n      parmsId?: ParmsIdType\n      sizeCapacity?: number\n      pool?: MemoryPoolHandle\n    }) {\n      try {\n        if (!context && !parmsId && sizeCapacity === undefined) {\n          return new Constructor(pool)\n        } else if (context && !parmsId && sizeCapacity === undefined) {\n          return new Constructor(context.instance, pool)\n        } else if (context && parmsId && sizeCapacity === undefined) {\n          return new Constructor(context.instance, parmsId.instance, pool)\n        } else if (context && parmsId && sizeCapacity !== undefined) {\n          return new Constructor(\n            context.instance,\n            parmsId.instance,\n            sizeCapacity,\n            pool\n          )\n        } else {\n          throw new Error(INVALID_CIPHER_CONSTRUCTOR_OPTIONS)\n        }\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements CipherText\n     */\n\n    /**\n     * @interface CipherText\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name CipherText#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name CipherText#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name CipherText#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Allocates enough memory to accommodate the backing array of a ciphertext\n       * with given capacity. In addition to the capacity, the allocation size is\n       * determined by the current encryption parameters.\n       *\n       * @function\n       * @name CipherText#reserve\n       * @param {Context} context The SEAL Context\n       * @param {number} capacity The capacity to reserve\n       */\n      reserve(context: Context, capacity: number) {\n        try {\n          return _instance.reserve(context.instance, capacity)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Resizes the CipherText to given size, reallocating if the capacity\n       * of the CipherText is too small.\n       *\n       * This function is mainly intended for internal use and is called\n       * automatically by functions such as Evaluator.multiply and\n       * Evaluator.relinearize. A normal user should never have a reason\n       * to manually resize a CipherText.\n       *\n       * @function\n       * @name CipherText#resize\n       * @param {number} size The new size\n       */\n      resize(size: number) {\n        try {\n          return _instance.resize(size)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Resets the CipherText. This function releases any memory allocated\n       * by the CipherText, returning it to the memory pool. It also sets all\n       * encryption parameter specific size information to zero.\n       *\n       * @function\n       * @name CipherText#release\n       */\n      release() {\n        _instance.release()\n      },\n\n      /**\n       * The number of primes in the coefficient modulus of the\n       * associated encryption parameters. This directly affects the\n       * allocation size of the CipherText.\n       *\n       * @readonly\n       * @name CipherText#coeffModulusSize\n       * @type {number}\n       */\n      get coeffModulusSize() {\n        return _instance.coeffModulusSize()\n      },\n\n      /**\n       * The degree of the polynomial modulus of the associated\n       * encryption parameters. This directly affects the allocation size\n       * of the CipherText.\n       *\n       * @readonly\n       * @name CipherText#polyModulusDegree\n       * @type {number}\n       */\n      get polyModulusDegree() {\n        return _instance.polyModulusDegree()\n      },\n\n      /**\n       * The size of the CipherText.\n       *\n       * @readonly\n       * @name CipherText#size\n       * @type {number}\n       */\n      get size() {\n        return _instance.size()\n      },\n\n      /**\n       * The capacity of the allocation. This means the largest size\n       * of the CipherText that can be stored in the current allocation with\n       * the current encryption parameters.\n       *\n       * @readonly\n       * @name CipherText#sizeCapacity\n       * @type {number}\n       */\n      get sizeCapacity() {\n        return _instance.sizeCapacity()\n      },\n\n      /**\n       * Whether the current CipherText is transparent, i.e. does not require\n       * a secret key to decrypt. In typical security models such transparent\n       * CipherTexts would not be considered to be valid. Starting from the second\n       * polynomial in the current CipherText, this function returns true if all\n       * following coefficients are identically zero. Otherwise, returns false.\n       *\n       * @readonly\n       * @name CipherText#isTransparent\n       * @type {boolean}\n       */\n      get isTransparent() {\n        return _instance.isTransparent()\n      },\n\n      /**\n       * Whether the CipherText is in NTT form.\n       *\n       * @readonly\n       * @name CipherText#isNttForm\n       * @type {boolean}\n       */\n      get isNttForm() {\n        return _instance.isNttForm()\n      },\n\n      /**\n       * The reference to parmsId.\n       * @see {@link EncryptionParameters} for more information about parmsId.\n       *\n       * @readonly\n       * @name CipherText#parmsId\n       * @type {ParmsIdType}\n       */\n      get parmsId() {\n        const parms = ParmsIdType()\n        parms.inject(_instance.parmsId())\n        return parms\n      },\n\n      /**\n       * The reference to the scale. This is only needed when using the\n       * CKKS encryption scheme. The user should have little or no reason to ever\n       * change the scale by hand.\n       *\n       * @readonly\n       * @name CipherText#scale\n       * @type {number}\n       */\n      get scale() {\n        return _instance.scale()\n      },\n\n      /**\n       * Sets the CipherText scale. This is only needed when using the\n       * CKKS encryption scheme. The user should have little or no reason to ever\n       * change the scale by hand.\n       *\n       * @function\n       * @name CipherText#setScale\n       * @param {number} scale The scale to set\n       */\n      setScale(scale: number) {\n        _instance.setScale(scale)\n      },\n\n      /**\n       * The currently used MemoryPoolHandle.\n       *\n       * @readonly\n       * @name CipherText#pool\n       * @type {MemoryPoolHandle}\n       */\n      get pool() {\n        return _instance.pool()\n      },\n\n      /**\n       * Save the CipherText to a base64 string\n       *\n       * @function\n       * @name CipherText#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the CipherText as a binary Uint8Array\n       *\n       * @function\n       * @name CipherText#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the CipherText in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a CipherText from a base64 string\n       *\n       * @function\n       * @name CipherText#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a CipherText from an Uint8Array holding binary data\n       *\n       * @function\n       * @name CipherText#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing CipherText and overwrite this instance\n       *\n       * @function\n       * @name CipherText#copy\n       * @param {CipherText} cipher CipherText to copy\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encoding some data ...\n       * const cipherTextB = seal.CipherText()\n       * cipherTextB.copy(cipherTextA)\n       * // cipherTextB holds a copy of cipherTextA\n       */\n      copy(cipher: CipherText) {\n        try {\n          _instance.copy(cipher.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this CipherText\n       *\n       * @function\n       * @name CipherText#clone\n       * @returns {CipherText}\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encoding some data ...\n       * const cipherTextB = cipherTextA.clone()\n       * // cipherTextB holds a copy of cipherTextA\n       */\n      clone(): CipherText {\n        try {\n          const clonedInstance = _instance.clone()\n          const cipher = CipherTextConstructor(library)({\n            Exception,\n            ComprModeType,\n            ParmsIdType,\n            MemoryPoolHandle,\n            Vector\n          })()\n          cipher.unsafeInject(clonedInstance)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a CipherText into this one and delete the old reference\n       *\n       * @function\n       * @name CipherText#move\n       * @param {CipherText} cipher CipherText to move\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encoding some data ...\n       * const cipherTextB = seal.CipherText()\n       * cipherTextB.move(cipherTextA)\n       * // cipherTextB holds a the instance of cipherTextA.\n       * // cipherTextA no longer holds an instance\n       */\n      move(cipher: CipherText) {\n        try {\n          _instance.move(cipher.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          cipher.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const CipherTextInit = ({\n  loader\n}: LoaderOptions): CipherTextDependencies => {\n  const library: Library = loader.library\n  return CipherTextConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { Context } from './context'\nimport { UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE } from './constants'\n\nexport type CKKSEncoderDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly PlainText: PlainTextConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type CKKSEncoderDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: CKKSEncoderDependencyOptions): CKKSEncoderConstructorOptions\n}\n\nexport type CKKSEncoderConstructorOptions = {\n  (context: Context): CKKSEncoder\n}\n\nexport type CKKSEncoderTypes = Float64Array\n\nexport type CKKSEncoder = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encode: (\n    array: CKKSEncoderTypes,\n    scale: number,\n    plainText?: PlainText,\n    pool?: MemoryPoolHandle\n  ) => PlainText | void\n  readonly decode: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => CKKSEncoderTypes\n  readonly slotCount: number\n}\n\nconst CKKSEncoderConstructor =\n  (library: Library): CKKSEncoderDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: CKKSEncoderDependencyOptions): CKKSEncoderConstructorOptions =>\n  (context): CKKSEncoder => {\n    const Constructor = library.CKKSEncoder\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements CKKSEncoder\n     */\n\n    /**\n     * @interface CKKSEncoder\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name CKKSEncoder#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name CKKSEncoder#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name CKKSEncoder#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Encodes a vector of double-precision floating-point real numbers\n       * into a plaintext polynomial. Append zeros if vector size is less than N/2.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name CKKSEncoder#encode\n       * @param {Float64Array} array Data to encode\n       * @param {number} scale Scaling parameter defining encoding precision\n       * @param {PlainText} [plainText] Destination to store the encoded result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {PlainText|void} A new PlainText holding the encoded data or void if one was provided\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const ckksEncoder = seal.CKKSEncoder(context)\n       *\n       * const plainText = ckksEncoder.encode(Float64Array.from([1.11, -2.222, 3.333]), Math.pow(2, 20))\n       */\n      encode(\n        array: Float64Array,\n        scale: number,\n        plainText?: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): PlainText | void {\n        try {\n          if (array.constructor === Float64Array) {\n            if (plainText) {\n              _instance.encode(array, scale, plainText.instance, pool)\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(array, scale, plain.instance, pool)\n            return plain\n          } else {\n            throw new Error(UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE)\n          }\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Decodes a plaintext polynomial into double-precision floating-point\n       * real numbers. Dynamic memory allocations in the process are\n       * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name CKKSEncoder#decode\n       * @param {PlainText} plainText Data to decode\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Float64Array} TypedArray containing the decoded data\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const ckksEncoder = seal.CKKSEncoder(context)\n       *\n       * const plainText = ckksEncoder.encode(Float64Array.from([1, 2, 3]))\n       *\n       * const result = ckksEncoder.decode(plainText)\n       */\n      decode(\n        plainText: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Float64Array {\n        try {\n          const tempVect = Vector()\n          const instance = _instance.decodeDouble(plainText.instance, pool)\n          tempVect.unsafeInject(instance)\n          tempVect.setType('Float64Array')\n          const tempArr = tempVect.toArray() as Float64Array\n          tempVect.delete()\n          return tempArr\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The total number of CKKS slots available to hold data\n       *\n       * @readonly\n       * @name CKKSEncoder#slotCount\n       * @type {number}\n       */\n      get slotCount() {\n        return _instance.slotCount()\n      }\n    }\n  }\n\nexport const CKKSEncoderInit = ({\n  loader\n}: LoaderOptions): CKKSEncoderDependencies => {\n  const library: Library = loader.library\n  return CKKSEncoderConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\nimport { Exception, SealError } from './exception'\nimport { SecurityLevel } from './security-level'\nimport { Vector, VectorConstructorOptions } from './vector'\nimport { UNSUPPORTED_BITSIZES_TYPE } from './constants'\n\nexport type CoeffModulusDependencyOptions = {\n  readonly Exception: Exception\n  readonly SecurityLevel: SecurityLevel\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type CoeffModulusDependencies = {\n  ({\n    Exception,\n    SecurityLevel,\n    Vector\n  }: CoeffModulusDependencyOptions): CoeffModulusConstructorOptions\n}\n\nexport type CoeffModulusConstructorOptions = {\n  (): CoeffModulus\n}\n\nexport type CoeffModulus = {\n  readonly MaxBitCount: (\n    polyModulusDegree: number,\n    securityLevel?: SecurityLevel\n  ) => number\n  readonly BFVDefault: (\n    polyModulusDegree: number,\n    securityLevel?: SecurityLevel\n  ) => Vector\n  readonly Create: (polyModulusDegree: number, bitSizes: Int32Array) => Vector\n}\n\nconst CoeffModulusConstructor =\n  (library: Library): CoeffModulusDependencies =>\n  ({\n    Exception,\n    SecurityLevel,\n    Vector\n  }: CoeffModulusDependencyOptions): CoeffModulusConstructorOptions =>\n  (): CoeffModulus => {\n    // Static methods\n    const _MaxBitCount = library.CoeffModulus.MaxBitCount\n    const _BFVDefault = library.CoeffModulus.BFVDefault\n    const _CreateFromArray = library.CoeffModulus.CreateFromArray\n\n    /**\n     * @implements CoeffModulus\n     */\n\n    /**\n     * @interface CoeffModulus\n     */\n    return {\n      /**\n       * Returns the Maximum Bit Count for the specified polyModulusDegree and securityLevel\n       *\n       * @function\n       * @name CoeffModulus.MaxBitCount\n       * @param {number} polyModulusDegree Degree of the polynomial modulus\n       * @param {SecurityLevel} [securityLevel={@link SecurityLevel.tc128}] Security Level\n       * @returns {number} Maximum bit count\n       */\n      MaxBitCount(\n        polyModulusDegree: number,\n        securityLevel: SecurityLevel = SecurityLevel.tc128\n      ): number {\n        return _MaxBitCount(polyModulusDegree, securityLevel)\n      },\n\n      /**\n       * Returns a default vector of primes for the BFV CoeffModulus parameter\n       *\n       * @function\n       * @name CoeffModulus.BFVDefault\n       * @param {number} polyModulusDegree Degree of the polynomial modulus\n       * @param {SecurityLevel} [securityLevel={@link SecurityLevel.tc128}] Security Level\n       * @returns {Vector} Vector containing Modulus primes\n       */\n      BFVDefault(\n        polyModulusDegree: number,\n        securityLevel: SecurityLevel = SecurityLevel.tc128\n      ): Vector {\n        try {\n          const vectorModulus = Vector()\n          const instance = _BFVDefault(polyModulusDegree, securityLevel)\n          vectorModulus.unsafeInject(instance)\n          vectorModulus.setType('Modulus')\n          return vectorModulus\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Creates a vector of primes for a given polyModulusDegree and bitSizes\n       *\n       * @function\n       * @name CoeffModulus.Create\n       * @param {number} polyModulusDegree Degree of the polynomial modulus\n       * @param {Int32Array} bitSizes Int32Array containing values representing\n       * bit-sizes of primes\n       * @returns {Vector} Vector containing Modulus primes\n       */\n      Create(polyModulusDegree: number, bitSizes: Int32Array): Vector {\n        try {\n          if (bitSizes.constructor !== Int32Array) {\n            throw new Error(UNSUPPORTED_BITSIZES_TYPE)\n          }\n          const vectorModulus = Vector()\n          const instance = _CreateFromArray(polyModulusDegree, bitSizes)\n          vectorModulus.unsafeInject(instance)\n          vectorModulus.setType('Modulus')\n          return vectorModulus\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const CoeffModulusInit = ({\n  loader\n}: LoaderOptions): CoeffModulusDependencies => {\n  const library: Library = loader.library\n  return CoeffModulusConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type ComprModeTypeDependencies = {\n  (): ComprModeTypeConstructorOptions\n}\n\nexport type ComprModeTypeConstructorOptions = {\n  (): ComprModeType\n}\n\nexport type ComprModeType = {\n  readonly none: any\n  readonly zlib: any\n  readonly zstd: any\n}\n\nconst ComprModeTypeConstructor =\n  (library: Library): ComprModeTypeDependencies =>\n  (): ComprModeTypeConstructorOptions =>\n  (): ComprModeType => {\n    // Static methods\n    const _none = library.ComprModeType.none\n    const _zlib = library.ComprModeType.zlib\n    const _zstd = library.ComprModeType.zstd\n\n    /**\n     * @implements ComprModeType\n     */\n\n    /**\n     * @interface ComprModeType\n     */\n    return {\n      /**\n       * The `none` Compression Mode Type\n       *\n       * @readonly\n       * @name ComprModeType.none\n       * @type {ComprModeType.none}\n       */\n      get none() {\n        /**\n         * @typedef {ComprModeType.none} ComprModeType.none\n         */\n        return _none\n      },\n\n      /**\n       * The `zlib` Compression Mode Type\n       *\n       * @readonly\n       * @name ComprModeType.zlib\n       * @type {ComprModeType.zlib}\n       */\n      get zlib() {\n        /**\n         * @typedef {ComprModeType.zlib} ComprModeType.zlib\n         */\n        return _zlib\n      },\n\n      /**\n       * The `zstd` Compression Mode Type\n       *\n       * @readonly\n       * @name ComprModeType.zstd\n       * @type {ComprModeType.zstd}\n       */\n      get zstd() {\n        /**\n         * @typedef {ComprModeType.zstd} ComprModeType.zstd\n         */\n        return _zstd\n      }\n    }\n  }\n\nexport const ComprModeTypeInit = ({\n  loader\n}: LoaderOptions): ComprModeTypeDependencies => {\n  const library: Library = loader.library\n  return ComprModeTypeConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception } from './exception'\nimport {\n  EncryptionParameters,\n  EncryptionParametersConstructorOptions\n} from './encryption-parameters'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport {\n  EncryptionParameterQualifiers,\n  EncryptionParameterQualifiersConstructorOptions\n} from './encryption-parameter-qualifiers'\n\nexport type ContextDataDependencyOptions = {\n  readonly Exception: Exception\n  readonly EncryptionParameters: EncryptionParametersConstructorOptions\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersConstructorOptions\n}\n\nexport type ContextDataDependencies = {\n  ({\n    Exception,\n    EncryptionParameters,\n    ParmsIdType,\n    EncryptionParameterQualifiers\n  }: ContextDataDependencyOptions): ContextDataConstructorOptions\n}\n\nexport type ContextDataConstructorOptions = {\n  (): ContextData\n}\n\nexport type ContextData = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly parms: EncryptionParameters\n  readonly parmsId: ParmsIdType\n  readonly qualifiers: EncryptionParameterQualifiers\n  readonly totalCoeffModulusBitCount: number\n  readonly prevContextData: ContextData\n  readonly nextContextData: ContextData\n  readonly chainIndex: number\n}\n\nconst ContextDataConstructor =\n  (library: Library): ContextDataDependencies =>\n  ({\n    Exception,\n    EncryptionParameters,\n    ParmsIdType,\n    EncryptionParameterQualifiers\n  }: ContextDataDependencyOptions): ContextDataConstructorOptions =>\n  (): ContextData => {\n    let _instance: Instance\n    /**\n     * @implements ContextData\n     */\n\n    /**\n     * @interface ContextData\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name ContextData#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name ContextData#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name ContextData#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Returns a const reference to the underlying encryption parameters.\n       *\n       * @readonly\n       * @name ContextData#parms\n       * @type {EncryptionParameters}\n       */\n      get parms() {\n        const instance = _instance.parms()\n        const encryptionParameters = EncryptionParameters()\n        encryptionParameters.unsafeInject(instance)\n        return encryptionParameters\n      },\n\n      /**\n       * Returns the parmsId of the current parameters.\n       *\n       * @readonly\n       * @name ContextData#parmsId\n       * @type {ParmsIdType}\n       */\n      get parmsId() {\n        const parms = ParmsIdType()\n        parms.inject(_instance.parmsId())\n        return parms\n      },\n\n      /**\n       * Returns a copy of EncryptionParameterQualifiers corresponding to the\n       * current encryption parameters. Note that to change the qualifiers it is\n       * necessary to create a new instance of SEALContext once appropriate changes\n       * to the encryption parameters have been made.\n       *\n       * @readonly\n       * @name ContextData#qualifiers\n       * @type {EncryptionParameterQualifiers}\n       */\n      get qualifiers() {\n        const encParmQualifiers = EncryptionParameterQualifiers()\n        encParmQualifiers.unsafeInject(_instance.qualifiers())\n        return encParmQualifiers\n      },\n\n      /**\n       * Returns the significant bit count of the total coefficient modulus.\n       *\n       * @readonly\n       * @name ContextData#totalCoeffModulusBitCount\n       * @type {number}\n       */\n      get totalCoeffModulusBitCount() {\n        return _instance.totalCoeffModulusBitCount()\n      },\n\n      /**\n       * Returns a shared_ptr to the context data corresponding to the previous parameters\n       * in the modulus switching chain. If the current data is the first one in the\n       * chain, then the result is nullptr.\n       *\n       * @readonly\n       * @name ContextData#prevContextData\n       * @type {ContextData}\n       */\n      get prevContextData() {\n        const cxtData = ContextDataConstructor(library)({\n          Exception,\n          EncryptionParameters,\n          ParmsIdType,\n          EncryptionParameterQualifiers\n        })()\n        cxtData.unsafeInject(_instance.prevContextData())\n        return cxtData\n      },\n\n      /**\n       * Returns a shared_ptr to the context data corresponding to the next parameters\n       * in the modulus switching chain. If the current data is the last one in the\n       * chain, then the result is nullptr.\n       *\n       * @readonly\n       * @name ContextData#nextContextData\n       * @type {ContextData}\n       */\n      get nextContextData() {\n        const cxtData = ContextDataConstructor(library)({\n          Exception,\n          EncryptionParameters,\n          ParmsIdType,\n          EncryptionParameterQualifiers\n        })()\n        cxtData.unsafeInject(_instance.nextContextData())\n        return cxtData\n      },\n\n      /**\n       * Returns the index of the parameter set in a chain. The initial parameters\n       * have index 0 and the index increases sequentially in the parameter chain.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#chainIndex\n       * @type {number}\n       */\n      get chainIndex() {\n        return _instance.chainIndex()\n      }\n    }\n  }\n\nexport const ContextDataInit = ({\n  loader\n}: LoaderOptions): ContextDataDependencies => {\n  const library: Library = loader.library\n  return ContextDataConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { ContextData, ContextDataConstructorOptions } from './context-data'\nimport { EncryptionParameters } from './encryption-parameters'\nimport { SecurityLevel } from './security-level'\n\nexport type ContextDependencyOptions = {\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly ContextData: ContextDataConstructorOptions\n  readonly SecurityLevel: SecurityLevel\n}\n\nexport type ContextDependencies = {\n  ({\n    ParmsIdType,\n    ContextData,\n    SecurityLevel\n  }: ContextDependencyOptions): ContextConstructorOptions\n}\n\nexport type ContextConstructorOptions = {\n  (\n    encryptionParams: EncryptionParameters,\n    expandModChain?: boolean,\n    securityLevel?: SecurityLevel\n  ): Context\n}\n\nexport type Context = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly toHuman: () => string\n  readonly getContextData: (parmsId: ParmsIdType) => ContextData\n  readonly keyContextData: ContextData\n  readonly firstContextData: ContextData\n  readonly lastContextData: ContextData\n  readonly parametersSet: () => boolean\n  readonly keyParmsId: ParmsIdType\n  readonly firstParmsId: ParmsIdType\n  readonly lastParmsId: ParmsIdType\n  readonly usingKeyswitching: boolean\n}\n\nconst ContextConstructor =\n  (library: Library): ContextDependencies =>\n  ({\n    ParmsIdType,\n    ContextData,\n    SecurityLevel\n  }: ContextDependencyOptions): ContextConstructorOptions =>\n  (\n    encryptionParams,\n    expandModChain = true,\n    securityLevel = SecurityLevel.tc128\n  ): Context => {\n    // Static methods\n    const Constructor = library.SEALContext\n\n    let _instance = new Constructor(\n      encryptionParams.instance,\n      expandModChain,\n      securityLevel\n    ) as Instance\n\n    /**\n     * @implements Context\n     */\n\n    /**\n     * @interface Context\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Context#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Context#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Context#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Returns the context parameters in a human readable string format.\n       *\n       * @private\n       * @function\n       * @name Context#toString\n       * @returns {string} Context details as a string\n       */\n      toHuman(): string {\n        return _instance.toHuman()\n      },\n\n      /**\n       * Returns the ContextData corresponding to encryption parameters with a given\n       * parmsId. If parameters with the given parmsId are not found then the\n       * function returns nullptr.\n       *\n       * @function\n       * @name Context#getContextData\n       * @param {ParmsIdType} parmsId Specific id to return ContextData for\n       * @returns {ContextData} ContextData corresponding to encryption parameters\n       */\n      getContextData(parmsId: ParmsIdType): ContextData {\n        const instance = _instance.getContextData(parmsId.instance)\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * The ContextData corresponding to encryption parameters that are used for keys.\n       *\n       * @readonly\n       * @name Context#keyContextData\n       * @type {ContextData}\n       */\n      get keyContextData() {\n        const instance = _instance.keyContextData()\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * The ContextData corresponding to the first encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#firstContextData\n       * @type {ContextData}\n       */\n      get firstContextData() {\n        const instance = _instance.firstContextData()\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * Returns the ContextData corresponding to the last encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#lastContextData\n       * @type {ContextData}\n       */\n      get lastContextData() {\n        const instance = _instance.lastContextData()\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * Whether the encryption parameters are set in a way that is considered valid by\n       * Microsoft SEAL, the variable parameters_set is set to true.\n       *\n       * @function\n       * @name Context#parametersSet\n       * @type {boolean}\n       */\n      parametersSet() {\n        return _instance.parametersSet()\n      },\n\n      /**\n       * Returns a ParmsIdType corresponding to the set of encryption parameters that are used for keys.\n       *\n       * @readonly\n       * @name Context#keyParmsId\n       * @type {ParmsIdType}\n       */\n      get keyParmsId() {\n        const instance = _instance.keyParmsId()\n        const parmsId = ParmsIdType()\n        parmsId.inject(instance)\n        return parmsId\n      },\n\n      /**\n       * Returns a ParmsIdType corresponding to the first encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#firstParmsId\n       * @type {ParmsIdType}\n       */\n      get firstParmsId() {\n        const instance = _instance.firstParmsId()\n        const parmsId = ParmsIdType()\n        parmsId.inject(instance)\n        return parmsId\n      },\n\n      /**\n       * The ParmsIdType corresponding to the last encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#lastParmsId\n       * @type {ParmsIdType}\n       */\n      get lastParmsId() {\n        const instance = _instance.lastParmsId()\n        const parmsId = ParmsIdType()\n        parmsId.inject(instance)\n        return parmsId\n      },\n\n      /**\n       * Whether the coefficient modulus supports keyswitching. In practice,\n       * support for keyswitching is required by Evaluator.relinearize,\n       * Evaluator.applyGalois, and all rotation and conjugation operations. For\n       * keyswitching to be available, the coefficient modulus parameter must consist\n       * of at least two prime number factors.\n       *\n       * @readonly\n       * @name Context#usingKeyswitching\n       * @type {boolean}\n       */\n      get usingKeyswitching() {\n        return _instance.usingKeyswitching()\n      }\n    }\n  }\n\nexport const ContextInit = ({ loader }: LoaderOptions): ContextDependencies => {\n  const library: Library = loader.library\n  return ContextConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { CipherText } from './cipher-text'\nimport { Context } from './context'\nimport { SecretKey } from './secret-key'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\n\nexport type DecryptorDependencyOptions = {\n  readonly Exception: Exception\n  readonly PlainText: PlainTextConstructorOptions\n}\n\nexport type DecryptorDependencies = {\n  ({\n    Exception,\n    PlainText\n  }: DecryptorDependencyOptions): DecryptorConstructorOptions\n}\n\nexport type DecryptorConstructorOptions = {\n  (context: Context, secretKey: SecretKey): Decryptor\n}\n\nexport type Decryptor = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly decrypt: (\n    cipherText: CipherText,\n    plainText?: PlainText\n  ) => PlainText | void\n  readonly invariantNoiseBudget: (cipherText: CipherText) => number\n}\n\nconst DecryptorConstructor =\n  (library: Library): DecryptorDependencies =>\n  ({\n    Exception,\n    PlainText\n  }: DecryptorDependencyOptions): DecryptorConstructorOptions =>\n  (context, secretKey): Decryptor => {\n    const Constructor = library.Decryptor\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance, secretKey.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements Decryptor\n     */\n\n    /**\n     * @interface Decryptor\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Decryptor#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Decryptor#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Decryptor#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Decrypts a CipherText and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Decryptor#decrypt\n       * @param {CipherText} cipherText CipherText to decrypt\n       * @param {PlainText} [plainText] PlainText destination to store the decrypted result\n       * @returns {PlainText|void} Returns undefined if a PlainText was specified. Otherwise returns a\n       * PlainText containng the decrypted result\n       */\n      decrypt(cipherText: CipherText, plainText?: PlainText): PlainText | void {\n        try {\n          if (plainText) {\n            _instance.decrypt(cipherText.instance, plainText.instance)\n            return\n          }\n          const plain = PlainText()\n          _instance.decrypt(cipherText.instance, plain.instance)\n          return plain\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Computes the invariant noise budget (in bits) of a CipherText. The invariant\n       * noise budget measures the amount of room there is for the noise to grow while\n       * ensuring correct decryptions. This function works only with the BFV scheme.\n       *\n       * @par Invariant Noise Budget\n       * The invariant noise polynomial of a CipherText is a rational coefficient\n       * polynomial, such that a CipherText decrypts correctly as long as the\n       * coefficients of the invariantnoise polynomial are of absolute value less\n       * than 1/2. Thus, we call the infinity-norm of the invariant noise polynomial\n       * the invariant noise, and for correct decryption requireit to be less than\n       * 1/2. If v denotes the invariant noise, we define the invariant noise budget\n       * as -log2(2v). Thus, the invariant noise budget starts from some initial\n       * value, which depends on the encryption parameters, and decreases when\n       * computations are performed. When the budget reaches zero, the CipherText\n       * becomes too noisy to decrypt correctly.\n       *\n       * @function\n       * @name Decryptor#invariantNoiseBudget\n       * @param {CipherText} cipherText CipherText to measure\n       * @returns {number} Invariant noise budget (in bits)\n       */\n      invariantNoiseBudget(cipherText: CipherText): number {\n        try {\n          return _instance.invariantNoiseBudget(cipherText.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const DecryptorInit = ({\n  loader\n}: LoaderOptions): DecryptorDependencies => {\n  const library: Library = loader.library\n  return DecryptorConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Vector, VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { SchemeType } from './scheme-type'\nimport { Exception, SealError } from './exception'\nimport { Modulus, ModulusConstructorOptions } from './modulus'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\n\nexport type EncryptionParametersDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Modulus: ModulusConstructorOptions\n  readonly SchemeType: SchemeType\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type EncryptionParametersDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Modulus,\n    SchemeType,\n    Vector\n  }: EncryptionParametersDependencyOptions): EncryptionParametersConstructorOptions\n}\n\nexport type EncryptionParametersConstructorOptions = {\n  (schemeType?: SchemeType): EncryptionParameters\n}\n\nexport type EncryptionParameters = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly setPolyModulusDegree: (polyModulusDegree: number) => void\n  readonly setCoeffModulus: (coeffModulus: Vector) => void\n  readonly setPlainModulus: (plainModulus: Modulus) => void\n  readonly scheme: SchemeType\n  readonly polyModulusDegree: number\n  readonly coeffModulus: BigUint64Array\n  readonly plainModulus: Modulus\n  readonly parmsId: ParmsIdType\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (encoded: string) => void\n  readonly loadArray: (array: Uint8Array) => void\n}\n\nconst EncryptionParametersConstructor =\n  (library: Library): EncryptionParametersDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Modulus,\n    SchemeType,\n    ParmsIdType,\n    Vector\n  }: EncryptionParametersDependencyOptions): EncryptionParametersConstructorOptions =>\n  (schemeType: SchemeType = SchemeType.none): EncryptionParameters => {\n    const Constructor = library.EncryptionParameters\n    let _instance = new Constructor(schemeType)\n\n    /**\n     * @implements EncryptionParameters\n     */\n\n    /**\n     * @interface EncryptionParameters\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name EncryptionParameters#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name EncryptionParameters#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name EncryptionParameters#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Sets the degree of the polynomial modulus parameter to the specified value.\n       * The polynomial modulus directly affects the number of coefficients in\n       * PlainText polynomials, the size of CipherText elements, the computational\n       * performance of the scheme (bigger is worse), and the security level (bigger\n       * is better). In Microsoft SEAL the degree of the polynomial modulus must be a power\n       * of 2 (e.g.  1024, 2048, 4096, 8192, 16384, or 32768).\n       *\n       * @function\n       * @name EncryptionParameters#setPolyModulusDegree\n       * @param {number} polyModulusDegree The degree of the polynomial modulus\n       */\n      setPolyModulusDegree(polyModulusDegree: number) {\n        try {\n          _instance.setPolyModulusDegree(polyModulusDegree)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sets the coefficient modulus parameter. The coefficient modulus consists\n       * of a list of distinct prime numbers, and is represented by a vector of\n       * Modulus objects. The coefficient modulus directly affects the size\n       * of CipherText elements, the amount of computation that the scheme can perform\n       * (bigger is better), and the security level (bigger is worse). In Microsoft SEAL each\n       * of the prime numbers in the coefficient modulus must be at most 60 bits,\n       * and must be congruent to 1 modulo 2*degree(poly_modulus).\n       *\n       * @function\n       * @name EncryptionParameters#setCoeffModulus\n       * @param {Vector} coeffModulus Vector of Modulus primes\n       */\n      setCoeffModulus(coeffModulus: Vector) {\n        try {\n          _instance.setCoeffModulus(coeffModulus.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sets the PlainText modulus parameter. The PlainText modulus is an integer\n       * modulus represented by the Modulus class. The PlainText modulus\n       * determines the largest coefficient that PlainText polynomials can represent.\n       * It also affects the amount of computation that the scheme can perform\n       * (bigger is worse). In Microsoft SEAL the PlainText modulus can be at most 60 bits\n       * long, but can otherwise be any integer. Note, however, that some features\n       * (e.g. batching) require the PlainText modulus to be of a particular form.\n       *\n       * @function\n       * @name EncryptionParameters#setPlainModulus\n       * @param {Modulus} plainModulus PlainText modulus parameter\n       */\n      setPlainModulus(plainModulus: Modulus) {\n        try {\n          _instance.setPlainModulus(plainModulus.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The encryption scheme type.\n       *\n       * @readonly\n       * @name EncryptionParameters#scheme\n       * @type {SchemeType.none|SchemeType.bfv|SchemeType.ckks}\n       */\n      get scheme() {\n        return _instance.scheme()\n      },\n\n      /**\n       * The degree of the polynomial modulus parameter.\n       *\n       * @readonly\n       * @name EncryptionParameters#polyModulusDegree\n       * @type {number}\n       */\n      get polyModulusDegree() {\n        return _instance.polyModulusDegree()\n      },\n\n      /**\n       * Returns the currently set coefficient modulus parameter.\n       *\n       * @readonly\n       * @name EncryptionParameters#coeffModulus\n       * @type {BigUint64Array}\n       */\n      get coeffModulus() {\n        const tempVect = Vector()\n        const instance = _instance.coeffModulus()\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Modulus')\n        const tempArr = tempVect.toArray() as BigUint64Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Returns the currently set PlainText modulus parameter.\n       *\n       * @readonly\n       * @name EncryptionParameters#plainModulus\n       * @type {Modulus}\n       */\n      get plainModulus() {\n        const instance = _instance.plainModulus()\n        const smallModulus = Modulus(BigInt(0))\n        smallModulus.inject(instance)\n        return smallModulus\n      },\n\n      /**\n       * Returns the ParmsId of the current parameters.\n       *\n       * @readonly\n       * @name EncryptionParameters#parmsId\n       * @type {ParmsIdType}\n       */\n      get parmsId() {\n        const parms = ParmsIdType()\n        parms.inject(_instance.parmsId())\n        return parms\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name EncryptionParameters#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the Encryption Parameters as a binary Uint8Array\n       *\n       * @function\n       * @name EncryptionParameters#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the CipherText in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load the Encryption Parameters from a base64 string\n       *\n       * @function\n       * @name EncryptionParameters#load\n       * @param {string} encoded base64 encoded string\n       */\n      load(encoded: string) {\n        try {\n          _instance.loadFromString(encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load the Encryption Parameters from an Uint8Array holding binary data\n       *\n       * @function\n       * @name EncryptionParameters#loadArray\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(array: Uint8Array) {\n        try {\n          _instance.loadFromArray(array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const EncryptionParametersInit = ({\n  loader\n}: LoaderOptions): EncryptionParametersDependencies => {\n  const library: Library = loader.library\n  return EncryptionParametersConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { CipherText, CipherTextConstructorOptions } from './cipher-text'\nimport { Context } from './context'\nimport { Serializable, SerializableConstructorOptions } from './serializable'\nimport { PublicKey } from './public-key'\nimport { SecretKey } from './secret-key'\nimport { PlainText } from './plain-text'\n\nexport type EncryptorDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly CipherText: CipherTextConstructorOptions\n  readonly Serializable: SerializableConstructorOptions\n}\n\nexport type EncryptorDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    Serializable\n  }: EncryptorDependencyOptions): EncryptorConstructorOptions\n}\n\nexport type EncryptorConstructorOptions = {\n  (context: Context, publicKey: PublicKey, secretKey?: SecretKey): Encryptor\n}\n\nexport type Encryptor = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encrypt: (\n    plainText: PlainText,\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptSerializable: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => Serializable\n  readonly encryptSymmetric: (\n    plainText: PlainText,\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptSymmetricSerializable: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => Serializable\n  readonly encryptZero: (\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptZeroSerializable: (pool?: MemoryPoolHandle) => Serializable\n}\n\nconst EncryptorConstructor =\n  (library: Library): EncryptorDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    Serializable\n  }: EncryptorDependencyOptions): EncryptorConstructorOptions =>\n  (context, publicKey, secretKey): Encryptor => {\n    const Constructor = library.Encryptor\n    let _instance = constructInstance(context, publicKey, secretKey)\n\n    function constructInstance(\n      context: Context,\n      publicKey: PublicKey,\n      secretKey?: SecretKey\n    ) {\n      try {\n        if (secretKey) {\n          return new Constructor(\n            context.instance,\n            publicKey.instance,\n            secretKey.instance\n          )\n        }\n        return new Constructor(context.instance, publicKey.instance)\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements Encryptor\n     */\n\n    /**\n     * @interface Encryptor\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Encryptor#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Encryptor#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Encryptor#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Encrypts a PlainText and stores the result in the destination parameter.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encrypt\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {CipherText} [cipherText] CipherText destination to store the encrypted result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n       * CipherText containing the encrypted result\n       */\n      encrypt(\n        plainText: PlainText,\n        cipherText?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (cipherText) {\n            _instance.encrypt(plainText.instance, cipherText.instance, pool)\n            return\n          }\n          const cipher = CipherText()\n          _instance.encrypt(plainText.instance, cipher.instance, pool)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a PlainText and returns a CipherText as a Serializable object.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptSerializable\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Serializable<CipherText>} A Serializable containing the encrypted result\n       */\n      encryptSerializable(\n        plainText: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Serializable {\n        try {\n          const temp = Serializable()\n          const instance = _instance.encryptSerializable(\n            plainText.instance,\n            pool\n          )\n          temp.unsafeInject(instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a PlainText with the secret key and stores the result in\n       * destination.\n       *\n       * The encryption parameters for the resulting CipherText\n       * correspond to:\n       * 1) in BFV or BGV, the highest (data) level in the modulus switching chain,\n       * 2) in CKKS, the encryption parameters of the plaintext.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptSymmetric\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {CipherText} [cipherText] CipherText destination to store the encrypted result.\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n       * CipherText containing the encrypted result\n       */\n      encryptSymmetric(\n        plainText: PlainText,\n        cipherText?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (cipherText) {\n            _instance.encryptSymmetric(\n              plainText.instance,\n              cipherText.instance,\n              pool\n            )\n            return\n          }\n          const cipher = CipherText()\n          _instance.encryptSymmetric(plainText.instance, cipher.instance, pool)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a plaintext with the secret key and returns the ciphertext as\n       * a serializable object.\n       *\n       * The encryption parameters for the resulting CipherText\n       * correspond to:\n       * 1) in BFV or BGV, the highest (data) level in the modulus switching chain,\n       * 2) in CKKS, the encryption parameters of the plaintext.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * Half of the ciphertext data is pseudo-randomly generated from a seed to\n       * reduce the object size. The resulting serializable object cannot be used\n       * directly and is meant to be serialized for the size reduction to have an\n       * impact.\n       *\n       * @function\n       * @name Encryptor#encryptSymmetricSerializable\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Serializable<CipherText>} Returns a Serializable containing the encrypted result\n       */\n      encryptSymmetricSerializable(\n        plainText: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.encryptSymmetricSerializable(\n            plainText.instance,\n            pool\n          )\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a zero plaintext with the public key and returns the ciphertext\n       * as a serializable object.\n       *\n       * The encryption parameters for the resulting ciphertext correspond to the\n       * highest (data) level in the modulus switching chain. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed to\n       * by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptZero\n       * @param {CipherText} [cipherText] A CipherText to overwrite.\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n       * CipherText containing the encrypted result\n       */\n      encryptZero(\n        cipherText?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (cipherText) {\n            _instance.encryptZero(cipherText.instance, pool)\n            return\n          }\n          const cipher = CipherText()\n          _instance.encryptZero(cipher.instance, pool)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a zero plaintext with the public key and stores the result in\n       * destination.\n       *\n       * The encryption parameters for the resulting ciphertext correspond to the\n       * highest (data) level in the modulus switching chain. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed to\n       * by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptZeroSerializable\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Serializable<CipherText>} A CipherText as a serialized object containing the encrypted result\n       */\n      encryptZeroSerializable(\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.encryptZeroSerializable(pool)\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const EncryptorInit = ({\n  loader\n}: LoaderOptions): EncryptorDependencies => {\n  const library: Library = loader.library\n  return EncryptorConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { CipherText, CipherTextConstructorOptions } from './cipher-text'\nimport { Context } from './context'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { RelinKeys } from './relin-keys'\nimport { ParmsIdType } from './parms-id-type'\nimport { GaloisKeys } from './galois-keys'\nimport { SchemeType } from './scheme-type'\n\nexport type EvaluatorDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly CipherText: CipherTextConstructorOptions\n  readonly PlainText: PlainTextConstructorOptions\n}\n\nexport type EvaluatorDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    PlainText\n  }: EvaluatorDependencyOptions): EvaluatorConstructorOptions\n}\n\nexport type EvaluatorConstructorOptions = {\n  (context: Context): Evaluator\n}\n\nexport type Evaluator = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly negate: (\n    encrypted: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly add: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly sub: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly multiply: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly square: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly relinearize: (\n    encrypted: CipherText,\n    relinKeys: RelinKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly cipherModSwitchToNext: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly cipherModSwitchTo: (\n    encrypted: CipherText,\n    parmsId: ParmsIdType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly plainModSwitchToNext: (\n    plain: PlainText,\n    destination?: PlainText\n  ) => PlainText | void\n  readonly plainModSwitchTo: (\n    plain: PlainText,\n    parmsId: ParmsIdType,\n    destination?: PlainText\n  ) => PlainText | void\n  readonly rescaleToNext: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rescaleTo: (\n    encrypted: CipherText,\n    parmsId: ParmsIdType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly modReduceToNext: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly modReduceTo: (\n    encrypted: CipherText,\n    parmsId: ParmsIdType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly exponentiate: (\n    encrypted: CipherText,\n    exponent: number,\n    relinKeys: RelinKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly addPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly subPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly multiplyPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly plainTransformToNtt: (\n    plain: PlainText,\n    parmsId: ParmsIdType,\n    destinationNtt?: PlainText,\n    pool?: MemoryPoolHandle\n  ) => PlainText | void\n  readonly cipherTransformToNtt: (\n    encrypted: CipherText,\n    destinationNtt?: CipherText\n  ) => CipherText | void\n  readonly cipherTransformFromNtt: (\n    encryptedNtt: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly applyGalois: (\n    encrypted: CipherText,\n    galoisElt: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateRows: (\n    encrypted: CipherText,\n    steps: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateColumns: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateVector: (\n    encrypted: CipherText,\n    steps: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly complexConjugate: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly sumElements: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly dotProduct: (\n    a: CipherText,\n    b: CipherText,\n    relinKeys: RelinKeys,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly dotProductPlain: (\n    a: CipherText,\n    b: PlainText,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n}\n\nconst EvaluatorConstructor =\n  (library: Library): EvaluatorDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    PlainText\n  }: EvaluatorDependencyOptions): EvaluatorConstructorOptions =>\n  (context): Evaluator => {\n    const Constructor = library.Evaluator\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements Evaluator\n     */\n\n    /**\n     * @interface Evaluator\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Evaluator#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Evaluator#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Evaluator#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Negates a CipherText and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#negate\n       * @param {CipherText} encrypted CipherText to negate\n       * @param {CipherText} [destination] CipherText to store the negated results\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherText = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.negate(cipherText)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.negate(encrypted, cipherDest)\n       */\n      negate(\n        encrypted: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.negate(encrypted.instance, destination.instance)\n            return\n          }\n          const temp = CipherText()\n          _instance.negate(encrypted.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Adds two CipherTexts. This function adds together a and b\n       * and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#add\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {CipherText} [destination] CipherText destination to store the sum\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.add(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.add(cipherTextA, cipherTextB, cipherDest)\n       */\n      add(\n        a: CipherText,\n        b: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.add(a.instance, b.instance, destination.instance)\n            return\n          }\n          const temp = CipherText()\n          _instance.add(a.instance, b.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Subtracts two CipherTexts. This function computes the difference of a\n       * and b and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#sub\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {CipherText} [destination] CipherText destination to store the difference\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.sub(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.sub(cipherTextA, cipherTextB, cipherDest)\n       */\n      sub(\n        a: CipherText,\n        b: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.sub(a.instance, b.instance, destination.instance)\n            return\n          }\n          const temp = CipherText()\n          _instance.sub(a.instance, b.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Multiplies two CipherTexts. This functions computes the product of a\n       * and b and stores the result in the destination parameter. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#multiply\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {CipherText} [destination] CipherText destination to store the product\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.multiply(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.multiply(cipherTextA, cipherTextB, cipherDest)\n       */\n      multiply(\n        a: CipherText,\n        b: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiply(\n              a.instance,\n              b.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.multiply(a.instance, b.instance, temp.instance, pool)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Squares a CipherText. This functions computes the square of encrypted and\n       * stores the result in the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#square\n       * @param {CipherText} encrypted CipherText to square\n       * @param {CipherText} [destination] CipherText destination to store the squared result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.square(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.square(cipherTextA, cipherDest)\n       */\n      square(\n        encrypted: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.square(encrypted.instance, destination.instance, pool)\n            return\n          }\n          const temp = CipherText()\n          _instance.square(encrypted.instance, temp.instance, pool)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Relinearizes a CipherText. This functions relinearizes encrypted, reducing\n       * its size down to 2, and stores the result in the destination parameter.\n       * If the size of encrypted is K+1, the given relinearization keys need to\n       * have size at least K-1. Dynamic memory allocations in the process are allocated\n       * from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#relinearize\n       * @param {CipherText} encrypted CipherText to relinearize\n       * @param {RelinKeys} relinKeys RelinKey used to perform relinearization\n       * @param {CipherText} [destination] CipherText destination to store the relinearized result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const relinKeys = keyGenerator.createRelinKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.relinearize(cipherTextA, relinKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.relinearize(cipherTextA, relinKeys, cipherDest)\n       */\n      relinearize(\n        encrypted: CipherText,\n        relinKeys: RelinKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.relinearize(\n              encrypted.instance,\n              relinKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.relinearize(\n            encrypted.instance,\n            relinKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down to q_1...q_{k-1} and stores the result in the destination\n       * parameter. Dynamic memory allocations in the process are allocated from\n       * the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#cipherModSwitchToNext\n       * @param {CipherText} encrypted CipherText to switch its modulus down\n       * @param {CipherText} [destination] CipherText destination to store the switched result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.cipherModSwitchToNext(cipherTextA)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherModSwitchToNext(cipherTextA, cipherDest)\n       */\n      cipherModSwitchToNext(\n        encrypted: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.cipherModSwitchToNext(\n              encrypted.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherModSwitchToNext(\n            encrypted.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down until the parameters reach the given parmsId and stores the\n       * result in the destination parameter. Dynamic memory allocations in the process\n       * are allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#cipherModSwitchTo\n       * @param {CipherText} encrypted CipherText to switch its modulus down\n       * @param {ParmsIdType} parmsId Target parmsId to switch to\n       * @param {CipherText} [destination] CipherText destination to store the switched result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.cipherModSwitchTo(cipherTextA, parmsId)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherModSwitchTo(cipherTextA, parmsId, cipherDest)\n       */\n      cipherModSwitchTo(\n        encrypted: CipherText,\n        parmsId: ParmsIdType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.cipherModSwitchTo(\n              encrypted.instance,\n              parmsId.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherModSwitchTo(\n            encrypted.instance,\n            parmsId.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Modulus switches an NTT transformed PlainText from modulo q_1...q_k down\n       * to modulo q_1...q_{k-1} and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#plainModSwitchToNext\n       * @param {PlainText} plain PlainText to switch its modulus down\n       * @param {PlainText} [destination] PlainText destination to store the switched result\n       * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const resultCipher = evaluator.plainModSwitchToNext(plainTextA)\n       * // or\n       * const plainDest = seal.PlainText()\n       * evaluator.plainModSwitchToNext(plainTextA, plainDest)\n       */\n      plainModSwitchToNext(\n        plain: PlainText,\n        destination?: PlainText\n      ): PlainText | void {\n        try {\n          if (destination) {\n            _instance.plainModSwitchToNext(plain.instance, destination.instance)\n            return\n          }\n          const temp = PlainText()\n          _instance.plainModSwitchToNext(plain.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given an NTT transformed PlainText modulo q_1...q_k, this function switches\n       * the modulus down until the parameters reach the given parmsId and stores\n       * the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#plainModSwitchTo\n       * @param {PlainText} plain PlainText to switch its modulus down\n       * @param {ParmsIdType} parmsId Target parmsId to switch to\n       * @param {PlainText} [destination] PlainText destination to store the switched result\n       * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.plainModSwitchTo(plainTextA, parmsId)\n       * // or\n       * const plainDest = seal.PlainText()\n       * evaluator.plainModSwitchTo(plainTextA, parmsId, plainDest)\n       */\n      plainModSwitchTo(\n        plain: PlainText,\n        parmsId: ParmsIdType,\n        destination?: PlainText\n      ): PlainText | void {\n        try {\n          if (destination) {\n            _instance.plainModSwitchTo(\n              plain.instance,\n              parmsId.instance,\n              destination.instance\n            )\n            return\n          }\n          const temp = PlainText()\n          _instance.plainModSwitchTo(\n            plain.instance,\n            parmsId.instance,\n            temp.instance\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down to q_1...q_{k-1}, scales the message down accordingly, and\n       * stores the result in the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rescaleToNext\n       * @param {CipherText} encrypted CipherText to rescale\n       * @param {CipherText} [destination] CipherText destination to store the rescaled result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rescaleToNext(cipherTextA)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rescaleToNext(cipherTextA, cipherDest)\n       */\n      rescaleToNext(\n        encrypted: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rescaleToNext(\n              encrypted.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rescaleToNext(encrypted.instance, temp.instance, pool)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down until the parameters reach the given parmsId, scales the message\n       * down accordingly, and stores the result in the destination parameter. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rescaleTo\n       * @param {CipherText} encrypted CipherText to rescale\n       * @param {ParmsIdType} parmsId Target parmsId to rescale to\n       * @param {CipherText} [destination] CipherText destination to store the rescaled result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.rescaleTo(cipherTextA, parmsId)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rescaleTo(cipherTextA, parmsId, cipherDest)\n       */\n      rescaleTo(\n        encrypted: CipherText,\n        parmsId: ParmsIdType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rescaleTo(\n              encrypted.instance,\n              parmsId.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rescaleTo(\n            encrypted.instance,\n            parmsId.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a ciphertext encrypted modulo q_1...q_k, this function switches\n       * the modulus down to q_1...q_{k-1}, scales the message down accordingly,\n       * and stores the result in the destination parameter. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#modReduceToNext\n       * @param {CipherText} encrypted CipherText to reduce\n       * @param {CipherText} [destination] CipherText destination to store the\n       * reduced result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n       * MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if\n       * a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.modReduceToNext(cipherTextA)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.modReduceToNext(cipherTextA, cipherDest)\n       */\n      modReduceToNext(\n        encrypted: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.modReduceToNext(\n              encrypted.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.modReduceToNext(encrypted.instance, temp.instance, pool)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a ciphertext encrypted modulo q_1...q_k, this function reduces\n       * the modulus down until the parameters reach the given parms_id and\n       * stores the result in the destination parameter. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#modReduceTo\n       * @param {CipherText} encrypted CipherText to reduce\n       * @param {ParmsIdType} parmsId Target parmsId to reduce to\n       * @param {CipherText} [destination] CipherText destination to store the\n       * reduced result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n       * MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if\n       * a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.modReduceTo(cipherTextA, parmsId)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.modReduceTo(cipherTextA, parmsId, cipherDest)\n       */\n      modReduceTo(\n        encrypted: CipherText,\n        parmsId: ParmsIdType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.modReduceTo(\n              encrypted.instance,\n              parmsId.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.modReduceTo(\n            encrypted.instance,\n            parmsId.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Exponentiates a CipherText. This functions raises encrypted to a power and\n       * stores the result in the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle. The exponentiation is done in a depth-optimal order, and\n       * relinearization is performed automatically after every multiplication in\n       * the process. In relinearization the given relinearization keys are used.\n       *\n       * @function\n       * @name Evaluator#exponentiate\n       * @param {CipherText} encrypted CipherText to exponentiate\n       * @param {number} exponent Positive integer to exponentiate the CipherText\n       * @param {RelinKeys} relinKeys RelinKeys used to perform relinearization after each exponentiation\n       * @param {CipherText} [destination] CipherText destination to store the exponentiated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const relinKeys = keyGenerator.createRelinKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.exponentiate(cipherTextA, 3, relinKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.exponentiate(cipherTextA, 3, relinKeys, cipherDest)\n       */\n      exponentiate(\n        encrypted: CipherText,\n        exponent: number,\n        relinKeys: RelinKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.exponentiate(\n              encrypted.instance,\n              exponent,\n              relinKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.exponentiate(\n            encrypted.instance,\n            exponent,\n            relinKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Adds a CipherText and a PlainText. This function adds a CipherText and\n       * a PlainText and stores the result in the destination parameter. The PlainText\n       * must be valid for the current encryption parameters.\n       *\n       * @function\n       * @name Evaluator#addPlain\n       * @param {CipherText} encrypted CipherText operand A\n       * @param {PlainText} plain PlainText operand B\n       * @param {CipherText} [destination] CipherText destination to store the sum\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encrypting/encoding some data ...\n       * const resultCipher = evaluator.addPlain(cipherTextA, plainTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.addPlain(cipherTextA, plainTextB, cipherDest)\n       */\n      addPlain(\n        encrypted: CipherText,\n        plain: PlainText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.addPlain(\n              encrypted.instance,\n              plain.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.addPlain(\n            encrypted.instance,\n            plain.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Subtracts a PlainText from a CipherText. This function subtracts a PlainText\n       * from a CipherText and stores the result in the destination parameter. The\n       * PlainText must be valid for the current encryption parameters.\n       *\n       * @function\n       * @name Evaluator#subPlain\n       * @param {CipherText} encrypted CipherText operand A\n       * @param {PlainText} plain PlainText operand B\n       * @param {CipherText} [destination] CipherText destination to store the difference\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encrypting/encoding some data ...\n       * const resultCipher = evaluator.subPlain(cipherTextA, plainTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.subPlain(cipherTextA, plainTextB, cipherDest)\n       */\n      subPlain(\n        encrypted: CipherText,\n        plain: PlainText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.subPlain(\n              encrypted.instance,\n              plain.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.subPlain(\n            encrypted.instance,\n            plain.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Multiplies a CipherText with a PlainText. This function multiplies\n       * a CipherText with a PlainText and stores the result in the destination\n       * parameter. The PlainText must be a valid for the current encryption parameters,\n       * and cannot be identially 0. Dynamic memory allocations in the process are\n       * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#multiplyPlain\n       * @param {CipherText} encrypted CipherText operand A\n       * @param {PlainText} plain PlainText operand B\n       * @param {CipherText} [destination] CipherText destination to store the product\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText?} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encrypting/encoding some data ...\n       * const resultCipher = evaluator.multiplyPlain(cipherTextA, plainTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.multiplyPlain(cipherTextA, plainTextB, cipherDest)\n       */\n      multiplyPlain(\n        encrypted: CipherText,\n        plain: PlainText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiplyPlain(\n              encrypted.instance,\n              plain.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.multiplyPlain(\n            encrypted.instance,\n            plain.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Transforms a PlainText to NTT domain. This functions applies the number\n       * Theoretic Transform to a PlainText by first embedding integers modulo the\n       * PlainText modulus to integers modulo the coefficient modulus and then\n       * performing David Harvey's NTT on the resulting polynomial. The transformation\n       * is done with respect to encryption parameters corresponding to a given\n       * parmsId. The result is stored in the destinationNtt parameter. For the\n       * operation to be valid, the PlainText must have degree less than PolyModulusDegree\n       * and each coefficient must be less than the PlainText modulus, i.e., the PlainText\n       * must be a valid PlainText under the current encryption parameters. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#plainTransformToNtt\n       * @param {PlainText} plain PlainText to transform\n       * @param {ParmsIdType} parmsId target parmsId to perform NTT transformation\n       * @param {PlainText} [destinationNtt] PlainText destination to store the transformed result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.plainTransformToNtt(plainTextA, parmsId)\n       * // or\n       * const plainDest = seal.PlainText()\n       * evaluator.plainTransformToNtt(plainTextA, parmsId, plainDest)\n       */\n      plainTransformToNtt(\n        plain: PlainText,\n        parmsId: ParmsIdType,\n        destinationNtt?: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): PlainText | void {\n        try {\n          if (destinationNtt) {\n            _instance.plainTransformToNtt(\n              plain.instance,\n              parmsId.instance,\n              destinationNtt.instance,\n              pool\n            )\n            return\n          }\n          const temp = PlainText()\n          _instance.plainTransformToNtt(\n            plain.instance,\n            parmsId.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Transforms a CipherText to NTT domain. This functions applies David Harvey's\n       * number Theoretic Transform separately to each polynomial of a CipherText.\n       * The result is stored in the destinationNtt parameter.\n       *\n       * @function\n       * @name Evaluator#cipherTransformToNtt\n       * @param {CipherText} encrypted CipherText to transform\n       * @param {CipherText} [destinationNtt] CipherText destination to store the transformed result\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.cipherTransformToNtt(cipherTextA)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherTransformToNtt(cipherTextA, cipherDest)\n       */\n      cipherTransformToNtt(\n        encrypted: CipherText,\n        destinationNtt?: CipherText\n      ): CipherText | void {\n        try {\n          if (destinationNtt) {\n            _instance.cipherTransformToNtt(\n              encrypted.instance,\n              destinationNtt.instance\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherTransformToNtt(encrypted.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Transforms a CipherText back from NTT domain. This functions applies the\n       * inverse of David Harvey's number Theoretic Transform separately to each\n       * polynomial of a CipherText. The result is stored in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#cipherTransformFromNtt\n       * @param {CipherText} encryptedNtt CipherText to transform\n       * @param {CipherText} [destination] CipherText destination to store the transformed result\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * // ... after cipherTransformToNtt ...\n       * const resultCipher = evaluator.cipherTransformFromNtt(cipherTextANtt)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherTransformFromNtt(cipherTextANtt, cipherDest)\n       */\n      cipherTransformFromNtt(\n        encryptedNtt: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.cipherTransformFromNtt(\n              encryptedNtt.instance,\n              destination.instance\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherTransformFromNtt(encryptedNtt.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Applies a Galois automorphism to a CipherText and writes the result to the\n       * destination parameter. To evaluate the Galois automorphism, an appropriate\n       * set of Galois keys must also be provided. Dynamic memory allocations in\n       * the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * The desired Galois automorphism is given as a Galois element, and must be\n       * an odd integer in the interval [1, M-1], where M = 2*N, and N = degree(poly_modulus).\n       * Used with batching, a Galois element 3^i % M corresponds to a cyclic row\n       * rotation i steps to the left, and a Galois element 3^(N/2-i) % M corresponds\n       * to a cyclic row rotation i steps to the right. The Galois element M-1 corresponds\n       * to a column rotation (row swap) in BFV, and complex conjugation in CKKS.\n       * In the polynomial view (not batching), a Galois automorphism by a Galois\n       * element p changes Enc(plain(x)) to Enc(plain(x^p)).\n       *\n       * @function\n       * @name Evaluator#applyGalois\n       * @param {CipherText} encrypted CipherText to apply the automorphism\n       * @param {number} galoisElt number representing the Galois element\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * ...\n       * const evaluator = seal.Evaluator(context)\n       * const arr = Int32Array.from({ length: encoder.slotCount }, (_, i) => i)\n       * const plain = encoder.encode(arr)\n       * const cipher = encryptor.encrypt(plain)\n       * const cipherDest = seal.CipherText()\n       * const galElt = 2 * parms.polyModulusDegree - 1\n       * evaluator.applyGalois(cipher, galElt, galoisKeys, cipherDest)\n       */\n      applyGalois(\n        encrypted: CipherText,\n        galoisElt: number,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.applyGalois(\n              encrypted.instance,\n              galoisElt,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.applyGalois(\n            encrypted.instance,\n            galoisElt,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Rotates PlainText matrix rows cyclically. When batching is used with the\n       * BFV/BGV scheme, this function rotates the encrypted PlainText matrix rows\n       * cyclically to the left (steps > 0) or to the right (steps < 0) and writes\n       * the result to the destination parameter. Since the size of the batched\n       * matrix is 2-by-(N/2), where N is the degree of the polynomial modulus,\n       * the number of steps to rotate must have absolute value at most N/2-1. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rotateRows\n       * @param {CipherText} encrypted CipherText to rotate rows\n       * @param {number} steps Int representing steps to rotate (negative = right, positive = left)\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the rotated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rotateRows(cipherTextA, 3, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rotateRows(cipherTextA, 3, galoisKeys, cipherDest)\n       */\n      rotateRows(\n        encrypted: CipherText,\n        steps: number,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rotateRows(\n              encrypted.instance,\n              steps,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rotateRows(\n            encrypted.instance,\n            steps,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Rotates PlainText matrix columns cyclically. When batching is used with\n       * the BFV scheme, this function rotates the encrypted PlainText matrix columns\n       * cyclically, and writes the result to the destination parameter. Since the\n       * size of the batched matrix is 2-by-(N/2), where N is the degree of the\n       * polynomial modulus, this means simply swapping the two rows. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed to\n       * by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rotateColumns\n       * @param {CipherText} encrypted CipherText to rotate columns\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the rotated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rotateColumns(cipherTextA, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rotateColumns(cipherTextA, galoisKeys, cipherDest)\n       */\n      rotateColumns(\n        encrypted: CipherText,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rotateColumns(\n              encrypted.instance,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rotateColumns(\n            encrypted.instance,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Rotates PlainText vector cyclically. When using the CKKS scheme, this function\n       * rotates the encrypted PlainText vector cyclically to the left (steps > 0)\n       * or to the right (steps < 0) and writes the result to the destination parameter.\n       * Since the size of the batched matrix is 2-by-(N/2), where N is the degree\n       * of the polynomial modulus, the number of steps to rotate must have absolute\n       * value at most N/2-1. Dynamic memory allocations in the process are allocated\n       * from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rotateVector\n       * @param {CipherText} encrypted CipherText to rotate the entire vector\n       * @param {number} steps Int representing steps to rotate (negative = right, positive = left)\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the rotated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rotateVector(cipherTextA, 3, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rotateVector(cipherTextA, 3, galoisKeys, cipherDest)\n       */\n      rotateVector(\n        encrypted: CipherText,\n        steps: number,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rotateVector(\n              encrypted.instance,\n              steps,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rotateVector(\n            encrypted.instance,\n            steps,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Complex conjugates PlainText slot values. When using the CKKS scheme, this\n       * function complex conjugates all values in the underlying PlainText, and\n       * writes the result to the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#complexConjugate\n       * @param {CipherText} encrypted CipherText to complex conjugate\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the conjugated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.complexConjugate(cipherTextA, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.complexConjugate(cipherTextA, galoisKeys, cipherDest)\n       */\n      complexConjugate(\n        encrypted: CipherText,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.complexConjugate(\n              encrypted.instance,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.complexConjugate(\n            encrypted.instance,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sum all elements in the encrypted CipherText. The resulting CipherText contains the sum in every element.\n       *\n       * @function\n       * @name Evaluator#sumElements\n       * @param {CipherText} encrypted CipherText to sum elements\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {SchemeType} scheme Scheme that was used for encryption\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.sumElements(cipherTextA, galoisKeys, seal.SchemeTypes.BFV)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.sumElements(cipherTextA, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n       */\n      sumElements(\n        encrypted: CipherText,\n        galoisKeys: GaloisKeys,\n        scheme: SchemeType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.sumElements(\n              encrypted.instance,\n              galoisKeys.instance,\n              scheme,\n              destination.instance,\n              pool\n            )\n            return\n          }\n\n          const newDest = CipherText()\n          _instance.sumElements(\n            encrypted.instance,\n            galoisKeys.instance,\n            scheme,\n            newDest.instance,\n            pool\n          )\n          return newDest\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Perform the dot product (A.B) of two CipherTexts The resulting CipherText contains the dot product in every\n       * element.\n       *\n       * @function\n       * @name Evaluator#dotProduct\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {RelinKeys} relinKeys RelinKeys used to perform relinearization after multiplication\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {SchemeType} scheme Scheme that was used for encryption\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const relinKeys = keyGenerator.createRelinKeys()\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.dotProduct(cipherTextA, cipherTextB, relinKeys, galoisKeys, seal.SchemeTypes.BFV)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.dotProduct(cipherTextA, cipherTextB, relinKeys, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n       */\n      dotProduct(\n        a: CipherText,\n        b: CipherText,\n        relinKeys: RelinKeys,\n        galoisKeys: GaloisKeys,\n        scheme: SchemeType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiply(\n              a.instance,\n              b.instance,\n              destination.instance,\n              pool\n            )\n            _instance.relinearize(\n              destination.instance,\n              relinKeys.instance,\n              destination.instance,\n              pool\n            )\n            _instance.sumElements(\n              destination.instance,\n              galoisKeys.instance,\n              scheme,\n              destination.instance,\n              pool\n            )\n            return\n          }\n\n          const newDest = CipherText()\n          _instance.multiply(a.instance, b.instance, newDest.instance, pool)\n          _instance.relinearize(\n            newDest.instance,\n            relinKeys.instance,\n            newDest.instance,\n            pool\n          )\n          _instance.sumElements(\n            newDest.instance,\n            galoisKeys.instance,\n            scheme,\n            newDest.instance,\n            pool\n          )\n          return newDest\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Perform the dot product (A.B) of CipherText (A) and PlainText (B). The resulting CipherText contains the dot\n       * product in every element.\n       *\n       * @function\n       * @name Evaluator#dotProductPlain\n       * @param {CipherText} a CipherText operand A\n       * @param {PlainText} b PlainText operand B\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {SchemeType} scheme Scheme that was used for encryption\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encoding / encrypting some data ...\n       * const resultCipher = evaluator.dotProductPlain(cipherTextA, plainTextB, galoisKeys, seal.SchemeTypes.BFV)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.dotProductPlain(cipherTextA, plainTextB, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n       */\n      dotProductPlain(\n        a: CipherText,\n        b: PlainText,\n        galoisKeys: GaloisKeys,\n        scheme: SchemeType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiplyPlain(\n              a.instance,\n              b.instance,\n              destination.instance,\n              pool\n            )\n            _instance.sumElements(\n              destination.instance,\n              galoisKeys.instance,\n              scheme,\n              destination.instance,\n              pool\n            )\n            return\n          }\n\n          const newDest = CipherText()\n          _instance.multiplyPlain(\n            a.instance,\n            b.instance,\n            newDest.instance,\n            pool\n          )\n          _instance.sumElements(\n            newDest.instance,\n            galoisKeys.instance,\n            scheme,\n            newDest.instance,\n            pool\n          )\n          return newDest\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const EvaluatorInit = ({\n  loader\n}: LoaderOptions): EvaluatorDependencies => {\n  const library: Library = loader.library\n  return EvaluatorConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type ExceptionDependencies = {\n  (): ExceptionConstructorOptions\n}\n\nexport type ExceptionConstructorOptions = {\n  (): Exception\n}\n\nexport type SealError = number | Error | string\n\nexport type Exception = {\n  readonly safe: (e: SealError) => Error\n}\n\nconst ExceptionConstructor =\n  (library: Library): ExceptionDependencies =>\n  (): ExceptionConstructorOptions =>\n  (): Exception => {\n    // Static methods\n    const _getException = library.getException\n\n    /**\n     * @implements Exception\n     */\n\n    /**\n     * @interface Exception\n     */\n    return {\n      /**\n       * Takes a caught exception in SEAL library and gets a safe error string\n       *\n       * @function\n       * @name Exception.safe\n       * @param {(number|Error|string)} error Unsafe error to normalize\n       * @returns {Error}\n       */\n      safe(error: number | Error | string): Error {\n        if (typeof error === 'number') {\n          return new Error(_getException(error))\n        }\n\n        if (error instanceof Error) {\n          return error\n        }\n        return new Error(error || 'Unknown Error!')\n      }\n    }\n  }\n\nexport const ExceptionInit = ({\n  loader\n}: LoaderOptions): ExceptionDependencies => {\n  const library: Library = loader.library\n  return ExceptionConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\n\nexport type GaloisKeysDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type GaloisKeysDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: GaloisKeysDependencyOptions): GaloisKeysConstructorOptions\n}\n\nexport type GaloisKeysConstructorOptions = {\n  (): GaloisKeys\n}\n\nexport type GaloisKeys = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly size: number\n  readonly getIndex: (galoisElt: number) => number\n  readonly hasKey: (galoisElt: number) => boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: GaloisKeys) => void\n  readonly clone: () => GaloisKeys\n  readonly move: (key: GaloisKeys) => void\n}\n\nconst GaloisKeysConstructor =\n  (library: Library): GaloisKeysDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: GaloisKeysDependencyOptions): GaloisKeysConstructorOptions =>\n  (): GaloisKeys => {\n    const Constructor = library.GaloisKeys\n    let _instance = new Constructor()\n\n    /**\n     * @implements GaloisKeys\n     */\n\n    /**\n     * @interface GaloisKeys\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name GaloisKeys#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name GaloisKeys#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name GaloisKeys#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Returns the current number of keyswitching keys. Only keys that are\n       * non-empty are counted.\n       *\n       * @readonly\n       * @name GaloisKeys#size\n       * @type {number}\n       */\n      get size() {\n        return _instance.size()\n      },\n\n      /**\n       * Returns the index of a Galois key in the backing KSwitchKeys instance that\n       * corresponds to the given Galois element, assuming that it exists in the\n       * backing KSwitchKeys.\n       *\n       * @function\n       * @name GaloisKeys#getIndex\n       * @param {number} galoisElt The Galois element\n       * @returns {number} The index of the galois element\n       */\n      getIndex(galoisElt: number): number {\n        try {\n          return _instance.getIndex(galoisElt)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Returns whether a Galois key corresponding to a given Galois element exists.\n       *\n       * @function\n       * @name GaloisKeys#hasKey\n       * @param {number} galoisElt The Galois element\n       * @returns {boolean} True if the key exists\n       */\n      hasKey(galoisElt: number): boolean {\n        try {\n          return _instance.hasKey(galoisElt)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name GaloisKeys#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the GaloisKeys as a binary Uint8Array\n       *\n       * @function\n       * @name GaloisKeys#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the GaloisKeys in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a GaloisKeys from a base64 string\n       *\n       * @function\n       * @name GaloisKeys#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a GaloisKeys from an Uint8Array holding binary data\n       *\n       * @function\n       * @name GaloisKeys#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing GaloisKeys and overwrite this instance\n       *\n       * @function\n       * @name GaloisKeys#copy\n       * @param {GaloisKeys} key GaloisKeys to copy\n       * @example\n       * const keyA = keyGenerator.createGaloisKeys()\n       * const keyB = seal.GaloisKeys()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: GaloisKeys) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this GaloisKeys\n       *\n       * @function\n       * @name GaloisKeys#clone\n       * @returns {GaloisKeys}\n       * @example\n       * const keyA = keyGenerator.createGaloisKeys()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): GaloisKeys {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = GaloisKeysConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a GaloisKeys into this one and delete the old reference\n       *\n       * @function\n       * @name GaloisKeys#move\n       * @param {GaloisKeys} key GaloisKeys to move\n       * @example\n       * const keyA = keyGenerator.createGaloisKeys()\n       * const keyB = seal.GaloisKeys()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: GaloisKeys) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const GaloisKeysInit = ({\n  loader\n}: LoaderOptions): GaloisKeysDependencies => {\n  const library: Library = loader.library\n  return GaloisKeysConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { Context } from './context'\nimport { SecretKey, SecretKeyConstructorOptions } from './secret-key'\nimport { RelinKeys, RelinKeysConstructorOptions } from './relin-keys'\nimport { Serializable, SerializableConstructorOptions } from './serializable'\nimport { PublicKey, PublicKeyConstructorOptions } from './public-key'\nimport { GaloisKeys, GaloisKeysConstructorOptions } from './galois-keys'\n\nexport type KeyGeneratorDependencyOptions = {\n  readonly Exception: Exception\n  readonly PublicKey: PublicKeyConstructorOptions\n  readonly SecretKey: SecretKeyConstructorOptions\n  readonly RelinKeys: RelinKeysConstructorOptions\n  readonly GaloisKeys: GaloisKeysConstructorOptions\n  readonly Serializable: SerializableConstructorOptions\n}\n\nexport type KeyGeneratorDependencies = {\n  ({\n    Exception,\n    PublicKey,\n    SecretKey,\n    RelinKeys,\n    GaloisKeys,\n    Serializable\n  }: KeyGeneratorDependencyOptions): KeyGeneratorConstructorOptions\n}\n\nexport type KeyGeneratorConstructorOptions = {\n  (context: Context, secretKey?: SecretKey): KeyGenerator\n}\n\nexport type KeyGenerator = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly secretKey: () => SecretKey\n  readonly createPublicKeySerializable: () => Serializable\n  readonly createPublicKey: () => PublicKey\n  readonly createRelinKeysSerializable: () => Serializable\n  readonly createRelinKeys: () => RelinKeys\n  readonly createGaloisKeysSerializable: (steps?: Int32Array) => Serializable\n  readonly createGaloisKeys: (steps?: Int32Array) => GaloisKeys\n}\n\nconst KeyGeneratorConstructor =\n  (library: Library): KeyGeneratorDependencies =>\n  ({\n    Exception,\n    PublicKey,\n    SecretKey,\n    RelinKeys,\n    GaloisKeys,\n    Serializable\n  }: KeyGeneratorDependencyOptions): KeyGeneratorConstructorOptions =>\n  (context, secretKey): KeyGenerator => {\n    const Constructor = library.KeyGenerator\n    let _instance = constructInstance(context, secretKey)\n\n    function constructInstance(context: Context, secretKey?: SecretKey) {\n      try {\n        if (secretKey) {\n          return new Constructor(context.instance, secretKey.instance)\n        }\n        return new Constructor(context.instance)\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements KeyGenerator\n     */\n\n    /**\n     * @interface KeyGenerator\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name KeyGenerator#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name KeyGenerator#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name KeyGenerator#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Return the generated SecretKey\n       *\n       * @function\n       * @name KeyGenerator#secretKey\n       * @returns {SecretKey} The secret key that was generated upon instantiation of this KeyGenerator\n       */\n      secretKey(): SecretKey {\n        try {\n          const key = SecretKey()\n          const instance = _instance.secretKey()\n          key.inject(instance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Create a new PublicKey instance\n       *\n       * @function\n       * @name KeyGenerator#createPublicKey\n       * @returns {PublicKey} A new PublicKey instance\n       */\n      createPublicKey(): PublicKey {\n        try {\n          const key = PublicKey()\n          _instance.createPublicKey(key.instance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Create a new, Serializable PublicKey instance\n       *\n       * @function\n       * @name KeyGenerator#createPublicKeySerializable\n       * @returns {Serializable<PublicKey>} A new, serializable, PublicKey instance\n       */\n      createPublicKeySerializable(): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.createPublicKeySerializable()\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns relinearization keys. This function returns\n       * relinearization keys in a fully expanded form and is meant to be used\n       * primarily for demo, testing, and debugging purposes.\n       *\n       * @function\n       * @name KeyGenerator#createRelinKeys\n       * @returns {RelinKeys} New RelinKeys from the KeyGenerator's internal secret key\n       */\n      createRelinKeys(): RelinKeys {\n        try {\n          const keys = RelinKeys()\n          _instance.createRelinKeys(keys.instance)\n          return keys\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns relinearization keys as a serializable object.\n       *\n       * Half of the key data is pseudo-randomly generated from a seed to reduce\n       * the object size. The resulting serializable object cannot be used\n       * directly and is meant to be serialized for the size reduction to have an\n       * impact.\n       *\n       *\n       * @function\n       * @name KeyGenerator#createRelinKeysSerializable\n       * @returns {Serializable<RelinKeys>} New, serializable RelinKeys from the KeyGenerator's internal secret key\n       */\n      createRelinKeysSerializable(): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.createRelinKeysSerializable()\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns Galois keys. This function returns Galois keys in\n       * a fully expanded form and is meant to be used primarily for demo, testing,\n       * and debugging purposes. The user can optionally give an input a vector of desired\n       * Galois rotation step counts, where negative step counts correspond to\n       * rotations to the right and positive step counts correspond to rotations to\n       * the left. A step count of zero can be used to indicate a column rotation\n       * in the BFV scheme complex conjugation in the CKKS scheme.\n       *\n       * @function\n       * @name KeyGenerator#createGaloisKeys\n       * @param {Int32Array} [steps=Int32Array.from([])] Specific Galois Elements to generate\n       * @returns {GaloisKeys} New GaloisKeys from the KeyGenerator's internal secret key\n       */\n      createGaloisKeys(steps: Int32Array = Int32Array.from([])): GaloisKeys {\n        try {\n          const keys = GaloisKeys()\n          _instance.createGaloisKeys(steps, keys.instance)\n          return keys\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns Galois keys as a serializable object. This function\n       * creates specific Galois keys that can be used to apply specific Galois\n       * automorphisms on encrypted data. The user can optionally give an input a vector\n       * of desired Galois rotation step counts, where negative step counts\n       * correspond to rotations to the right and positive step counts correspond\n       * to rotations to the left. A step count of zero can be used to indicate\n       * a column rotation in the BFV scheme complex conjugation in the CKKS scheme.\n       * Half of the key data is pseudo-randomly generated from a seed to reduce\n       * the object size. The resulting serializable object cannot be used\n       * directly and is meant to be serialized for the size reduction to have an\n       * impact.\n       *\n       * @function\n       * @name KeyGenerator#createGaloisKeysSerializable\n       * @param {Int32Array} [steps=Int32Array.from([])] Specific Galois Elements to generate\n       * @returns {Serializable<GaloisKeys>} Base64 encoded string\n       */\n      createGaloisKeysSerializable(\n        steps: Int32Array = Int32Array.from([])\n      ): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.createGaloisKeysSerializable(steps)\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const KeyGeneratorInit = ({\n  loader\n}: LoaderOptions): KeyGeneratorDependencies => {\n  const library: Library = loader.library\n  return KeyGeneratorConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type MemoryPoolHandleDependencies = {\n  (): MemoryPoolHandleConstructorOptions\n}\n\nexport type MemoryPoolHandleConstructorOptions = {\n  (): MemoryPoolHandle\n}\n\nexport type MemoryPoolHandle = {\n  readonly global: any\n  readonly threadLocal: any\n}\n\nconst MemoryPoolHandleConstructor =\n  (library: Library): MemoryPoolHandleDependencies =>\n  (): MemoryPoolHandleConstructorOptions =>\n  (): MemoryPoolHandle => {\n    // Static methods\n    const _global = library.MemoryPoolHandle.MemoryPoolHandleGlobal\n    const _threadLocal = library.MemoryPoolHandle.MemoryPoolHandleThreadLocal\n\n    /**\n     * @implements MemoryPoolHandle\n     */\n\n    /**\n     * @interface MemoryPoolHandle\n     */\n    return {\n      /**\n       * The MemoryPoolHandle pointing to the global memory pool.\n       *\n       * @readonly\n       * @name MemoryPoolHandle.global\n       * @type {MemoryPoolHandle.global}\n       */\n      get global() {\n        /**\n         * @typedef {MemoryPoolHandle.global} MemoryPoolHandle.global\n         */\n        return _global()\n      },\n\n      /**\n       * The MemoryPoolHandle pointing to the thread-local memory pool.\n       *\n       * @readonly\n       * @name MemoryPoolHandle.threadLocal\n       * @type {MemoryPoolHandle.threadLocal}\n       */\n      get threadLocal() {\n        /**\n         * @typedef {MemoryPoolHandle.threadLocal} MemoryPoolHandle.threadLocal\n         */\n        return _threadLocal()\n      }\n    }\n  }\n\nexport const MemoryPoolHandleInit = ({\n  loader\n}: LoaderOptions): MemoryPoolHandleDependencies => {\n  const library: Library = loader.library\n  return MemoryPoolHandleConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\n\nexport type ModulusDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type ModulusDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: ModulusDependencyOptions): ModulusConstructorOptions\n}\n\nexport type ModulusConstructorOptions = {\n  (value: bigint): Modulus\n}\n\nexport type Modulus = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly setValue: (value: bigint) => void\n  readonly value: bigint\n  readonly bitCount: number\n  readonly isZero: boolean\n  readonly isPrime: boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (encoded: string) => void\n  readonly loadArray: (array: Uint8Array) => void\n}\n\nconst ModulusConstructor =\n  (library: Library): ModulusDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: ModulusDependencyOptions): ModulusConstructorOptions =>\n  (value: bigint): Modulus => {\n    // Static methods\n    const Constructor = library.Modulus\n\n    let _instance = createModulus(value)\n\n    function createModulus(value: bigint) {\n      try {\n        const inst = new Constructor()\n        inst.setValue(value.toString())\n        return inst\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n\n    /**\n     * @implements Modulus\n     */\n\n    /**\n     * @interface Modulus\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Modulus#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name Modulus#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Modulus#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Loads a Modulus from a string representing an uint64 value.\n       *\n       * @function\n       * @name Modulus#setValue\n       * @param {BigInt} value BigInt value to set\n       */\n      setValue(value: bigint) {\n        try {\n          _instance.setValue(value.toString())\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The value of the current Modulus as a BigInt.\n       *\n       * @readonly\n       * @name Modulus#value\n       * @type {BigInt}\n       */\n      get value() {\n        // eslint-disable-next-line no-undef\n        return BigInt(_instance.value())\n      },\n\n      /**\n       * The significant bit count of the value of the current Modulus.\n       *\n       * @readonly\n       * @name Modulus#bitCount\n       * @type {number}\n       */\n      get bitCount() {\n        return _instance.bitCount()\n      },\n\n      /**\n       * Whether the value of the current Modulus is zero.\n       *\n       * @readonly\n       * @name Modulus#isZero\n       * @type {boolean}\n       */\n      get isZero() {\n        return _instance.isZero()\n      },\n\n      /**\n       * Whether the value of the current Modulus is a prime number.\n       *\n       * @readonly\n       * @name Modulus#isPrime\n       * @type {boolean}\n       */\n      get isPrime() {\n        return _instance.isPrime()\n      },\n\n      /**\n       * Save the Modulus as a base64 string\n       *\n       * @function\n       * @name Modulus#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the Modulus as a binary Uint8Array\n       *\n       * @function\n       * @name Modulus#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the Modulus in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a Modulus from a base64 string\n       *\n       * @function\n       * @name Modulus#load\n       * @param {string} encoded Base64 encoded string\n       */\n      load(encoded: string) {\n        try {\n          _instance.loadFromString(encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a Modulus from an Uint8Array holding binary data\n       *\n       * @function\n       * @name Modulus#loadArray\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(array: Uint8Array) {\n        try {\n          _instance.loadFromArray(array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const ModulusInit = ({ loader }: LoaderOptions): ModulusDependencies => {\n  const library: Library = loader.library\n  return ModulusConstructor(library)\n}\n","import { LoaderOptions, Instance, Library } from './seal'\nimport { Exception, SealError } from './exception'\n\nexport type ParmsIdTypeDependencyOptions = {\n  readonly Exception: Exception\n}\n\nexport type ParmsIdTypeDependencies = {\n  ({ Exception }: ParmsIdTypeDependencyOptions): ParmsIdTypeConstructorOptions\n}\n\nexport type ParmsIdTypeConstructorOptions = {\n  (): ParmsIdType\n}\n\nexport type ParmsIdType = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly values: BigUint64Array\n}\n\nconst ParmsIdTypeConstructor =\n  (library: Library): ParmsIdTypeDependencies =>\n  ({\n    Exception\n  }: ParmsIdTypeDependencyOptions): ParmsIdTypeConstructorOptions =>\n  (): ParmsIdType => {\n    const Constructor = library.ParmsIdType\n\n    let _instance: Instance\n\n    /**\n     * @implements ParmsIdType\n     */\n\n    /**\n     * @interface ParmsIdType\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name ParmsIdType#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name ParmsIdType#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name ParmsIdType#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * The values of the current ParmsIdType as an Array of BigInts.\n       *\n       * @readonly\n       * @name ParmsIdType#values\n       * @type {BigUint64Array}\n       */\n      get values() {\n        try {\n          const instance = _instance.values()\n          return BigUint64Array.from(instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const ParmsIdTypeInit = ({\n  loader\n}: LoaderOptions): ParmsIdTypeDependencies => {\n  const library: Library = loader.library\n  return ParmsIdTypeConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\nimport { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { VectorConstructorOptions } from './vector'\nimport { INVALID_PLAIN_CONSRUCTOR_OPTIONS } from './constants'\nexport type PlainTextDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type PlainTextDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: PlainTextDependencyOptions): PlainTextConstructorOptions\n}\n\nexport type PlainTextConstructorOptions = {\n  ({\n    capacity,\n    coeffCount,\n    pool\n  }?: {\n    capacity?: number\n    coeffCount?: number\n    pool?: MemoryPoolHandle\n  }): PlainText\n}\n\nexport type PlainText = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly reserve: (capacity: number) => void\n  readonly shrinkToFit: () => void\n  readonly release: () => void\n  readonly resize: (coeffCount: number) => void\n  readonly setZero: () => void\n  readonly isZero: boolean\n  readonly capacity: number\n  readonly coeffCount: number\n  readonly significantCoeffCount: number\n  readonly nonzeroCoeffCount: number\n  readonly toPolynomial: () => string\n  readonly isNttForm: boolean\n  readonly parmsId: ParmsIdType\n  readonly scale: number\n  readonly setScale: (scale: number) => void\n  readonly pool: MemoryPoolHandle\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (plain: PlainText) => void\n  readonly clone: () => PlainText\n  readonly move: (plain: PlainText) => void\n}\n\nconst PlainTextConstructor =\n  (library: Library): PlainTextDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: PlainTextDependencyOptions): PlainTextConstructorOptions =>\n  ({\n    capacity,\n    coeffCount,\n    pool = MemoryPoolHandle.global\n  } = {}): PlainText => {\n    // Static methods\n    const Constructor = library.Plaintext\n\n    let _instance = construct({\n      capacity,\n      coeffCount,\n      pool\n    })\n\n    function construct({\n      capacity,\n      coeffCount,\n      pool = MemoryPoolHandle.global\n    }: {\n      capacity?: number\n      coeffCount?: number\n      pool?: MemoryPoolHandle\n    }) {\n      try {\n        if (capacity === undefined && coeffCount === undefined) {\n          return new Constructor(pool)\n        } else if (capacity === undefined && coeffCount !== undefined) {\n          return new Constructor(coeffCount, pool)\n        } else if (capacity !== undefined && coeffCount !== undefined) {\n          return new Constructor(capacity, coeffCount, pool)\n        } else {\n          throw new Error(INVALID_PLAIN_CONSRUCTOR_OPTIONS)\n        }\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements PlainText\n     */\n\n    /**\n     * @interface PlainText\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name PlainText#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name PlainText#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name PlainText#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Allocates enough memory to accommodate the backing array of a plaintext\n       * with given capacity.\n       *\n       * @function\n       * @name PlainText#reserve\n       * @param {number} capacity The capacity to reserve\n       */\n      reserve(capacity: number) {\n        try {\n          return _instance.reserve(capacity)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Allocates enough memory to accommodate the backing array of the current\n       * PlainText and copies it over to the new location. This function is meant\n       * to reduce the memory use of the PlainText to smallest possible and can be\n       * particularly important after modulus switching.\n       *\n       * @function\n       * @name PlainText#shrinkToFit\n       */\n      shrinkToFit() {\n        _instance.shrinkToFit()\n      },\n\n      /**\n       * Resets the PlainText. This function releases any memory allocated by the\n       * PlainText, returning it to the memory pool.\n       *\n       * @function\n       * @name PlainText#release\n       */\n      release() {\n        _instance.release()\n      },\n\n      /**\n       * Resizes the PlainText to have a given coefficient count. The PlainText\n       * is automatically reallocated if the new coefficient count does not fit in\n       * the current capacity.\n       *\n       * @function\n       * @name PlainText#resize\n       * @param {number} coeffCount The number of coefficients in the plaintext polynomial\n       */\n      resize(coeffCount: number) {\n        try {\n          _instance.resize(coeffCount)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sets the PlainText polynomial to zero.\n       *\n       * @function\n       * @name PlainText#setZero\n       */\n      setZero() {\n        _instance.setZero()\n      },\n\n      /**\n       * Whether the current PlainText polynomial has all zero coefficients.\n       *\n       * @readonly\n       * @name PlainText#isZero\n       * @type {boolean}\n       */\n      get isZero() {\n        return _instance.isZero()\n      },\n\n      /**\n       * The capacity of the current allocation.\n       *\n       * @readonly\n       * @name PlainText#capacity\n       * @type {number}\n       */\n      get capacity() {\n        return _instance.capacity()\n      },\n\n      /**\n       * The coefficient count of the current PlainText polynomial.\n       *\n       * @readonly\n       * @name PlainText#coeffCount\n       * @type {number}\n       */\n      get coeffCount() {\n        return _instance.coeffCount()\n      },\n\n      /**\n       * The significant coefficient count of the current PlainText polynomial.\n       *\n       * @readonly\n       * @name PlainText#significantCoeffCount\n       * @type {number}\n       */\n      get significantCoeffCount() {\n        return _instance.significantCoeffCount()\n      },\n\n      /**\n       * Returns the non-zero coefficient count of the current PlainText polynomial.\n       *\n       * @readonly\n       * @name PlainText#nonzeroCoeffCount\n       * @type {number}\n       */\n      get nonzeroCoeffCount() {\n        return _instance.nonzeroCoeffCount()\n      },\n\n      /**\n       * Returns a human-readable string description of the PlainText polynomial.\n       *\n       * The returned string is of the form \"7FFx^3 + 1x^1 + 3\" with a format\n       * summarized by the following:\n       * 1. Terms are listed in order of strictly decreasing exponent\n       * 2. Coefficient values are non-negative and in hexadecimal format (hexadecimal\n       * letters are in upper-case)\n       * 3. Exponents are positive and in decimal format\n       * 4. Zero coefficient terms (including the constant term) are omitted unless\n       * the polynomial is exactly 0 (see rule 9)\n       * 5. Term with the exponent value of one is written as x^1\n       * 6. Term with the exponent value of zero (the constant term) is written as\n       * just a hexadecimal number without x or exponent\n       * 7. Terms are separated exactly by <space>+<space>\n       * 8. Other than the +, no other terms have whitespace\n       * 9. If the polynomial is exactly 0, the string \"0\" is returned\n       *\n       * @function\n       * @name PlainText#toPolynomial\n       * @throws std::invalid_argument if the PlainText is in NTT transformed form\n       * @returns {string} Polynomial string\n       */\n      toPolynomial(): string {\n        try {\n          return _instance.toPolynomial()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Whether the PlainText is in NTT form.\n       *\n       * @readonly\n       * @name PlainText#isNttForm\n       * @type {boolean}\n       */\n      get isNttForm() {\n        return _instance.isNttForm()\n      },\n\n      /**\n       * The reference to parmsId of the PlainText. The parmsId must remain zero unless the\n       * PlainText polynomial is in NTT form.\n       *\n       * @see {@link EncryptionParameters} for more information about parmsId.\n       *\n       * @readonly\n       * @name PlainText#parmsId\n       * @type {ParmsIdType}\n       */\n      get parmsId() {\n        const parms = ParmsIdType()\n        parms.inject(_instance.parmsId())\n        return parms\n      },\n\n      /**\n       * The reference to the scale. This is only needed when using the CKKS\n       * encryption scheme. The user should have little or no reason to ever change\n       * the scale by hand.\n       *\n       * @readonly\n       * @name PlainText#scale\n       * @type {number}\n       */\n      get scale() {\n        return _instance.scale()\n      },\n\n      /**\n       * Sets the PlainText scale. This is only needed when using the\n       * CKKS encryption scheme. The user should have little or no reason to ever\n       * change the scale by hand.\n       *\n       * @function\n       * @name PlainText#setScale\n       * @param {number} scale The scale to set\n       */\n      setScale(scale: number) {\n        _instance.setScale(scale)\n      },\n\n      /**\n       * The currently used MemoryPoolHandle.\n       *\n       * @readonly\n       * @name PlainText#pool\n       * @type {MemoryPoolHandle}\n       */\n      get pool() {\n        return _instance.pool()\n      },\n\n      /**\n       * Save the PlainText to a base64 string\n       *\n       * @function\n       * @name PlainText#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the PlainText as a binary Uint8Array\n       *\n       * @function\n       * @name PlainText#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the PlainText in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a PlainText from a base64 string\n       *\n       * @function\n       * @name PlainText#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a PlainText from an Uint8Array holding binary data\n       *\n       * @function\n       * @name PlainText#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing PlainText and overwrite this instance\n       *\n       * @function\n       * @name PlainText#copy\n       * @param {PlainText} plain PlainText to copy\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const plainTextB = seal.PlainText()\n       * plainTextB.copy(plainTextA)\n       * // plainTextB holds a copy of plainTextA\n       */\n      copy(plain: PlainText) {\n        try {\n          _instance.copy(plain.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this PlainText\n       *\n       * @function\n       * @name PlainText#clone\n       * @returns {PlainText}\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const plainTextB = plainTextA.clone()\n       * // plainTextB holds a copy of plainTextA\n       */\n      clone(): PlainText {\n        try {\n          const clonedInstance = _instance.clone()\n          const plain = PlainTextConstructor(library)({\n            Exception,\n            ComprModeType,\n            ParmsIdType,\n            MemoryPoolHandle,\n            Vector\n          })()\n          plain.unsafeInject(clonedInstance)\n          return plain\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a PlainText into this one and delete the old reference\n       *\n       * @function\n       * @name PlainText#move\n       * @param {PlainText} plain PlainText to move\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const plainTextB = seal.PlainText()\n       * plainTextB.move(plainTextA)\n       * // plainTextB holds a the instance of plainTextA.\n       * // plainTextA no longer holds an instance\n       */\n      move(plain: PlainText) {\n        try {\n          _instance.move(plain.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          plain.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const PlainTextInit = ({\n  loader\n}: LoaderOptions): PlainTextDependencies => {\n  const library: Library = loader.library\n  return PlainTextConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\nimport { Exception, SealError } from './exception'\nimport { Modulus, ModulusConstructorOptions } from './modulus'\nimport { Vector, VectorConstructorOptions } from './vector'\n\nexport type PlainModulusDependencyOptions = {\n  readonly Exception: Exception\n  readonly Modulus: ModulusConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type PlainModulusDependencies = {\n  ({\n    Exception,\n    Modulus,\n    Vector\n  }: PlainModulusDependencyOptions): PlainModulusConstructorOptions\n}\n\nexport type PlainModulusConstructorOptions = {\n  (): PlainModulus\n}\n\nexport type PlainModulus = {\n  readonly Batching: (polyModulusDegree: number, bitSize: number) => Modulus\n  readonly BatchingVector: (\n    polyModulusDegree: number,\n    bitSizes: Int32Array\n  ) => Vector\n}\n\nconst PlainModulusConstructor =\n  (library: Library): PlainModulusDependencies =>\n  ({\n    Exception,\n    Modulus,\n    Vector\n  }: PlainModulusDependencyOptions): PlainModulusConstructorOptions =>\n  (): PlainModulus => {\n    // Static methods\n    const _Batching = library.PlainModulus.Batching\n    const _BatchingVector = library.PlainModulus.BatchingVector\n\n    /**\n     * @implements PlainModulus\n     */\n\n    /**\n     * @interface PlainModulus\n     */\n    return {\n      /**\n       * Creates a prime number PlainModulus for use as plainPlainModulus encryption\n       * parameter that supports batching with a given polyPlainModulusDegree.\n       *\n       * @function\n       * @name PlainModulus.Batching\n       * @param {number} polyModulusDegree The degree of the polynomial modulus\n       * @param {number} bitSize The bit-size of the desired prime number\n       * @returns {Modulus} A PlainModulus containing the prime number\n       */\n      Batching(polyModulusDegree: number, bitSize: number): Modulus {\n        try {\n          const smallMod = Modulus(BigInt(0))\n          smallMod.inject(_Batching(polyModulusDegree, bitSize))\n          return smallMod\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Creates several prime number PlainModulus elements that can be used as\n       * plainPlainModulus encryption parameters, each supporting batching with a given\n       * polyPlainModulusDegree.\n       *\n       * @function\n       * @name PlainModulus.BatchingVector\n       * @param {Number} polyPlainModulusDegree The degree of the polynomial modulus\n       * @param {Int32Array} bitSizes Int32Array containing values representing bit-sizes of primes\n       * @returns {Vector} Vector of Modulus containing prime numbers\n       */\n      BatchingVector(\n        polyPlainModulusDegree: number,\n        bitSizes: Int32Array\n      ): Vector {\n        try {\n          const vectBitSizes = Vector()\n          vectBitSizes.from(bitSizes)\n          const vect = _BatchingVector(\n            polyPlainModulusDegree,\n            vectBitSizes.instance\n          )\n          vectBitSizes.delete()\n          return vect\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const PlainModulusInit = ({\n  loader\n}: LoaderOptions): PlainModulusDependencies => {\n  const library: Library = loader.library\n  return PlainModulusConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\n\nexport type PublicKeyDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type PublicKeyDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: PublicKeyDependencyOptions): PublicKeyConstructorOptions\n}\n\nexport type PublicKeyConstructorOptions = {\n  (): PublicKey\n}\n\nexport type PublicKey = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: PublicKey) => void\n  readonly clone: () => PublicKey\n  readonly move: (key: PublicKey) => void\n}\n\nconst PublicKeyConstructor =\n  (library: Library): PublicKeyDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: PublicKeyDependencyOptions): PublicKeyConstructorOptions =>\n  (): PublicKey => {\n    const Constructor = library.PublicKey\n    let _instance = new Constructor()\n\n    /**\n     * @implements PublicKey\n     */\n\n    /**\n     * @interface PublicKey\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name PublicKey#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name PublicKey#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name PublicKey#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name PublicKey#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the PublicKey as a binary Uint8Array\n       *\n       * @function\n       * @name PublicKey#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the PublicKey in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a PublicKey from a base64 string\n       *\n       * @function\n       * @name PublicKey#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a PublicKey from an Uint8Array holding binary data\n       *\n       * @function\n       * @name PublicKey#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing PublicKey and overwrite this instance\n       *\n       * @function\n       * @name PublicKey#copy\n       * @param {PublicKey} key PublicKey to copy\n       * @example\n       * const keyA = keyGenerator.createPublicKey()\n       * const keyB = seal.PublicKey()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: PublicKey) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this PublicKey\n       *\n       * @function\n       * @name PublicKey#clone\n       * @returns {PublicKey}\n       * @example\n       * const keyA = keyGenerator.createPublicKey()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): PublicKey {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = PublicKeyConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a PublicKey into this one and delete the old reference\n       *\n       * @function\n       * @name PublicKey#move\n       * @param {PublicKey} key PublicKey to move\n       * @example\n       * const keyA = keyGenerator.createPublicKey()\n       * const keyB = seal.PublicKey()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: PublicKey) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const PublicKeyInit = ({\n  loader\n}: LoaderOptions): PublicKeyDependencies => {\n  const library: Library = loader.library\n  return PublicKeyConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\n\nexport type RelinKeysDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type RelinKeysDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: RelinKeysDependencyOptions): RelinKeysConstructorOptions\n}\n\nexport type RelinKeysConstructorOptions = {\n  (): RelinKeys\n}\n\nexport type RelinKeys = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly size: number\n  readonly getIndex: (keyPower: number) => number\n  readonly hasKey: (keyPower: number) => boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: RelinKeys) => void\n  readonly clone: () => RelinKeys\n  readonly move: (key: RelinKeys) => void\n}\n\nconst RelinKeysConstructor =\n  (library: Library): RelinKeysDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: RelinKeysDependencyOptions): RelinKeysConstructorOptions =>\n  (): RelinKeys => {\n    const Constructor = library.RelinKeys\n    let _instance = new Constructor()\n\n    /**\n     * @implements RelinKeys\n     */\n\n    /**\n     * @interface RelinKeys\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name RelinKeys#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name RelinKeys#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name RelinKeys#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Returns the current number of keyswitching keys. Only keys that are\n       * non-empty are counted.\n       *\n       * @readonly\n       * @name RelinKeys#size\n       * @type {number}\n       */\n      get size() {\n        return _instance.size()\n      },\n\n      /**\n       * Returns the index of a relinearization key in the backing KSwitchKeys\n       * instance that corresponds to the given secret key power, assuming that\n       * it exists in the backing KSwitchKeys.\n       *\n       * @function\n       * @name RelinKeys#getIndex\n       * @param {number} keyPower The power of the secret key\n       * @returns {number} The index of the relin key\n       */\n      getIndex(keyPower: number): number {\n        try {\n          return _instance.getIndex(keyPower)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Returns whether a relinearization key corresponding to a given power of\n       * the secret key exists.\n       *\n       * @function\n       * @name RelinKeys#hasKey\n       * @param {number} keyPower The power of the secret key\n       * @returns {boolean} True if the power exists\n       */\n      hasKey(keyPower: number): boolean {\n        try {\n          return _instance.hasKey(keyPower)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name RelinKeys#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the RelinKeys as a binary Uint8Array\n       *\n       * @function\n       * @name RelinKeys#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the RelinKeys in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a RelinKeys from a base64 string\n       *\n       * @function\n       * @name RelinKeys#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a RelinKeys from an Uint8Array holding binary data\n       *\n       * @function\n       * @name RelinKeys#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing RelinKeys and overwrite this instance\n       *\n       * @function\n       * @name RelinKeys#copy\n       * @param {RelinKeys} key RelinKeys to copy\n       * @example\n       * const keyA = keyGenerator.createRelinKeys()\n       * const keyB = seal.RelinKeys()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: RelinKeys) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this RelinKeys\n       *\n       * @function\n       * @name RelinKeys#clone\n       * @returns {RelinKeys}\n       * @example\n       * const keyA = keyGenerator.createRelinKeys()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): RelinKeys {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = RelinKeysConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a RelinKeys into this one and delete the old reference\n       *\n       * @function\n       * @name RelinKeys#move\n       * @param {RelinKeys} key RelinKeys to move\n       * @example\n       * const keyA = keyGenerator.createRelinKeys()\n       * const keyB = seal.RelinKeys()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: RelinKeys) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const RelinKeysInit = ({\n  loader\n}: LoaderOptions): RelinKeysDependencies => {\n  const library: Library = loader.library\n  return RelinKeysConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type SchemeTypeDependencies = {\n  (): SchemeTypeConstructorOptions\n}\n\nexport type SchemeTypeConstructorOptions = {\n  (): SchemeType\n}\n\nexport type SchemeType = {\n  readonly none: any\n  readonly bfv: any\n  readonly ckks: any\n  readonly bgv: any\n}\n\nconst SchemeTypeConstructor =\n  (library: Library): SchemeTypeDependencies =>\n  (): SchemeTypeConstructorOptions =>\n  (): SchemeType => {\n    // Static methods\n    const _none = library.SchemeType.none\n    const _bfv = library.SchemeType.bfv\n    const _ckks = library.SchemeType.ckks\n    const _bgv = library.SchemeType.bgv\n\n    /**\n     * @implements SchemeType\n     */\n\n    /**\n     * @interface SchemeType\n     */\n    return {\n      /**\n       * Return the 'none' scheme type\n       *\n       * @readonly\n       * @name SchemeType.none\n       * @type {SchemeType.none}\n       */\n      get none() {\n        /**\n         * @typedef {SchemeType.none} SchemeType.none\n         */\n        return _none\n      },\n\n      /**\n       * Return the 'bfv' scheme type\n       *\n       * @readonly\n       * @name SchemeType.bfv\n       * @type {SchemeType.bfv}\n       */\n      get bfv() {\n        /**\n         * @typedef {SchemeType.bfv} SchemeType.bfv\n         */\n        return _bfv\n      },\n\n      /**\n       * Return the 'ckks' scheme type\n       *\n       * @readonly\n       * @name SchemeType.ckks\n       * @type {SchemeType.ckks}\n       */\n      get ckks() {\n        /**\n         * @typedef {SchemeType.ckks} SchemeType.ckks\n         */\n        return _ckks\n      },\n\n      /**\n       * Return the 'bgv' scheme type\n       *\n       * @readonly\n       * @name SchemeType.bgv\n       * @type {SchemeType.bgv}\n       */\n      get bgv() {\n        /**\n         * @typedef {SchemeType.bgv} SchemeType.bgv\n         */\n        return _bgv\n      }\n    }\n  }\n\nexport const SchemeTypeInit = ({\n  loader\n}: LoaderOptions): SchemeTypeDependencies => {\n  const library: Library = loader.library\n  return SchemeTypeConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\n\nexport type SecretKeyDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type SecretKeyDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: SecretKeyDependencyOptions): SecretKeyConstructorOptions\n}\n\nexport type SecretKeyConstructorOptions = {\n  (): SecretKey\n}\n\nexport type SecretKey = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: SecretKey) => void\n  readonly clone: () => SecretKey\n  readonly move: (key: SecretKey) => void\n}\n\nconst SecretKeyConstructor =\n  (library: Library): SecretKeyDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: SecretKeyDependencyOptions): SecretKeyConstructorOptions =>\n  (): SecretKey => {\n    const Constructor = library.SecretKey\n    let _instance = new Constructor()\n\n    /**\n     * @implements SecretKey\n     */\n\n    /**\n     * @interface SecretKey\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name SecretKey#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name SecretKey#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = new Constructor(instance)\n        instance.delete()\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name SecretKey#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name SecretKey#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the SecretKey as a binary Uint8Array\n       *\n       * @function\n       * @name SecretKey#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the SecretKey in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a SecretKey from a base64 string\n       *\n       * @function\n       * @name SecretKey#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a SecretKey from an Uint8Array holding binary data\n       *\n       * @function\n       * @name SecretKey#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing SecretKey and overwrite this instance\n       *\n       * @function\n       * @name SecretKey#copy\n       * @param {SecretKey} key SecretKey to copy\n       * @example\n       * const keyA = keyGenerator.secretKey()\n       * const keyB = seal.SecretKey()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: SecretKey) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this SecretKey\n       *\n       * @function\n       * @name SecretKey#clone\n       * @returns {SecretKey}\n       * @example\n       * const keyA = keyGenerator.secretKey()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): SecretKey {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = SecretKeyConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a SecretKey into this one and delete the old reference\n       *\n       * @function\n       * @name SecretKey#move\n       * @param {SecretKey} key SecretKey to move\n       * @example\n       * const keyA = keyGenerator.secretKey()\n       * const keyB = seal.SecretKey()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: SecretKey) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const SecretKeyInit = ({\n  loader\n}: LoaderOptions): SecretKeyDependencies => {\n  const library: Library = loader.library\n  return SecretKeyConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type SecurityLevelDependencies = {\n  (): SecurityLevelConstructorOptions\n}\n\nexport type SecurityLevelConstructorOptions = {\n  (): SecurityLevel\n}\n\nexport type SecurityLevel = {\n  readonly none: any\n  readonly tc128: any\n  readonly tc192: any\n  readonly tc256: any\n}\n\nconst SecurityLevelConstructor =\n  (library: Library): SecurityLevelDependencies =>\n  (): SecurityLevelConstructorOptions =>\n  (): SecurityLevel => {\n    // Static methods\n    const _none = library.SecLevelType.none\n    const _tc128 = library.SecLevelType.tc128\n    const _tc192 = library.SecLevelType.tc192\n    const _tc256 = library.SecLevelType.tc256\n\n    /**\n     * @implements SecurityLevel\n     */\n\n    /**\n     * @interface SecurityLevel\n     */\n    return {\n      /**\n       * Returns the 'none' security level\n       *\n       * @readonly\n       * @name SecurityLevel.none\n       * @type {SecurityLevel.none}\n       */\n      get none() {\n        /**\n         * @typedef {SecurityLevel.none} SecurityLevel.none\n         */\n        return _none\n      },\n\n      /**\n       * Returns the '128' security level\n       *\n       * @readonly\n       * @name SecurityLevel.tc128\n       * @type {SecurityLevel.tc128}\n       */\n      get tc128() {\n        /**\n         * @typedef {SecurityLevel.tc128} SecurityLevel.tc128\n         */\n        return _tc128\n      },\n\n      /**\n       * Returns the '192' security level\n       *\n       * @readonly\n       * @name SecurityLevel.tc192\n       * @type {SecurityLevel.tc192}\n       */\n      get tc192() {\n        /**\n         * @typedef {SecurityLevel.tc192} SecurityLevel.tc192\n         */\n        return _tc192\n      },\n\n      /**\n       * Returns the '256' security level\n       *\n       * @readonly\n       * @name SecurityLevel.tc256\n       * @type {SecurityLevel.tc256}\n       */\n      get tc256() {\n        /**\n         * @typedef {SecurityLevel.tc256} SecurityLevel.tc256\n         */\n        return _tc256\n      }\n    }\n  }\nexport const SecurityLevelInit = ({\n  loader\n}: LoaderOptions): SecurityLevelDependencies => {\n  const library: Library = loader.library\n  return SecurityLevelConstructor(library)\n}\n","import { LoaderOptions, Instance, Library } from './seal'\nimport { Exception, SealError } from './exception'\nimport { INSTANCE_DELETED, UNSUPPORTED_VECTOR_TYPE } from './constants'\n\nexport type VectorDependencyOptions = {\n  readonly Exception: Exception\n}\n\nexport type VectorDependencies = {\n  ({ Exception }: VectorDependencyOptions): VectorConstructorOptions\n}\n\nexport type VectorConstructorOptions = {\n  (): Vector\n}\n\nexport type Vector = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly from: (array: VectorTypes, type?: StringTypes) => Instance\n  readonly type: string\n  readonly setType: (type: StringTypes) => void\n  readonly size: number\n  readonly getValue: (index: number) => number\n  readonly resize: (size: number, fill: number) => void\n  readonly toArray: () => VectorTypes\n}\n\nexport type VectorTypes =\n  | Uint8Array\n  | Int32Array\n  | Uint32Array\n  | Float64Array\n  | BigInt64Array\n  | BigUint64Array\n\nexport type StringTypes =\n  | 'Uint8Array'\n  | 'Int32Array'\n  | 'Uint32Array'\n  | 'Float64Array'\n  | 'BigInt64Array'\n  | 'BigUint64Array'\n  | 'Modulus'\n\nconst VectorConstructor =\n  (library: Library): VectorDependencies =>\n  ({ Exception }: VectorDependencyOptions): VectorConstructorOptions =>\n  (): Vector => {\n    // Static methods\n    const _vecFromArrayUint8 = library.vecFromArrayUint8\n    const _vecFromArrayUint32 = library.vecFromArrayUint32\n    const _vecFromArrayInt32 = library.vecFromArrayInt32\n    const _vecFromArrayFloat64 = library.vecFromArrayFloat64\n    const _vecFromArrayBigInt64 = library.vecFromArrayBigInt64\n    const _vecFromArrayBigUint64 = library.vecFromArrayBigUint64\n    const _vecFromArrayModulus = library.vecFromArrayModulus\n    const _jsArrayUint8FromVec = library.jsArrayUint8FromVec\n    const _jsArrayUint32FromVec = library.jsArrayUint32FromVec\n    const _jsArrayInt32FromVec = library.jsArrayInt32FromVec\n    const _jsArrayFloat64FromVec = library.jsArrayFloat64FromVec\n    const _jsArrayStringFromVecInt64 = library.jsArrayStringFromVecInt64\n    const _jsArrayStringFromVecUint64 = library.jsArrayStringFromVecUint64\n    const _jsArrayStringFromVecModulus = library.jsArrayStringFromVecModulus\n\n    let _instance: Instance\n    let _type: StringTypes\n    /**\n     * @implements Vector\n     */\n\n    /**\n     * @interface Vector\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Vector#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Vector#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Vector#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Converts a JS TypedArray into a vector\n       *\n       * @function\n       * @name Vector#from\n       * @param {VectorTypes} array The TypedArray to convert\n       * @param {StringTypes} [type] An optional type override - useful for 'Modulus' only\n       */\n      from(array: VectorTypes, type?: StringTypes) {\n        try {\n          _type = type ? type : (array.constructor.name as StringTypes)\n          switch (_type) {\n            case 'Uint8Array':\n              _instance = _vecFromArrayUint8(array)\n              break\n            case 'Int32Array':\n              _instance = _vecFromArrayInt32(array)\n              break\n            case 'Uint32Array':\n              _instance = _vecFromArrayUint32(array)\n              break\n            case 'Float64Array':\n              _instance = _vecFromArrayFloat64(array)\n              break\n            case 'BigInt64Array':\n              _instance = _vecFromArrayBigInt64(array.toString().split(','))\n              break\n            case 'BigUint64Array':\n              _instance = _vecFromArrayBigUint64(array.toString().split(','))\n              break\n            case 'Modulus':\n              _instance = _vecFromArrayModulus(array.toString().split(','))\n              break\n            default:\n              throw new Error(UNSUPPORTED_VECTOR_TYPE)\n          }\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The Vector type\n       *\n       * @readonly\n       * @name Vector#type\n       */\n      get type(): StringTypes {\n        return _type\n      },\n\n      /**\n       * Set the Vector type\n       *\n       * @function\n       * @name Vector#setType\n       * @param {StringTypes} type the type of the vector\n       */\n      setType(type: StringTypes) {\n        _type = type\n      },\n\n      /**\n       * The vector size\n       *\n       * @readonly\n       * @name Vector#size\n       * @type {number}\n       */\n      get size(): number {\n        return _instance.size()\n      },\n\n      /**\n       * Get a value pointed to by the specified index\n       *\n       * @function\n       * @name Vector#getValue\n       * @param {number} index Index of the Vector\n       * @returns {number} Value of the element in the Vector pointed to by the index\n       */\n      getValue(index: number): number {\n        try {\n          return _instance.get(index)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Resizes a vector to the given size\n       *\n       * @function\n       * @name Vector#resize\n       * @param {number} size number of elements to resize\n       * @param {number} fill Data to fill the vector with\n       */\n      resize(size: number, fill: number) {\n        try {\n          _instance.resize(size, fill)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy a vector's data into a Typed Array\n       *\n       * Note: we cannot simply return a view on the underlying ArrayBuffer\n       * because WASM memory can grow and cause all the views to become\n       * neutered. We have to perform a hard copy to get data from WASM heap to JS.\n       *\n       * @function\n       * @name Vector#toArray\n       * @returns {VectorTypes} TypedArray containing values from the Vector\n       */\n      toArray(): VectorTypes {\n        if (!_instance) {\n          throw new Error(INSTANCE_DELETED)\n        }\n        switch (_type) {\n          case 'Uint8Array':\n            return Uint8Array.from(_jsArrayUint8FromVec(_instance))\n          case 'Int32Array':\n            return Int32Array.from(_jsArrayInt32FromVec(_instance))\n          case 'Uint32Array':\n            return Uint32Array.from(_jsArrayUint32FromVec(_instance))\n          case 'Float64Array':\n            return Float64Array.from(_jsArrayFloat64FromVec(_instance))\n          case 'BigInt64Array':\n            return BigInt64Array.from(_jsArrayStringFromVecInt64(_instance))\n          case 'BigUint64Array':\n            return BigUint64Array.from(_jsArrayStringFromVecUint64(_instance))\n          case 'Modulus':\n            return BigUint64Array.from(_jsArrayStringFromVecModulus(_instance))\n          default:\n            throw new Error(UNSUPPORTED_VECTOR_TYPE)\n        }\n      }\n    }\n  }\n\nexport const VectorInit = ({ loader }: LoaderOptions): VectorDependencies => {\n  const library: Library = loader.library\n  return VectorConstructor(library)\n}\n","import { SEALLibrary } from './implementation/seal'\nimport sealLibrary from 'seal_throws_wasm_worker'\nimport { Loader, createLoader } from './main/loader'\nimport { SEAL } from './main/seal'\n/**\n * Export a function which loads the proper build\n */\nconst loader = async (): Promise<Loader> => createLoader(sealLibrary)\n\n/**\n * Main export for node-seal\n */\nexport default async (): Promise<SEALLibrary> => SEAL(loader)\n","import { Library } from '../implementation/seal'\n\nexport type Loader = {\n  readonly library: Library\n}\n\n/**\n * Export a default function which instantiates the library\n * @param {Object} bin Emscripten library to initialize\n */\nexport const createLoader = async (\n  bin: () => Promise<Library>\n): Promise<Loader> => ({\n  library: await bin()\n})\n","import { SEALLibrary, SEALConstructor } from '../implementation/seal'\nimport { BatchEncoderInit } from '../implementation/batch-encoder'\nimport { CipherTextInit } from '../implementation/cipher-text'\nimport { CKKSEncoderInit } from '../implementation/ckks-encoder'\nimport { CoeffModulusInit } from '../implementation/coeff-modulus'\nimport { ComprModeTypeInit } from '../implementation/compr-mode-type'\nimport { ContextDataInit } from '../implementation/context-data'\nimport { ContextInit } from '../implementation/context'\nimport { DecryptorInit } from '../implementation/decryptor'\nimport { EncryptionParameterQualifiersInit } from '../implementation/encryption-parameter-qualifiers'\nimport { EncryptionParametersInit } from '../implementation/encryption-parameters'\nimport { EncryptorInit } from '../implementation/encryptor'\nimport { EvaluatorInit } from '../implementation/evaluator'\nimport { ExceptionInit } from '../implementation/exception'\nimport { GaloisKeysInit } from '../implementation/galois-keys'\nimport { KeyGeneratorInit } from '../implementation/key-generator'\nimport { MemoryPoolHandleInit } from '../implementation/memory-pool-handle'\nimport { ModulusInit } from '../implementation/modulus'\nimport { ParmsIdTypeInit } from '../implementation/parms-id-type'\nimport { PlainTextInit } from '../implementation/plain-text'\nimport { PlainModulusInit } from '../implementation/plain-modulus'\nimport { PublicKeyInit } from '../implementation/public-key'\nimport { RelinKeysInit } from '../implementation/relin-keys'\nimport { SchemeTypeInit } from '../implementation/scheme-type'\nimport { SecretKeyInit } from '../implementation/secret-key'\nimport { SecurityLevelInit } from '../implementation/security-level'\nimport { SerializableInit } from '../implementation/serializable'\nimport { VectorInit } from '../implementation/vector'\nimport { Loader } from './loader'\n\n/**\n * Main export for the library\n */\nexport const SEAL = async (\n  Loader: () => Promise<Loader>\n): Promise<SEALLibrary> => {\n  const loader = await Loader()\n  return SEALConstructor({\n    BatchEncoder: BatchEncoderInit({\n      loader\n    }),\n    CipherText: CipherTextInit({\n      loader\n    }),\n    CKKSEncoder: CKKSEncoderInit({\n      loader\n    }),\n    CoeffModulus: CoeffModulusInit({\n      loader\n    }),\n    ComprModeType: ComprModeTypeInit({\n      loader\n    }),\n    ContextData: ContextDataInit({\n      loader\n    }),\n    Context: ContextInit({\n      loader\n    }),\n    Decryptor: DecryptorInit({\n      loader\n    }),\n    EncryptionParameterQualifiers: EncryptionParameterQualifiersInit(),\n    EncryptionParameters: EncryptionParametersInit({\n      loader\n    }),\n    Encryptor: EncryptorInit({\n      loader\n    }),\n    Evaluator: EvaluatorInit({\n      loader\n    }),\n    Exception: ExceptionInit({\n      loader\n    }),\n    GaloisKeys: GaloisKeysInit({\n      loader\n    }),\n    KeyGenerator: KeyGeneratorInit({\n      loader\n    }),\n    MemoryPoolHandle: MemoryPoolHandleInit({\n      loader\n    }),\n    Modulus: ModulusInit({\n      loader\n    }),\n    ParmsIdType: ParmsIdTypeInit({\n      loader\n    }),\n    PlainText: PlainTextInit({\n      loader\n    }),\n    PlainModulus: PlainModulusInit({\n      loader\n    }),\n    PublicKey: PublicKeyInit({\n      loader\n    }),\n    RelinKeys: RelinKeysInit({\n      loader\n    }),\n    SchemeType: SchemeTypeInit({\n      loader\n    }),\n    SecretKey: SecretKeyInit({\n      loader\n    }),\n    SecurityLevel: SecurityLevelInit({\n      loader\n    }),\n    Serializable: SerializableInit(),\n    Vector: VectorInit({\n      loader\n    })\n  })\n}\n","import { Instance } from './seal'\nimport { SecurityLevel } from './security-level'\n\nexport type EncryptionParameterQualifiersDependencies = {\n  (): EncryptionParameterQualifiersConstructorOptions\n}\n\nexport type EncryptionParameterQualifiersConstructorOptions = {\n  (): EncryptionParameterQualifiers\n}\n\nexport type EncryptionParameterQualifiers = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly parametersSet: () => boolean\n  readonly usingFFT: boolean\n  readonly usingNTT: boolean\n  readonly usingBatching: boolean\n  readonly usingFastPlainLift: boolean\n  readonly usingDescendingModulusChain: boolean\n  readonly securityLevel: SecurityLevel\n}\n\nconst EncryptionParameterQualifiersConstructor =\n  (): EncryptionParameterQualifiersDependencies =>\n  (): EncryptionParameterQualifiersConstructorOptions =>\n  (): EncryptionParameterQualifiers => {\n    let _instance: Instance\n    /**\n     * @implements EncryptionParameterQualifiers\n     */\n\n    /**\n     * @interface EncryptionParameterQualifiers\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name EncryptionParameterQualifiers#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name EncryptionParameterQualifiers#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name EncryptionParameterQualifiers#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * If the encryption parameters are set in a way that is considered valid by\n       * Microsoft SEAL, the variable parameters_set is set to true.\n       *\n       * @function\n       * @name EncryptionParameterQualifiers#parametersSet\n       * @type {boolean}\n       */\n      parametersSet() {\n        return _instance.parametersSet()\n      },\n\n      /**\n       * Tells whether FFT can be used for polynomial multiplication. If the\n       * polynomial modulus is of the form X^N+1, where N is a power of two, then\n       * FFT can be used for fast multiplication of polynomials modulo the polynomial\n       * modulus. In this case the variable using_fft will be set to true. However,\n       * currently Microsoft SEAL requires this to be the case for the parameters\n       * to be valid. Therefore, parameters_set can only be true if using_fft is\n       * true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingFFT\n       * @type {boolean}\n       */\n      get usingFFT() {\n        return _instance.usingFFT\n      },\n\n      /**\n       * Tells whether NTT can be used for polynomial multiplication. If the primes\n       * in the coefficient modulus are congruent to 1 modulo 2N, where X^N+1 is the\n       * polynomial modulus and N is a power of two, then the number-theoretic\n       * transform (NTT) can be used for fast multiplications of polynomials modulo\n       * the polynomial modulus and coefficient modulus. In this case the variable\n       * using_ntt will be set to true. However, currently Microsoft SEAL requires\n       * this to be the case for the parameters to be valid. Therefore, parameters_set\n       * can only be true if using_ntt is true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingNTT\n       * @type {boolean}\n       */\n      get usingNTT() {\n        return _instance.usingNTT\n      },\n\n      /**\n       * Tells whether batching is supported by the encryption parameters. If the\n       * plaintext modulus is congruent to 1 modulo 2N, where X^N+1 is the polynomial\n       * modulus and N is a power of two, then it is possible to use the BatchEncoder\n       * class to view plaintext elements as 2-by-(N/2) matrices of integers modulo\n       * the plaintext modulus. This is called batching, and allows the user to\n       * operate on the matrix elements (slots) in a SIMD fashion, and rotate the\n       * matrix rows and columns. When the computation is easily vectorizable, using\n       * batching can yield a huge performance boost. If the encryption parameters\n       * support batching, the variable using_batching is set to true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingBatching\n       * @type {boolean}\n       */\n      get usingBatching() {\n        return _instance.usingBatching\n      },\n\n      /**\n       * Tells whether fast plain lift is supported by the encryption parameters.\n       * A certain performance optimization in multiplication of a ciphertext by\n       * a plaintext (Evaluator::multiply_plain) and in transforming a plaintext\n       * element to NTT domain (Evaluator::transform_to_ntt) can be used when the\n       * plaintext modulus is smaller than each prime in the coefficient modulus.\n       * In this case the variable using_fast_plain_lift is set to true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingFastPlainLift\n       * @type {boolean}\n       */\n      get usingFastPlainLift() {\n        return _instance.usingFastPlainLift\n      },\n\n      /**\n       * Tells whether the coefficient modulus consists of a set of primes that\n       * are in decreasing order. If this is true, certain modular reductions in\n       * base conversion can be omitted, improving performance.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingDescendingModulusChain\n       * @type {boolean}\n       */\n      get usingDescendingModulusChain() {\n        return _instance.usingDescendingModulusChain\n      },\n\n      /**\n       * Tells whether the encryption parameters are secure based on the standard\n       * parameters from HomomorphicEncryption.org security standard.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#securityLevel\n       * @type {(SecurityLevel.none|SecurityLevel.tc128|SecurityLevel.tc192|SecurityLevel.tc256)}\n       */\n      get securityLevel() {\n        return _instance.securityLevel\n      }\n    }\n  }\n\nexport const EncryptionParameterQualifiersInit =\n  (): EncryptionParameterQualifiersDependencies => {\n    return EncryptionParameterQualifiersConstructor()\n  }\n","import { Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\n\nexport type SerializableDependencyOptions = {\n  readonly Exception: Exception\n  readonly Vector: VectorConstructorOptions\n  readonly ComprModeType: ComprModeType\n}\n\nexport type SerializableDependencies = {\n  ({\n    Exception,\n    Vector,\n    ComprModeType\n  }: SerializableDependencyOptions): SerializableConstructorOptions\n}\n\nexport type SerializableConstructorOptions = {\n  (): Serializable\n}\n\nexport type Serializable = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n}\n\nconst SerializableConstructor =\n  (): SerializableDependencies =>\n  ({\n    Exception,\n    Vector,\n    ComprModeType\n  }: SerializableDependencyOptions): SerializableConstructorOptions =>\n  (): Serializable => {\n    let _instance: Instance\n\n    /**\n     * @implements Serializable\n     */\n\n    /**\n     * @interface Serializable\n     */\n    return {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Serializable#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Serializable#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n        _instance = instance\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Serializable#delete\n       */\n      delete() {\n        if (_instance) {\n          _instance.delete()\n          _instance = undefined\n        }\n      },\n\n      /**\n       * Save to a base64 string\n       *\n       * @function\n       * @name Serializable#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save as a binary Uint8Array\n       *\n       * @function\n       * @name Serializable#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the Serializable object in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      }\n    }\n  }\n\nexport const SerializableInit = (): SerializableDependencies => {\n  return SerializableConstructor()\n}\n"],"names":["_scriptDir","Module","document","currentScript","src","undefined","moduleArg","aa","ba","h","ready","Promise","a","b","fa","ca","Object","assign","da","ea","r","self","location","href","indexOf","substr","replace","lastIndexOf","XMLHttpRequest","open","responseType","send","Uint8Array","response","ia","ha","printErr","console","error","bind","thisProgram","quit","wasmBinary","WebAssembly","ja","ka","w","x","y","z","A","C","ma","na","la","oa","buffer","HEAP8","Int8Array","HEAP16","Int16Array","HEAPU8","HEAPU16","Uint16Array","HEAP32","Int32Array","HEAPU32","Uint32Array","HEAPF32","Float32Array","HEAPF64","Float64Array","pa","qa","ra","sa","ta","preRun","shift","unshift","D","E","onAbort","RuntimeError","G","va","startsWith","wa","locateFile","ya","resolve","then","atob","slice","c","length","d","charCodeAt","xa","instantiate","Aa","this","name","message","status","Ba","Ca","noExitRuntime","Da","Ha","za","Ga","M","N","I","J","K","Ia","P","l","n","O","forEach","e","Array","g","k","hasOwnProperty","push","TypeError","Ma","Ja","R","Ka","La","Na","Oa","Q","Pa","pop","Qa","Ta","ga","count","value","Sa","create","writable","FinalizationRegistry","unregister","register","Ua","S","defineProperty","Va","arguments","apply","Wa","Xa","Ya","constructor","Za","$a","ab","bb","clone","Ra","T","cb","db","fromWireType","eb","m","p","Fa","toWireType","hb","kb","fb","gb","ib","get","U","includes","concat","call","jb","mb","lb","V","W","map","join","nb","ob","pb","Function","prototype","qb","t","u","split","f","q","rb","sb","trim","tb","ub","Ea","X","vb","Y","wb","Ub","xb","yb","toString","zb","Bb","Cb","Db","Eb","TextDecoder","Fb","decode","subarray","String","fromCharCode","Gb","Hb","Ib","Jb","Kb","Lb","Mb","Nb","Ob","Pb","Qb","Tb","Vb","USER","LOGNAME","PATH","PWD","HOME","LANG","navigator","languages","_","Xb","crypto","getRandomValues","Wb","Yb","Zb","$b","bc","v","H","B","getFullYear","getMonth","getDate","getDay","Date","getTime","setDate","setMonth","setFullYear","RegExp","substring","Math","floor","abs","ac","set","cc","dc","BindingError","Error","super","InternalError","isAliasOf","getPrototypeOf","isDeleted","deleteLater","getInheritedInstanceCount","keys","getLiveInheritedInstances","flushPendingDeletes","setDelayFunction","argPackAdvance","readValueFromPointer","deleteObject","pointerType","UnboundTypeError","stack","has","count_emval_handles","ic","fc","F","Ab","L","ua","Symbol","enumerable","configurable","splice","className","s","values","o","ArrayBuffer","Uint8ClampedArray","ec","Sb","Rb","i","j","copyWithin","min","max","byteLength","grow","Z","exports","__errno_location","stackSave","stackAlloc","gc","monitorRunDependencies","instantiateWasm","instance","catch","hc","_main","kc","calledRun","onRuntimeInitialized","lc","onExit","postRun","setStatus","setTimeout","dynCall_viij","dynCall_viiij","dynCall_iiiij","dynCall_vij","dynCall_iij","dynCall_iiij","dynCall_viijii","dynCall_iiiiij","dynCall_iiiiijj","dynCall_iiiiiijj","$","jc","preInit","noInitialRun","UNSUPPORTED_VECTOR_TYPE","BatchEncoderInit","loader","library","Exception","MemoryPoolHandle","PlainText","Vector","context","Constructor","BatchEncoder","_instance","safe","unsafeInject","delete","encode","array","plainText","plain","BigInt64Array","stringArray","BigUint64Array","signed","pool","global","tempVect","decodeInt32","setType","tempArr","toArray","decodeUint32","decodeBigInt","from","slotCount","BatchEncoderConstructor","CipherTextConstructor","ComprModeType","ParmsIdType","parmsId","sizeCapacity","Ciphertext","construct","reserve","capacity","resize","size","release","coeffModulusSize","polyModulusDegree","isTransparent","isNttForm","parms","inject","scale","setScale","save","compression","zstd","saveToString","saveArray","saveToArray","load","encoded","loadFromString","loadArray","loadFromArray","copy","cipher","clonedInstance","move","CipherTextInit","CKKSEncoderInit","CKKSEncoder","decodeDouble","CKKSEncoderConstructor","CoeffModulusInit","SecurityLevel","_MaxBitCount","CoeffModulus","MaxBitCount","_BFVDefault","BFVDefault","_CreateFromArray","CreateFromArray","securityLevel","tc128","vectorModulus","Create","bitSizes","CoeffModulusConstructor","ComprModeTypeInit","_none","none","_zlib","zlib","_zstd","ComprModeTypeConstructor","ContextDataConstructor","EncryptionParameters","EncryptionParameterQualifiers","encryptionParameters","qualifiers","encParmQualifiers","totalCoeffModulusBitCount","prevContextData","cxtData","nextContextData","chainIndex","ContextDataInit","ContextInit","ContextData","encryptionParams","expandModChain","SEALContext","toHuman","getContextData","contextData","keyContextData","firstContextData","lastContextData","parametersSet","keyParmsId","firstParmsId","lastParmsId","usingKeyswitching","ContextConstructor","DecryptorInit","secretKey","Decryptor","decrypt","cipherText","invariantNoiseBudget","DecryptorConstructor","EncryptionParametersInit","Modulus","SchemeType","schemeType","setPolyModulusDegree","setCoeffModulus","coeffModulus","setPlainModulus","plainModulus","scheme","smallModulus","BigInt","EncryptionParametersConstructor","EncryptorInit","CipherText","Serializable","publicKey","Encryptor","constructInstance","encrypt","encryptSerializable","temp","encryptSymmetric","encryptSymmetricSerializable","serialized","encryptZero","encryptZeroSerializable","EncryptorConstructor","EvaluatorInit","Evaluator","negate","encrypted","destination","add","sub","multiply","square","relinearize","relinKeys","cipherModSwitchToNext","cipherModSwitchTo","plainModSwitchToNext","plainModSwitchTo","rescaleToNext","rescaleTo","modReduceToNext","modReduceTo","exponentiate","exponent","addPlain","subPlain","multiplyPlain","plainTransformToNtt","destinationNtt","cipherTransformToNtt","cipherTransformFromNtt","encryptedNtt","applyGalois","galoisElt","galoisKeys","rotateRows","steps","rotateColumns","rotateVector","complexConjugate","sumElements","newDest","dotProduct","dotProductPlain","EvaluatorConstructor","ExceptionInit","_getException","getException","ExceptionConstructor","GaloisKeysConstructor","GaloisKeys","getIndex","hasKey","key","GaloisKeysInit","KeyGeneratorInit","PublicKey","SecretKey","RelinKeys","KeyGenerator","createPublicKey","createPublicKeySerializable","createRelinKeys","createRelinKeysSerializable","createGaloisKeys","createGaloisKeysSerializable","KeyGeneratorConstructor","MemoryPoolHandleInit","_global","MemoryPoolHandleGlobal","_threadLocal","MemoryPoolHandleThreadLocal","threadLocal","MemoryPoolHandleConstructor","ModulusInit","inst","setValue","createModulus","bitCount","isZero","isPrime","ModulusConstructor","ParmsIdTypeInit","ParmsIdTypeConstructor","PlainTextConstructor","coeffCount","Plaintext","shrinkToFit","setZero","significantCoeffCount","nonzeroCoeffCount","toPolynomial","PlainTextInit","PlainModulusInit","_Batching","PlainModulus","Batching","_BatchingVector","BatchingVector","bitSize","smallMod","polyPlainModulusDegree","vectBitSizes","vect","PlainModulusConstructor","PublicKeyConstructor","PublicKeyInit","RelinKeysConstructor","keyPower","RelinKeysInit","SchemeTypeInit","_bfv","bfv","_ckks","ckks","_bgv","bgv","SchemeTypeConstructor","SecretKeyConstructor","SecretKeyInit","SecurityLevelInit","SecLevelType","_tc128","_tc192","tc192","_tc256","tc256","SecurityLevelConstructor","VectorInit","_vecFromArrayUint8","vecFromArrayUint8","_vecFromArrayUint32","vecFromArrayUint32","_vecFromArrayInt32","vecFromArrayInt32","_vecFromArrayFloat64","vecFromArrayFloat64","_vecFromArrayBigInt64","vecFromArrayBigInt64","_vecFromArrayBigUint64","vecFromArrayBigUint64","_vecFromArrayModulus","vecFromArrayModulus","_jsArrayUint8FromVec","jsArrayUint8FromVec","_jsArrayUint32FromVec","jsArrayUint32FromVec","_jsArrayInt32FromVec","jsArrayInt32FromVec","_jsArrayFloat64FromVec","jsArrayFloat64FromVec","_jsArrayStringFromVecInt64","jsArrayStringFromVecInt64","_jsArrayStringFromVecUint64","jsArrayStringFromVecUint64","_jsArrayStringFromVecModulus","jsArrayStringFromVecModulus","_type","type","getValue","index","fill","VectorConstructor","async","bin","createLoader","sealLibrary","throws_wasm_worker_es","Loader","Context","exception","comprModeType","memoryPoolHandle","vector","modulus","serializable","parmsIdType","batchEncoder","ckksEncoder","encryptionParameterQualifiers","decryptor","encryptor","evaluator","Version","SEALConstructor","usingFFT","usingNTT","usingBatching","usingFastPlainLift","usingDescendingModulusChain","SEAL"],"mappings":"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"}